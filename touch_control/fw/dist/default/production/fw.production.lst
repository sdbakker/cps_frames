

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Jan 10 08:58:14 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	intentry,global,class=CODE,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	dabs	1,0x7E,2
   108  0000                     
   109                           ; Version 2.10
   110                           ; Generated 31/07/2019 GMT
   111                           ; 
   112                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC16LF1559 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0015                     	;# 
   161  0016                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001C                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0095                     	;# 
   175  0096                     	;# 
   176  0097                     	;# 
   177  0099                     	;# 
   178  009A                     	;# 
   179  009B                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  009F                     	;# 
   185  010C                     	;# 
   186  010D                     	;# 
   187  010E                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  011D                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  018E                     	;# 
   194  0191                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0194                     	;# 
   200  0195                     	;# 
   201  0196                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020C                     	;# 
   211  020D                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0391                     	;# 
   228  0392                     	;# 
   229  0393                     	;# 
   230  0394                     	;# 
   231  0395                     	;# 
   232  0396                     	;# 
   233  0611                     	;# 
   234  0612                     	;# 
   235  0613                     	;# 
   236  0613                     	;# 
   237  0614                     	;# 
   238  0615                     	;# 
   239  0616                     	;# 
   240  0616                     	;# 
   241  0711                     	;# 
   242  0711                     	;# 
   243  0711                     	;# 
   244  0712                     	;# 
   245  0712                     	;# 
   246  0713                     	;# 
   247  0713                     	;# 
   248  0713                     	;# 
   249  0714                     	;# 
   250  0714                     	;# 
   251  0714                     	;# 
   252  0715                     	;# 
   253  0715                     	;# 
   254  0716                     	;# 
   255  0716                     	;# 
   256  0716                     	;# 
   257  0716                     	;# 
   258  0717                     	;# 
   259  0717                     	;# 
   260  0717                     	;# 
   261  0717                     	;# 
   262  0718                     	;# 
   263  0718                     	;# 
   264  0718                     	;# 
   265  0719                     	;# 
   266  0719                     	;# 
   267  0719                     	;# 
   268  0719                     	;# 
   269  071A                     	;# 
   270  071A                     	;# 
   271  071A                     	;# 
   272  071A                     	;# 
   273  071A                     	;# 
   274  071B                     	;# 
   275  071B                     	;# 
   276  071C                     	;# 
   277  071C                     	;# 
   278  071C                     	;# 
   279  071C                     	;# 
   280  071C                     	;# 
   281  071D                     	;# 
   282  071D                     	;# 
   283  071E                     	;# 
   284  071E                     	;# 
   285  0791                     	;# 
   286  0791                     	;# 
   287  0793                     	;# 
   288  0793                     	;# 
   289  0794                     	;# 
   290  0794                     	;# 
   291  0796                     	;# 
   292  0796                     	;# 
   293  0796                     	;# 
   294  0797                     	;# 
   295  0797                     	;# 
   296  0797                     	;# 
   297  0798                     	;# 
   298  0798                     	;# 
   299  0799                     	;# 
   300  0799                     	;# 
   301  0799                     	;# 
   302  079A                     	;# 
   303  079A                     	;# 
   304  079A                     	;# 
   305  079B                     	;# 
   306  079C                     	;# 
   307  079C                     	;# 
   308  079C                     	;# 
   309  079D                     	;# 
   310  079E                     	;# 
   311  079E                     	;# 
   312  0F8C                     	;# 
   313  0F8D                     	;# 
   314  0F91                     	;# 
   315  0F96                     	;# 
   316  0F97                     	;# 
   317  0F9C                     	;# 
   318  0F9D                     	;# 
   319  0F9E                     	;# 
   320  0FE3                     	;# 
   321  0FE4                     	;# 
   322  0FE5                     	;# 
   323  0FE6                     	;# 
   324  0FE7                     	;# 
   325  0FE8                     	;# 
   326  0FE9                     	;# 
   327  0FEA                     	;# 
   328  0FEB                     	;# 
   329  0FED                     	;# 
   330  0FEE                     	;# 
   331  0FEF                     	;# 
   332  0000                     	;# 
   333  0001                     	;# 
   334  0002                     	;# 
   335  0003                     	;# 
   336  0004                     	;# 
   337  0005                     	;# 
   338  0006                     	;# 
   339  0007                     	;# 
   340  0008                     	;# 
   341  0009                     	;# 
   342  000A                     	;# 
   343  000B                     	;# 
   344  000C                     	;# 
   345  000D                     	;# 
   346  000E                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0015                     	;# 
   350  0016                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001C                     	;# 
   358  008C                     	;# 
   359  008D                     	;# 
   360  008E                     	;# 
   361  0091                     	;# 
   362  0092                     	;# 
   363  0095                     	;# 
   364  0096                     	;# 
   365  0097                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  009F                     	;# 
   374  010C                     	;# 
   375  010D                     	;# 
   376  010E                     	;# 
   377  0116                     	;# 
   378  0117                     	;# 
   379  011D                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  018E                     	;# 
   383  0191                     	;# 
   384  0191                     	;# 
   385  0192                     	;# 
   386  0193                     	;# 
   387  0193                     	;# 
   388  0194                     	;# 
   389  0195                     	;# 
   390  0196                     	;# 
   391  0199                     	;# 
   392  019A                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019C                     	;# 
   396  019D                     	;# 
   397  019E                     	;# 
   398  019F                     	;# 
   399  020C                     	;# 
   400  020D                     	;# 
   401  0211                     	;# 
   402  0211                     	;# 
   403  0212                     	;# 
   404  0212                     	;# 
   405  0213                     	;# 
   406  0213                     	;# 
   407  0214                     	;# 
   408  0214                     	;# 
   409  0215                     	;# 
   410  0215                     	;# 
   411  0215                     	;# 
   412  0216                     	;# 
   413  0216                     	;# 
   414  0217                     	;# 
   415  0217                     	;# 
   416  0391                     	;# 
   417  0392                     	;# 
   418  0393                     	;# 
   419  0394                     	;# 
   420  0395                     	;# 
   421  0396                     	;# 
   422  0611                     	;# 
   423  0612                     	;# 
   424  0613                     	;# 
   425  0613                     	;# 
   426  0614                     	;# 
   427  0615                     	;# 
   428  0616                     	;# 
   429  0616                     	;# 
   430  0711                     	;# 
   431  0711                     	;# 
   432  0711                     	;# 
   433  0712                     	;# 
   434  0712                     	;# 
   435  0713                     	;# 
   436  0713                     	;# 
   437  0713                     	;# 
   438  0714                     	;# 
   439  0714                     	;# 
   440  0714                     	;# 
   441  0715                     	;# 
   442  0715                     	;# 
   443  0716                     	;# 
   444  0716                     	;# 
   445  0716                     	;# 
   446  0716                     	;# 
   447  0717                     	;# 
   448  0717                     	;# 
   449  0717                     	;# 
   450  0717                     	;# 
   451  0718                     	;# 
   452  0718                     	;# 
   453  0718                     	;# 
   454  0719                     	;# 
   455  0719                     	;# 
   456  0719                     	;# 
   457  0719                     	;# 
   458  071A                     	;# 
   459  071A                     	;# 
   460  071A                     	;# 
   461  071A                     	;# 
   462  071A                     	;# 
   463  071B                     	;# 
   464  071B                     	;# 
   465  071C                     	;# 
   466  071C                     	;# 
   467  071C                     	;# 
   468  071C                     	;# 
   469  071C                     	;# 
   470  071D                     	;# 
   471  071D                     	;# 
   472  071E                     	;# 
   473  071E                     	;# 
   474  0791                     	;# 
   475  0791                     	;# 
   476  0793                     	;# 
   477  0793                     	;# 
   478  0794                     	;# 
   479  0794                     	;# 
   480  0796                     	;# 
   481  0796                     	;# 
   482  0796                     	;# 
   483  0797                     	;# 
   484  0797                     	;# 
   485  0797                     	;# 
   486  0798                     	;# 
   487  0798                     	;# 
   488  0799                     	;# 
   489  0799                     	;# 
   490  0799                     	;# 
   491  079A                     	;# 
   492  079A                     	;# 
   493  079A                     	;# 
   494  079B                     	;# 
   495  079C                     	;# 
   496  079C                     	;# 
   497  079C                     	;# 
   498  079D                     	;# 
   499  079E                     	;# 
   500  079E                     	;# 
   501  0F8C                     	;# 
   502  0F8D                     	;# 
   503  0F91                     	;# 
   504  0F96                     	;# 
   505  0F97                     	;# 
   506  0F9C                     	;# 
   507  0F9D                     	;# 
   508  0F9E                     	;# 
   509  0FE3                     	;# 
   510  0FE4                     	;# 
   511  0FE5                     	;# 
   512  0FE6                     	;# 
   513  0FE7                     	;# 
   514  0FE8                     	;# 
   515  0FE9                     	;# 
   516  0FEA                     	;# 
   517  0FEB                     	;# 
   518  0FED                     	;# 
   519  0FEE                     	;# 
   520  0FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  0011                     	;# 
   537  0012                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001C                     	;# 
   547  008C                     	;# 
   548  008D                     	;# 
   549  008E                     	;# 
   550  0091                     	;# 
   551  0092                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0099                     	;# 
   556  009A                     	;# 
   557  009B                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  0116                     	;# 
   567  0117                     	;# 
   568  011D                     	;# 
   569  018C                     	;# 
   570  018D                     	;# 
   571  018E                     	;# 
   572  0191                     	;# 
   573  0191                     	;# 
   574  0192                     	;# 
   575  0193                     	;# 
   576  0193                     	;# 
   577  0194                     	;# 
   578  0195                     	;# 
   579  0196                     	;# 
   580  0199                     	;# 
   581  019A                     	;# 
   582  019B                     	;# 
   583  019B                     	;# 
   584  019C                     	;# 
   585  019D                     	;# 
   586  019E                     	;# 
   587  019F                     	;# 
   588  020C                     	;# 
   589  020D                     	;# 
   590  0211                     	;# 
   591  0211                     	;# 
   592  0212                     	;# 
   593  0212                     	;# 
   594  0213                     	;# 
   595  0213                     	;# 
   596  0214                     	;# 
   597  0214                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0216                     	;# 
   602  0216                     	;# 
   603  0217                     	;# 
   604  0217                     	;# 
   605  0391                     	;# 
   606  0392                     	;# 
   607  0393                     	;# 
   608  0394                     	;# 
   609  0395                     	;# 
   610  0396                     	;# 
   611  0611                     	;# 
   612  0612                     	;# 
   613  0613                     	;# 
   614  0613                     	;# 
   615  0614                     	;# 
   616  0615                     	;# 
   617  0616                     	;# 
   618  0616                     	;# 
   619  0711                     	;# 
   620  0711                     	;# 
   621  0711                     	;# 
   622  0712                     	;# 
   623  0712                     	;# 
   624  0713                     	;# 
   625  0713                     	;# 
   626  0713                     	;# 
   627  0714                     	;# 
   628  0714                     	;# 
   629  0714                     	;# 
   630  0715                     	;# 
   631  0715                     	;# 
   632  0716                     	;# 
   633  0716                     	;# 
   634  0716                     	;# 
   635  0716                     	;# 
   636  0717                     	;# 
   637  0717                     	;# 
   638  0717                     	;# 
   639  0717                     	;# 
   640  0718                     	;# 
   641  0718                     	;# 
   642  0718                     	;# 
   643  0719                     	;# 
   644  0719                     	;# 
   645  0719                     	;# 
   646  0719                     	;# 
   647  071A                     	;# 
   648  071A                     	;# 
   649  071A                     	;# 
   650  071A                     	;# 
   651  071A                     	;# 
   652  071B                     	;# 
   653  071B                     	;# 
   654  071C                     	;# 
   655  071C                     	;# 
   656  071C                     	;# 
   657  071C                     	;# 
   658  071C                     	;# 
   659  071D                     	;# 
   660  071D                     	;# 
   661  071E                     	;# 
   662  071E                     	;# 
   663  0791                     	;# 
   664  0791                     	;# 
   665  0793                     	;# 
   666  0793                     	;# 
   667  0794                     	;# 
   668  0794                     	;# 
   669  0796                     	;# 
   670  0796                     	;# 
   671  0796                     	;# 
   672  0797                     	;# 
   673  0797                     	;# 
   674  0797                     	;# 
   675  0798                     	;# 
   676  0798                     	;# 
   677  0799                     	;# 
   678  0799                     	;# 
   679  0799                     	;# 
   680  079A                     	;# 
   681  079A                     	;# 
   682  079A                     	;# 
   683  079B                     	;# 
   684  079C                     	;# 
   685  079C                     	;# 
   686  079C                     	;# 
   687  079D                     	;# 
   688  079E                     	;# 
   689  079E                     	;# 
   690  0F8C                     	;# 
   691  0F8D                     	;# 
   692  0F91                     	;# 
   693  0F96                     	;# 
   694  0F97                     	;# 
   695  0F9C                     	;# 
   696  0F9D                     	;# 
   697  0F9E                     	;# 
   698  0FE3                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001C                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  0091                     	;# 
   740  0092                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  009F                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  011D                     	;# 
   758  018C                     	;# 
   759  018D                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0194                     	;# 
   767  0195                     	;# 
   768  0196                     	;# 
   769  0199                     	;# 
   770  019A                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019C                     	;# 
   774  019D                     	;# 
   775  019E                     	;# 
   776  019F                     	;# 
   777  020C                     	;# 
   778  020D                     	;# 
   779  0211                     	;# 
   780  0211                     	;# 
   781  0212                     	;# 
   782  0212                     	;# 
   783  0213                     	;# 
   784  0213                     	;# 
   785  0214                     	;# 
   786  0214                     	;# 
   787  0215                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0216                     	;# 
   791  0216                     	;# 
   792  0217                     	;# 
   793  0217                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0611                     	;# 
   801  0612                     	;# 
   802  0613                     	;# 
   803  0613                     	;# 
   804  0614                     	;# 
   805  0615                     	;# 
   806  0616                     	;# 
   807  0616                     	;# 
   808  0711                     	;# 
   809  0711                     	;# 
   810  0711                     	;# 
   811  0712                     	;# 
   812  0712                     	;# 
   813  0713                     	;# 
   814  0713                     	;# 
   815  0713                     	;# 
   816  0714                     	;# 
   817  0714                     	;# 
   818  0714                     	;# 
   819  0715                     	;# 
   820  0715                     	;# 
   821  0716                     	;# 
   822  0716                     	;# 
   823  0716                     	;# 
   824  0716                     	;# 
   825  0717                     	;# 
   826  0717                     	;# 
   827  0717                     	;# 
   828  0717                     	;# 
   829  0718                     	;# 
   830  0718                     	;# 
   831  0718                     	;# 
   832  0719                     	;# 
   833  0719                     	;# 
   834  0719                     	;# 
   835  0719                     	;# 
   836  071A                     	;# 
   837  071A                     	;# 
   838  071A                     	;# 
   839  071A                     	;# 
   840  071A                     	;# 
   841  071B                     	;# 
   842  071B                     	;# 
   843  071C                     	;# 
   844  071C                     	;# 
   845  071C                     	;# 
   846  071C                     	;# 
   847  071C                     	;# 
   848  071D                     	;# 
   849  071D                     	;# 
   850  071E                     	;# 
   851  071E                     	;# 
   852  0791                     	;# 
   853  0791                     	;# 
   854  0793                     	;# 
   855  0793                     	;# 
   856  0794                     	;# 
   857  0794                     	;# 
   858  0796                     	;# 
   859  0796                     	;# 
   860  0796                     	;# 
   861  0797                     	;# 
   862  0797                     	;# 
   863  0797                     	;# 
   864  0798                     	;# 
   865  0798                     	;# 
   866  0799                     	;# 
   867  0799                     	;# 
   868  0799                     	;# 
   869  079A                     	;# 
   870  079A                     	;# 
   871  079A                     	;# 
   872  079B                     	;# 
   873  079C                     	;# 
   874  079C                     	;# 
   875  079C                     	;# 
   876  079D                     	;# 
   877  079E                     	;# 
   878  079E                     	;# 
   879  0F8C                     	;# 
   880  0F8D                     	;# 
   881  0F91                     	;# 
   882  0F96                     	;# 
   883  0F97                     	;# 
   884  0F9C                     	;# 
   885  0F9D                     	;# 
   886  0F9E                     	;# 
   887  0FE3                     	;# 
   888  0FE4                     	;# 
   889  0FE5                     	;# 
   890  0FE6                     	;# 
   891  0FE7                     	;# 
   892  0FE8                     	;# 
   893  0FE9                     	;# 
   894  0FEA                     	;# 
   895  0FEB                     	;# 
   896  0FED                     	;# 
   897  0FEE                     	;# 
   898  0FEF                     	;# 
   899  0000                     	;# 
   900  0001                     	;# 
   901  0002                     	;# 
   902  0003                     	;# 
   903  0004                     	;# 
   904  0005                     	;# 
   905  0006                     	;# 
   906  0007                     	;# 
   907  0008                     	;# 
   908  0009                     	;# 
   909  000A                     	;# 
   910  000B                     	;# 
   911  000C                     	;# 
   912  000D                     	;# 
   913  000E                     	;# 
   914  0011                     	;# 
   915  0012                     	;# 
   916  0015                     	;# 
   917  0016                     	;# 
   918  0016                     	;# 
   919  0017                     	;# 
   920  0018                     	;# 
   921  0019                     	;# 
   922  001A                     	;# 
   923  001B                     	;# 
   924  001C                     	;# 
   925  008C                     	;# 
   926  008D                     	;# 
   927  008E                     	;# 
   928  0091                     	;# 
   929  0092                     	;# 
   930  0095                     	;# 
   931  0096                     	;# 
   932  0097                     	;# 
   933  0099                     	;# 
   934  009A                     	;# 
   935  009B                     	;# 
   936  009B                     	;# 
   937  009C                     	;# 
   938  009D                     	;# 
   939  009E                     	;# 
   940  009F                     	;# 
   941  010C                     	;# 
   942  010D                     	;# 
   943  010E                     	;# 
   944  0116                     	;# 
   945  0117                     	;# 
   946  011D                     	;# 
   947  018C                     	;# 
   948  018D                     	;# 
   949  018E                     	;# 
   950  0191                     	;# 
   951  0191                     	;# 
   952  0192                     	;# 
   953  0193                     	;# 
   954  0193                     	;# 
   955  0194                     	;# 
   956  0195                     	;# 
   957  0196                     	;# 
   958  0199                     	;# 
   959  019A                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019C                     	;# 
   963  019D                     	;# 
   964  019E                     	;# 
   965  019F                     	;# 
   966  020C                     	;# 
   967  020D                     	;# 
   968  0211                     	;# 
   969  0211                     	;# 
   970  0212                     	;# 
   971  0212                     	;# 
   972  0213                     	;# 
   973  0213                     	;# 
   974  0214                     	;# 
   975  0214                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0216                     	;# 
   980  0216                     	;# 
   981  0217                     	;# 
   982  0217                     	;# 
   983  0391                     	;# 
   984  0392                     	;# 
   985  0393                     	;# 
   986  0394                     	;# 
   987  0395                     	;# 
   988  0396                     	;# 
   989  0611                     	;# 
   990  0612                     	;# 
   991  0613                     	;# 
   992  0613                     	;# 
   993  0614                     	;# 
   994  0615                     	;# 
   995  0616                     	;# 
   996  0616                     	;# 
   997  0711                     	;# 
   998  0711                     	;# 
   999  0711                     	;# 
  1000  0712                     	;# 
  1001  0712                     	;# 
  1002  0713                     	;# 
  1003  0713                     	;# 
  1004  0713                     	;# 
  1005  0714                     	;# 
  1006  0714                     	;# 
  1007  0714                     	;# 
  1008  0715                     	;# 
  1009  0715                     	;# 
  1010  0716                     	;# 
  1011  0716                     	;# 
  1012  0716                     	;# 
  1013  0716                     	;# 
  1014  0717                     	;# 
  1015  0717                     	;# 
  1016  0717                     	;# 
  1017  0717                     	;# 
  1018  0718                     	;# 
  1019  0718                     	;# 
  1020  0718                     	;# 
  1021  0719                     	;# 
  1022  0719                     	;# 
  1023  0719                     	;# 
  1024  0719                     	;# 
  1025  071A                     	;# 
  1026  071A                     	;# 
  1027  071A                     	;# 
  1028  071A                     	;# 
  1029  071A                     	;# 
  1030  071B                     	;# 
  1031  071B                     	;# 
  1032  071C                     	;# 
  1033  071C                     	;# 
  1034  071C                     	;# 
  1035  071C                     	;# 
  1036  071C                     	;# 
  1037  071D                     	;# 
  1038  071D                     	;# 
  1039  071E                     	;# 
  1040  071E                     	;# 
  1041  0791                     	;# 
  1042  0791                     	;# 
  1043  0793                     	;# 
  1044  0793                     	;# 
  1045  0794                     	;# 
  1046  0794                     	;# 
  1047  0796                     	;# 
  1048  0796                     	;# 
  1049  0796                     	;# 
  1050  0797                     	;# 
  1051  0797                     	;# 
  1052  0797                     	;# 
  1053  0798                     	;# 
  1054  0798                     	;# 
  1055  0799                     	;# 
  1056  0799                     	;# 
  1057  0799                     	;# 
  1058  079A                     	;# 
  1059  079A                     	;# 
  1060  079A                     	;# 
  1061  079B                     	;# 
  1062  079C                     	;# 
  1063  079C                     	;# 
  1064  079C                     	;# 
  1065  079D                     	;# 
  1066  079E                     	;# 
  1067  079E                     	;# 
  1068  0F8C                     	;# 
  1069  0F8D                     	;# 
  1070  0F91                     	;# 
  1071  0F96                     	;# 
  1072  0F97                     	;# 
  1073  0F9C                     	;# 
  1074  0F9D                     	;# 
  1075  0F9E                     	;# 
  1076  0FE3                     	;# 
  1077  0FE4                     	;# 
  1078  0FE5                     	;# 
  1079  0FE6                     	;# 
  1080  0FE7                     	;# 
  1081  0FE8                     	;# 
  1082  0FE9                     	;# 
  1083  0FEA                     	;# 
  1084  0FEB                     	;# 
  1085  0FED                     	;# 
  1086  0FEE                     	;# 
  1087  0FEF                     	;# 
  1088  0000                     	;# 
  1089  0001                     	;# 
  1090  0002                     	;# 
  1091  0003                     	;# 
  1092  0004                     	;# 
  1093  0005                     	;# 
  1094  0006                     	;# 
  1095  0007                     	;# 
  1096  0008                     	;# 
  1097  0009                     	;# 
  1098  000A                     	;# 
  1099  000B                     	;# 
  1100  000C                     	;# 
  1101  000D                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  008C                     	;# 
  1115  008D                     	;# 
  1116  008E                     	;# 
  1117  0091                     	;# 
  1118  0092                     	;# 
  1119  0095                     	;# 
  1120  0096                     	;# 
  1121  0097                     	;# 
  1122  0099                     	;# 
  1123  009A                     	;# 
  1124  009B                     	;# 
  1125  009B                     	;# 
  1126  009C                     	;# 
  1127  009D                     	;# 
  1128  009E                     	;# 
  1129  009F                     	;# 
  1130  010C                     	;# 
  1131  010D                     	;# 
  1132  010E                     	;# 
  1133  0116                     	;# 
  1134  0117                     	;# 
  1135  011D                     	;# 
  1136  018C                     	;# 
  1137  018D                     	;# 
  1138  018E                     	;# 
  1139  0191                     	;# 
  1140  0191                     	;# 
  1141  0192                     	;# 
  1142  0193                     	;# 
  1143  0193                     	;# 
  1144  0194                     	;# 
  1145  0195                     	;# 
  1146  0196                     	;# 
  1147  0199                     	;# 
  1148  019A                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019C                     	;# 
  1152  019D                     	;# 
  1153  019E                     	;# 
  1154  019F                     	;# 
  1155  020C                     	;# 
  1156  020D                     	;# 
  1157  0211                     	;# 
  1158  0211                     	;# 
  1159  0212                     	;# 
  1160  0212                     	;# 
  1161  0213                     	;# 
  1162  0213                     	;# 
  1163  0214                     	;# 
  1164  0214                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0216                     	;# 
  1169  0216                     	;# 
  1170  0217                     	;# 
  1171  0217                     	;# 
  1172  0391                     	;# 
  1173  0392                     	;# 
  1174  0393                     	;# 
  1175  0394                     	;# 
  1176  0395                     	;# 
  1177  0396                     	;# 
  1178  0611                     	;# 
  1179  0612                     	;# 
  1180  0613                     	;# 
  1181  0613                     	;# 
  1182  0614                     	;# 
  1183  0615                     	;# 
  1184  0616                     	;# 
  1185  0616                     	;# 
  1186  0711                     	;# 
  1187  0711                     	;# 
  1188  0711                     	;# 
  1189  0712                     	;# 
  1190  0712                     	;# 
  1191  0713                     	;# 
  1192  0713                     	;# 
  1193  0713                     	;# 
  1194  0714                     	;# 
  1195  0714                     	;# 
  1196  0714                     	;# 
  1197  0715                     	;# 
  1198  0715                     	;# 
  1199  0716                     	;# 
  1200  0716                     	;# 
  1201  0716                     	;# 
  1202  0716                     	;# 
  1203  0717                     	;# 
  1204  0717                     	;# 
  1205  0717                     	;# 
  1206  0717                     	;# 
  1207  0718                     	;# 
  1208  0718                     	;# 
  1209  0718                     	;# 
  1210  0719                     	;# 
  1211  0719                     	;# 
  1212  0719                     	;# 
  1213  0719                     	;# 
  1214  071A                     	;# 
  1215  071A                     	;# 
  1216  071A                     	;# 
  1217  071A                     	;# 
  1218  071A                     	;# 
  1219  071B                     	;# 
  1220  071B                     	;# 
  1221  071C                     	;# 
  1222  071C                     	;# 
  1223  071C                     	;# 
  1224  071C                     	;# 
  1225  071C                     	;# 
  1226  071D                     	;# 
  1227  071D                     	;# 
  1228  071E                     	;# 
  1229  071E                     	;# 
  1230  0791                     	;# 
  1231  0791                     	;# 
  1232  0793                     	;# 
  1233  0793                     	;# 
  1234  0794                     	;# 
  1235  0794                     	;# 
  1236  0796                     	;# 
  1237  0796                     	;# 
  1238  0796                     	;# 
  1239  0797                     	;# 
  1240  0797                     	;# 
  1241  0797                     	;# 
  1242  0798                     	;# 
  1243  0798                     	;# 
  1244  0799                     	;# 
  1245  0799                     	;# 
  1246  0799                     	;# 
  1247  079A                     	;# 
  1248  079A                     	;# 
  1249  079A                     	;# 
  1250  079B                     	;# 
  1251  079C                     	;# 
  1252  079C                     	;# 
  1253  079C                     	;# 
  1254  079D                     	;# 
  1255  079E                     	;# 
  1256  079E                     	;# 
  1257  0F8C                     	;# 
  1258  0F8D                     	;# 
  1259  0F91                     	;# 
  1260  0F96                     	;# 
  1261  0F97                     	;# 
  1262  0F9C                     	;# 
  1263  0F9D                     	;# 
  1264  0F9E                     	;# 
  1265  0FE3                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  009F                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019C                     	;# 
  1341  019D                     	;# 
  1342  019E                     	;# 
  1343  019F                     	;# 
  1344  020C                     	;# 
  1345  020D                     	;# 
  1346  0211                     	;# 
  1347  0211                     	;# 
  1348  0212                     	;# 
  1349  0212                     	;# 
  1350  0213                     	;# 
  1351  0213                     	;# 
  1352  0214                     	;# 
  1353  0214                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0216                     	;# 
  1358  0216                     	;# 
  1359  0217                     	;# 
  1360  0217                     	;# 
  1361  0391                     	;# 
  1362  0392                     	;# 
  1363  0393                     	;# 
  1364  0394                     	;# 
  1365  0395                     	;# 
  1366  0396                     	;# 
  1367  0611                     	;# 
  1368  0612                     	;# 
  1369  0613                     	;# 
  1370  0613                     	;# 
  1371  0614                     	;# 
  1372  0615                     	;# 
  1373  0616                     	;# 
  1374  0616                     	;# 
  1375  0711                     	;# 
  1376  0711                     	;# 
  1377  0711                     	;# 
  1378  0712                     	;# 
  1379  0712                     	;# 
  1380  0713                     	;# 
  1381  0713                     	;# 
  1382  0713                     	;# 
  1383  0714                     	;# 
  1384  0714                     	;# 
  1385  0714                     	;# 
  1386  0715                     	;# 
  1387  0715                     	;# 
  1388  0716                     	;# 
  1389  0716                     	;# 
  1390  0716                     	;# 
  1391  0716                     	;# 
  1392  0717                     	;# 
  1393  0717                     	;# 
  1394  0717                     	;# 
  1395  0717                     	;# 
  1396  0718                     	;# 
  1397  0718                     	;# 
  1398  0718                     	;# 
  1399  0719                     	;# 
  1400  0719                     	;# 
  1401  0719                     	;# 
  1402  0719                     	;# 
  1403  071A                     	;# 
  1404  071A                     	;# 
  1405  071A                     	;# 
  1406  071A                     	;# 
  1407  071A                     	;# 
  1408  071B                     	;# 
  1409  071B                     	;# 
  1410  071C                     	;# 
  1411  071C                     	;# 
  1412  071C                     	;# 
  1413  071C                     	;# 
  1414  071C                     	;# 
  1415  071D                     	;# 
  1416  071D                     	;# 
  1417  071E                     	;# 
  1418  071E                     	;# 
  1419  0791                     	;# 
  1420  0791                     	;# 
  1421  0793                     	;# 
  1422  0793                     	;# 
  1423  0794                     	;# 
  1424  0794                     	;# 
  1425  0796                     	;# 
  1426  0796                     	;# 
  1427  0796                     	;# 
  1428  0797                     	;# 
  1429  0797                     	;# 
  1430  0797                     	;# 
  1431  0798                     	;# 
  1432  0798                     	;# 
  1433  0799                     	;# 
  1434  0799                     	;# 
  1435  0799                     	;# 
  1436  079A                     	;# 
  1437  079A                     	;# 
  1438  079A                     	;# 
  1439  079B                     	;# 
  1440  079C                     	;# 
  1441  079C                     	;# 
  1442  079C                     	;# 
  1443  079D                     	;# 
  1444  079E                     	;# 
  1445  079E                     	;# 
  1446  0F8C                     	;# 
  1447  0F8D                     	;# 
  1448  0F91                     	;# 
  1449  0F96                     	;# 
  1450  0F97                     	;# 
  1451  0F9C                     	;# 
  1452  0F9D                     	;# 
  1453  0F9E                     	;# 
  1454  0FE3                     	;# 
  1455  0FE4                     	;# 
  1456  0FE5                     	;# 
  1457  0FE6                     	;# 
  1458  0FE7                     	;# 
  1459  0FE8                     	;# 
  1460  0FE9                     	;# 
  1461  0FEA                     	;# 
  1462  0FEB                     	;# 
  1463  0FED                     	;# 
  1464  0FEE                     	;# 
  1465  0FEF                     	;# 
  1466  0000                     	;# 
  1467  0001                     	;# 
  1468  0002                     	;# 
  1469  0003                     	;# 
  1470  0004                     	;# 
  1471  0005                     	;# 
  1472  0006                     	;# 
  1473  0007                     	;# 
  1474  0008                     	;# 
  1475  0009                     	;# 
  1476  000A                     	;# 
  1477  000B                     	;# 
  1478  000C                     	;# 
  1479  000D                     	;# 
  1480  000E                     	;# 
  1481  0011                     	;# 
  1482  0012                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  001A                     	;# 
  1490  001B                     	;# 
  1491  001C                     	;# 
  1492  008C                     	;# 
  1493  008D                     	;# 
  1494  008E                     	;# 
  1495  0091                     	;# 
  1496  0092                     	;# 
  1497  0095                     	;# 
  1498  0096                     	;# 
  1499  0097                     	;# 
  1500  0099                     	;# 
  1501  009A                     	;# 
  1502  009B                     	;# 
  1503  009B                     	;# 
  1504  009C                     	;# 
  1505  009D                     	;# 
  1506  009E                     	;# 
  1507  009F                     	;# 
  1508  010C                     	;# 
  1509  010D                     	;# 
  1510  010E                     	;# 
  1511  0116                     	;# 
  1512  0117                     	;# 
  1513  011D                     	;# 
  1514  018C                     	;# 
  1515  018D                     	;# 
  1516  018E                     	;# 
  1517  0191                     	;# 
  1518  0191                     	;# 
  1519  0192                     	;# 
  1520  0193                     	;# 
  1521  0193                     	;# 
  1522  0194                     	;# 
  1523  0195                     	;# 
  1524  0196                     	;# 
  1525  0199                     	;# 
  1526  019A                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019C                     	;# 
  1530  019D                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  020C                     	;# 
  1534  020D                     	;# 
  1535  0211                     	;# 
  1536  0211                     	;# 
  1537  0212                     	;# 
  1538  0212                     	;# 
  1539  0213                     	;# 
  1540  0213                     	;# 
  1541  0214                     	;# 
  1542  0214                     	;# 
  1543  0215                     	;# 
  1544  0215                     	;# 
  1545  0215                     	;# 
  1546  0216                     	;# 
  1547  0216                     	;# 
  1548  0217                     	;# 
  1549  0217                     	;# 
  1550  0391                     	;# 
  1551  0392                     	;# 
  1552  0393                     	;# 
  1553  0394                     	;# 
  1554  0395                     	;# 
  1555  0396                     	;# 
  1556  0611                     	;# 
  1557  0612                     	;# 
  1558  0613                     	;# 
  1559  0613                     	;# 
  1560  0614                     	;# 
  1561  0615                     	;# 
  1562  0616                     	;# 
  1563  0616                     	;# 
  1564  0711                     	;# 
  1565  0711                     	;# 
  1566  0711                     	;# 
  1567  0712                     	;# 
  1568  0712                     	;# 
  1569  0713                     	;# 
  1570  0713                     	;# 
  1571  0713                     	;# 
  1572  0714                     	;# 
  1573  0714                     	;# 
  1574  0714                     	;# 
  1575  0715                     	;# 
  1576  0715                     	;# 
  1577  0716                     	;# 
  1578  0716                     	;# 
  1579  0716                     	;# 
  1580  0716                     	;# 
  1581  0717                     	;# 
  1582  0717                     	;# 
  1583  0717                     	;# 
  1584  0717                     	;# 
  1585  0718                     	;# 
  1586  0718                     	;# 
  1587  0718                     	;# 
  1588  0719                     	;# 
  1589  0719                     	;# 
  1590  0719                     	;# 
  1591  0719                     	;# 
  1592  071A                     	;# 
  1593  071A                     	;# 
  1594  071A                     	;# 
  1595  071A                     	;# 
  1596  071A                     	;# 
  1597  071B                     	;# 
  1598  071B                     	;# 
  1599  071C                     	;# 
  1600  071C                     	;# 
  1601  071C                     	;# 
  1602  071C                     	;# 
  1603  071C                     	;# 
  1604  071D                     	;# 
  1605  071D                     	;# 
  1606  071E                     	;# 
  1607  071E                     	;# 
  1608  0791                     	;# 
  1609  0791                     	;# 
  1610  0793                     	;# 
  1611  0793                     	;# 
  1612  0794                     	;# 
  1613  0794                     	;# 
  1614  0796                     	;# 
  1615  0796                     	;# 
  1616  0796                     	;# 
  1617  0797                     	;# 
  1618  0797                     	;# 
  1619  0797                     	;# 
  1620  0798                     	;# 
  1621  0798                     	;# 
  1622  0799                     	;# 
  1623  0799                     	;# 
  1624  0799                     	;# 
  1625  079A                     	;# 
  1626  079A                     	;# 
  1627  079A                     	;# 
  1628  079B                     	;# 
  1629  079C                     	;# 
  1630  079C                     	;# 
  1631  079C                     	;# 
  1632  079D                     	;# 
  1633  079E                     	;# 
  1634  079E                     	;# 
  1635  0F8C                     	;# 
  1636  0F8D                     	;# 
  1637  0F91                     	;# 
  1638  0F96                     	;# 
  1639  0F97                     	;# 
  1640  0F9C                     	;# 
  1641  0F9D                     	;# 
  1642  0F9E                     	;# 
  1643  0FE3                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0011                     	;# 
  1671  0012                     	;# 
  1672  0015                     	;# 
  1673  0016                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  0019                     	;# 
  1678  001A                     	;# 
  1679  001B                     	;# 
  1680  001C                     	;# 
  1681  008C                     	;# 
  1682  008D                     	;# 
  1683  008E                     	;# 
  1684  0091                     	;# 
  1685  0092                     	;# 
  1686  0095                     	;# 
  1687  0096                     	;# 
  1688  0097                     	;# 
  1689  0099                     	;# 
  1690  009A                     	;# 
  1691  009B                     	;# 
  1692  009B                     	;# 
  1693  009C                     	;# 
  1694  009D                     	;# 
  1695  009E                     	;# 
  1696  009F                     	;# 
  1697  010C                     	;# 
  1698  010D                     	;# 
  1699  010E                     	;# 
  1700  0116                     	;# 
  1701  0117                     	;# 
  1702  011D                     	;# 
  1703  018C                     	;# 
  1704  018D                     	;# 
  1705  018E                     	;# 
  1706  0191                     	;# 
  1707  0191                     	;# 
  1708  0192                     	;# 
  1709  0193                     	;# 
  1710  0193                     	;# 
  1711  0194                     	;# 
  1712  0195                     	;# 
  1713  0196                     	;# 
  1714  0199                     	;# 
  1715  019A                     	;# 
  1716  019B                     	;# 
  1717  019B                     	;# 
  1718  019C                     	;# 
  1719  019D                     	;# 
  1720  019E                     	;# 
  1721  019F                     	;# 
  1722  020C                     	;# 
  1723  020D                     	;# 
  1724  0211                     	;# 
  1725  0211                     	;# 
  1726  0212                     	;# 
  1727  0212                     	;# 
  1728  0213                     	;# 
  1729  0213                     	;# 
  1730  0214                     	;# 
  1731  0214                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0215                     	;# 
  1735  0216                     	;# 
  1736  0216                     	;# 
  1737  0217                     	;# 
  1738  0217                     	;# 
  1739  0391                     	;# 
  1740  0392                     	;# 
  1741  0393                     	;# 
  1742  0394                     	;# 
  1743  0395                     	;# 
  1744  0396                     	;# 
  1745  0611                     	;# 
  1746  0612                     	;# 
  1747  0613                     	;# 
  1748  0613                     	;# 
  1749  0614                     	;# 
  1750  0615                     	;# 
  1751  0616                     	;# 
  1752  0616                     	;# 
  1753  0711                     	;# 
  1754  0711                     	;# 
  1755  0711                     	;# 
  1756  0712                     	;# 
  1757  0712                     	;# 
  1758  0713                     	;# 
  1759  0713                     	;# 
  1760  0713                     	;# 
  1761  0714                     	;# 
  1762  0714                     	;# 
  1763  0714                     	;# 
  1764  0715                     	;# 
  1765  0715                     	;# 
  1766  0716                     	;# 
  1767  0716                     	;# 
  1768  0716                     	;# 
  1769  0716                     	;# 
  1770  0717                     	;# 
  1771  0717                     	;# 
  1772  0717                     	;# 
  1773  0717                     	;# 
  1774  0718                     	;# 
  1775  0718                     	;# 
  1776  0718                     	;# 
  1777  0719                     	;# 
  1778  0719                     	;# 
  1779  0719                     	;# 
  1780  0719                     	;# 
  1781  071A                     	;# 
  1782  071A                     	;# 
  1783  071A                     	;# 
  1784  071A                     	;# 
  1785  071A                     	;# 
  1786  071B                     	;# 
  1787  071B                     	;# 
  1788  071C                     	;# 
  1789  071C                     	;# 
  1790  071C                     	;# 
  1791  071C                     	;# 
  1792  071C                     	;# 
  1793  071D                     	;# 
  1794  071D                     	;# 
  1795  071E                     	;# 
  1796  071E                     	;# 
  1797  0791                     	;# 
  1798  0791                     	;# 
  1799  0793                     	;# 
  1800  0793                     	;# 
  1801  0794                     	;# 
  1802  0794                     	;# 
  1803  0796                     	;# 
  1804  0796                     	;# 
  1805  0796                     	;# 
  1806  0797                     	;# 
  1807  0797                     	;# 
  1808  0797                     	;# 
  1809  0798                     	;# 
  1810  0798                     	;# 
  1811  0799                     	;# 
  1812  0799                     	;# 
  1813  0799                     	;# 
  1814  079A                     	;# 
  1815  079A                     	;# 
  1816  079A                     	;# 
  1817  079B                     	;# 
  1818  079C                     	;# 
  1819  079C                     	;# 
  1820  079C                     	;# 
  1821  079D                     	;# 
  1822  079E                     	;# 
  1823  079E                     	;# 
  1824  0F8C                     	;# 
  1825  0F8D                     	;# 
  1826  0F91                     	;# 
  1827  0F96                     	;# 
  1828  0F97                     	;# 
  1829  0F9C                     	;# 
  1830  0F9D                     	;# 
  1831  0F9E                     	;# 
  1832  0FE3                     	;# 
  1833  0FE4                     	;# 
  1834  0FE5                     	;# 
  1835  0FE6                     	;# 
  1836  0FE7                     	;# 
  1837  0FE8                     	;# 
  1838  0FE9                     	;# 
  1839  0FEA                     	;# 
  1840  0FEB                     	;# 
  1841  0FED                     	;# 
  1842  0FEE                     	;# 
  1843  0FEF                     	;# 
  1844  0000                     	;# 
  1845  0001                     	;# 
  1846  0002                     	;# 
  1847  0003                     	;# 
  1848  0004                     	;# 
  1849  0005                     	;# 
  1850  0006                     	;# 
  1851  0007                     	;# 
  1852  0008                     	;# 
  1853  0009                     	;# 
  1854  000A                     	;# 
  1855  000B                     	;# 
  1856  000C                     	;# 
  1857  000D                     	;# 
  1858  000E                     	;# 
  1859  0011                     	;# 
  1860  0012                     	;# 
  1861  0015                     	;# 
  1862  0016                     	;# 
  1863  0016                     	;# 
  1864  0017                     	;# 
  1865  0018                     	;# 
  1866  0019                     	;# 
  1867  001A                     	;# 
  1868  001B                     	;# 
  1869  001C                     	;# 
  1870  008C                     	;# 
  1871  008D                     	;# 
  1872  008E                     	;# 
  1873  0091                     	;# 
  1874  0092                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  009F                     	;# 
  1886  010C                     	;# 
  1887  010D                     	;# 
  1888  010E                     	;# 
  1889  0116                     	;# 
  1890  0117                     	;# 
  1891  011D                     	;# 
  1892  018C                     	;# 
  1893  018D                     	;# 
  1894  018E                     	;# 
  1895  0191                     	;# 
  1896  0191                     	;# 
  1897  0192                     	;# 
  1898  0193                     	;# 
  1899  0193                     	;# 
  1900  0194                     	;# 
  1901  0195                     	;# 
  1902  0196                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019C                     	;# 
  1908  019D                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  020C                     	;# 
  1912  020D                     	;# 
  1913  0211                     	;# 
  1914  0211                     	;# 
  1915  0212                     	;# 
  1916  0212                     	;# 
  1917  0213                     	;# 
  1918  0213                     	;# 
  1919  0214                     	;# 
  1920  0214                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0216                     	;# 
  1925  0216                     	;# 
  1926  0217                     	;# 
  1927  0217                     	;# 
  1928  0391                     	;# 
  1929  0392                     	;# 
  1930  0393                     	;# 
  1931  0394                     	;# 
  1932  0395                     	;# 
  1933  0396                     	;# 
  1934  0611                     	;# 
  1935  0612                     	;# 
  1936  0613                     	;# 
  1937  0613                     	;# 
  1938  0614                     	;# 
  1939  0615                     	;# 
  1940  0616                     	;# 
  1941  0616                     	;# 
  1942  0711                     	;# 
  1943  0711                     	;# 
  1944  0711                     	;# 
  1945  0712                     	;# 
  1946  0712                     	;# 
  1947  0713                     	;# 
  1948  0713                     	;# 
  1949  0713                     	;# 
  1950  0714                     	;# 
  1951  0714                     	;# 
  1952  0714                     	;# 
  1953  0715                     	;# 
  1954  0715                     	;# 
  1955  0716                     	;# 
  1956  0716                     	;# 
  1957  0716                     	;# 
  1958  0716                     	;# 
  1959  0717                     	;# 
  1960  0717                     	;# 
  1961  0717                     	;# 
  1962  0717                     	;# 
  1963  0718                     	;# 
  1964  0718                     	;# 
  1965  0718                     	;# 
  1966  0719                     	;# 
  1967  0719                     	;# 
  1968  0719                     	;# 
  1969  0719                     	;# 
  1970  071A                     	;# 
  1971  071A                     	;# 
  1972  071A                     	;# 
  1973  071A                     	;# 
  1974  071A                     	;# 
  1975  071B                     	;# 
  1976  071B                     	;# 
  1977  071C                     	;# 
  1978  071C                     	;# 
  1979  071C                     	;# 
  1980  071C                     	;# 
  1981  071C                     	;# 
  1982  071D                     	;# 
  1983  071D                     	;# 
  1984  071E                     	;# 
  1985  071E                     	;# 
  1986  0791                     	;# 
  1987  0791                     	;# 
  1988  0793                     	;# 
  1989  0793                     	;# 
  1990  0794                     	;# 
  1991  0794                     	;# 
  1992  0796                     	;# 
  1993  0796                     	;# 
  1994  0796                     	;# 
  1995  0797                     	;# 
  1996  0797                     	;# 
  1997  0797                     	;# 
  1998  0798                     	;# 
  1999  0798                     	;# 
  2000  0799                     	;# 
  2001  0799                     	;# 
  2002  0799                     	;# 
  2003  079A                     	;# 
  2004  079A                     	;# 
  2005  079A                     	;# 
  2006  079B                     	;# 
  2007  079C                     	;# 
  2008  079C                     	;# 
  2009  079C                     	;# 
  2010  079D                     	;# 
  2011  079E                     	;# 
  2012  079E                     	;# 
  2013  0F8C                     	;# 
  2014  0F8D                     	;# 
  2015  0F91                     	;# 
  2016  0F96                     	;# 
  2017  0F97                     	;# 
  2018  0F9C                     	;# 
  2019  0F9D                     	;# 
  2020  0F9E                     	;# 
  2021  0FE3                     	;# 
  2022  0FE4                     	;# 
  2023  0FE5                     	;# 
  2024  0FE6                     	;# 
  2025  0FE7                     	;# 
  2026  0FE8                     	;# 
  2027  0FE9                     	;# 
  2028  0FEA                     	;# 
  2029  0FEB                     	;# 
  2030  0FED                     	;# 
  2031  0FEE                     	;# 
  2032  0FEF                     	;# 
  2033                           
  2034                           	psect	idataBANK0
  2035  0A1A                     __pidataBANK0:	
  2036                           
  2037                           ;initializer for _mTouchScanReload
  2038  0A1A  3492               	retlw	146
  2039  0A1B  34FD               	retlw	253
  2040                           
  2041                           ;initializer for _callback_sampled
  2042  0A1C  3434               	retlw	low _Sensor_DefaultCallback
  2043  0A1D  3409               	retlw	high _Sensor_DefaultCallback
  2044                           
  2045                           ;initializer for __wait_to_initialize
  2046  0A1E  3401               	retlw	1
  2047                           
  2048                           ;initializer for _sample_period
  2049  0A1F  34AE               	retlw	174
  2050                           
  2051                           ;initializer for _mtouch_sensor
  2052  0A20  3400               	retlw	0
  2053  0A21  3431               	retlw	49
  2054  0A22  3430               	retlw	48
  2055  0A23  3410               	retlw	16
  2056  0A24  3420               	retlw	32
  2057  0A25  3400               	retlw	0
  2058  0A26  3400               	retlw	0
  2059  0A27  3400               	retlw	0
  2060  0A28  3400               	retlw	0
  2061                           
  2062                           	psect	idataBANK1
  2063  09CD                     __pidataBANK1:	
  2064                           
  2065                           ;initializer for _Button_StateMachine
  2066  09CD  3490               	retlw	low _Button_State_Initializing
  2067  09CE  3407               	retlw	high _Button_State_Initializing
  2068  09CF  3498               	retlw	low _Button_State_NotPressed
  2069  09D0  3404               	retlw	high _Button_State_NotPressed
  2070  09D1  34F9               	retlw	low _Button_State_PressDebounce
  2071  09D2  340E               	retlw	high _Button_State_PressDebounce
  2072  09D3  3463               	retlw	low _Button_State_Pressed
  2073  09D4  340E               	retlw	high _Button_State_Pressed
  2074  09D5  34A2               	retlw	low _Button_State_ReleaseDebounce
  2075  09D6  340F               	retlw	high _Button_State_ReleaseDebounce
  2076                           
  2077                           	psect	stringtext1
  2078  1010                     __pstringtext1:	
  2079  1010                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2080  1010  3400               	retlw	0
  2081  1011  340D               	retlw	13
  2082  1012  341C               	retlw	28
  2083  1013  341E               	retlw	30
  2084  1014  3417               	retlw	23
  2085  1015                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2086                           
  2087                           	psect	stringtext2
  2088  1015                     __pstringtext2:	
  2089  1015                     _sensor_scan_group:	
  2090  1015  3460               	retlw	low (_mtouch_sensor| 0)
  2091  1016  3400               	retlw	0
  2092  1017                     __end_of_sensor_scan_group:	
  2093                           
  2094                           	psect	stringtext3
  2095  1000                     __pstringtext3:	
  2096  1000                     _mtouch_button_init:	
  2097  1000  3400               	retlw	0
  2098  1001  3400               	retlw	0
  2099  1002  3400               	retlw	0
  2100  1003  3400               	retlw	0
  2101  1004  3400               	retlw	0
  2102  1005  3400               	retlw	0
  2103  1006  3400               	retlw	0
  2104  1007  3400               	retlw	0
  2105  1008  3400               	retlw	0
  2106  1009  3400               	retlw	0
  2107  100A  3400               	retlw	0
  2108  100B  3400               	retlw	0
  2109  100C  3400               	retlw	0
  2110  100D  3400               	retlw	0
  2111  100E  3414               	retlw	20
  2112  100F  3401               	retlw	1
  2113  1010                     __end_of_mtouch_button_init:	
  2114                           
  2115                           	psect	nvBANK0
  2116  0069                     __pnvBANK0:	
  2117  0069                     _TMR1_InterruptHandler:	
  2118  0069                     	ds	2
  2119  006B                     _timer1ReloadVal:	
  2120  006B                     	ds	2
  2121  006D                     _EUSART_TxDefaultInterruptHandler:	
  2122  006D                     	ds	2
  2123  006F                     _eusartTxBufferRemaining:	
  2124  006F                     	ds	1
  2125                           
  2126                           	psect	nvBANK1
  2127  00D2                     __pnvBANK1:	
  2128  00D2                     _EUSART_ErrorHandler:	
  2129  00D2                     	ds	2
  2130  00D4                     _EUSART_OverrunErrorHandler:	
  2131  00D4                     	ds	2
  2132  00D6                     _EUSART_FramingErrorHandler:	
  2133  00D6                     	ds	2
  2134  00D8                     _EUSART_RxDefaultInterruptHandler:	
  2135  00D8                     	ds	2
  2136  000C                     _PORTAbits	set	12
  2137  0019                     _T1GCONbits	set	25
  2138  0018                     _T1CONbits	set	24
  2139  0018                     _T1CON	set	24
  2140  0016                     _TMR1L	set	22
  2141  0017                     _TMR1H	set	23
  2142  0019                     _T1GCON	set	25
  2143  001C                     _T2CON	set	28
  2144  001A                     _TMR2	set	26
  2145  001B                     _PR2	set	27
  2146  000B                     _INTCONbits	set	11
  2147  0012                     _PIR2bits	set	18
  2148  0011                     _PIR1bits	set	17
  2149  001C                     _T2CONbits	set	28
  2150  005F                     _GIE	set	95
  2151  0095                     _OPTION_REGbits	set	149
  2152  008E                     _TRISC	set	142
  2153  008D                     _TRISB	set	141
  2154  008C                     _TRISA	set	140
  2155  0097                     _WDTCON	set	151
  2156  0099                     _OSCCON	set	153
  2157  0091                     _PIE1bits	set	145
  2158  010C                     _LATAbits	set	268
  2159  010E                     _LATCbits	set	270
  2160  011D                     _APFCON	set	285
  2161  010E                     _LATC	set	270
  2162  010D                     _LATB	set	269
  2163  010C                     _LATA	set	268
  2164  0116                     _BORCON	set	278
  2165  011D                     _APFCONbits	set	285
  2166  018C                     _ANSELA	set	396
  2167  018D                     _ANSELB	set	397
  2168  018E                     _ANSELC	set	398
  2169  0199                     _RCREG	set	409
  2170  019D                     _RCSTAbits	set	413
  2171  019A                     _TXREG	set	410
  2172  019E                     _TXSTAbits	set	414
  2173  019C                     _SPBRGH	set	412
  2174  019B                     _SPBRGL	set	411
  2175  019E                     _TXSTA	set	414
  2176  019D                     _RCSTA	set	413
  2177  019F                     _BAUDCON	set	415
  2178  020C                     _WPUA	set	524
  2179  020D                     _WPUB	set	525
  2180  071A                     _AAD1RES0	set	1818
  2181  0711                     _AD1CON0bits	set	1809
  2182  0714                     _AAD1CON3	set	1812
  2183  0713                     _AD1CON2	set	1811
  2184  0717                     _AD1ACQCON	set	1815
  2185  0716                     _AD1PRECON	set	1814
  2186  0718                     _AAD1GRD	set	1816
  2187  0713                     _AAD1CON2	set	1811
  2188  0719                     _AAD1CAP	set	1817
  2189  0714                     _AD1CON3	set	1812
  2190  0712                     _ADCOMCON	set	1810
  2191  0711                     _AD1CON0	set	1809
  2192  079A                     _AAD2RES0	set	1946
  2193  0791                     _AD2CON0bits	set	1937
  2194  0797                     _AD2ACQCON	set	1943
  2195  0796                     _AD2PRECON	set	1942
  2196  0794                     _AAD2CON3	set	1940
  2197  0798                     _AAD2GRD	set	1944
  2198  0793                     _AD2CON2	set	1939
  2199  0794                     _AD2CON3	set	1940
  2200  0791                     _AD2CON0	set	1937
  2201                           
  2202                           ; #config settings
  2203  0000                     
  2204                           	psect	cinit
  2205  003D                     start_initialization:	
  2206  003D                     __initialization:	
  2207                           
  2208                           ; Initialize objects allocated to BANK0
  2209  003D  301A               	movlw	low __pidataBANK0
  2210  003E  0084               	movwf	4
  2211  003F  308A               	movlw	(high __pidataBANK0)| (0+128)
  2212  0040  0085               	movwf	5
  2213  0041  305A               	movlw	low __pdataBANK0
  2214  0042  0086               	movwf	6
  2215  0043  3000               	movlw	high __pdataBANK0
  2216  0044  0087               	movwf	7
  2217  0045  300F               	movlw	15
  2218  0046  3189  2189  3180   	fcall	init_ram
  2219                           
  2220                           ; Initialize objects allocated to BANK1
  2221  0049  30CD               	movlw	low __pidataBANK1
  2222  004A  0084               	movwf	4
  2223  004B  3089               	movlw	(high __pidataBANK1)| (0+128)
  2224  004C  0085               	movwf	5
  2225  004D  30C8               	movlw	low __pdataBANK1
  2226  004E  0086               	movwf	6
  2227  004F  3000               	movlw	high __pdataBANK1
  2228  0050  0087               	movwf	7
  2229  0051  300A               	movlw	10
  2230  0052  3189  2189  3180   	fcall	init_ram
  2231                           
  2232                           ; Clear objects allocated to COMMON
  2233  0055  01FA               	clrf	__pbssCOMMON& (0+127)
  2234  0056  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2235                           
  2236                           ; Clear objects allocated to BANK0
  2237  0057  304B               	movlw	low __pbssBANK0
  2238  0058  0084               	movwf	4
  2239  0059  3000               	movlw	high __pbssBANK0
  2240  005A  0085               	movwf	5
  2241  005B  300F               	movlw	15
  2242  005C  3189  2183  3180   	fcall	clear_ram0
  2243                           
  2244                           ; Clear objects allocated to BANK1
  2245  005F  30A0               	movlw	low __pbssBANK1
  2246  0060  0084               	movwf	4
  2247  0061  3000               	movlw	high __pbssBANK1
  2248  0062  0085               	movwf	5
  2249  0063  3028               	movlw	40
  2250  0064  3189  2183  3180   	fcall	clear_ram0
  2251  0067                     end_of_initialization:	
  2252                           ;End of C runtime variable initialization code
  2253                           
  2254  0067                     __end_of__initialization:	
  2255  0067  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2256  0068  0020               	movlb	0
  2257  0069  3187  2F2B         	ljmp	_main	;jump to C main() function
  2258                           
  2259                           	psect	bssCOMMON
  2260  007A                     __pbssCOMMON:	
  2261  007A                     _eusartRxTail:	
  2262  007A                     	ds	1
  2263  007B                     _eusartRxHead:	
  2264  007B                     	ds	1
  2265                           
  2266                           	psect	bssBANK0
  2267  004B                     __pbssBANK0:	
  2268  004B                     _packet_sample:	
  2269  004B                     	ds	4
  2270  004F                     __first_delay_cntr:	
  2271  004F                     	ds	2
  2272  0051                     _packet_noise:	
  2273  0051                     	ds	2
  2274  0053                     _eusartRxLastError:	
  2275  0053                     	ds	1
  2276  0054                     _eusartRxCount:	
  2277  0054                     	ds	1
  2278  0055                     _eusartTxTail:	
  2279  0055                     	ds	1
  2280  0056                     _eusartTxHead:	
  2281  0056                     	ds	1
  2282  0057                     _mtouch_time_toScan:	
  2283  0057                     	ds	1
  2284  0058                     _sensor_globalFlags:	
  2285  0058                     	ds	1
  2286  0059                     _lowpowerActivated:	
  2287  0059                     	ds	1
  2288                           
  2289                           	psect	dataBANK0
  2290  005A                     __pdataBANK0:	
  2291  005A                     _mTouchScanReload:	
  2292  005A                     	ds	2
  2293  005C                     _callback_sampled:	
  2294  005C                     	ds	2
  2295  005E                     __wait_to_initialize:	
  2296  005E                     	ds	1
  2297  005F                     _sample_period:	
  2298  005F                     	ds	1
  2299  0060                     _mtouch_sensor:	
  2300  0060                     	ds	9
  2301                           
  2302                           	psect	bssBANK1
  2303  00A0                     __pbssBANK1:	
  2304  00A0                     _eusartRxStatusBuffer:	
  2305  00A0                     	ds	8
  2306  00A8                     _eusartRxBuffer:	
  2307  00A8                     	ds	8
  2308  00B0                     _eusartTxBuffer:	
  2309  00B0                     	ds	8
  2310  00B8                     _mtouch_button:	
  2311  00B8                     	ds	16
  2312                           
  2313                           	psect	dataBANK1
  2314  00C8                     __pdataBANK1:	
  2315  00C8                     _Button_StateMachine:	
  2316  00C8                     	ds	10
  2317                           
  2318                           	psect	inittext
  2319  0989                     init_ram:	
  2320  0989  00FE               	movwf	btemp
  2321  098A                     initloop:	
  2322  098A  0012               	moviw fsr0++
  2323  098B  001E               	movwi fsr1++
  2324  098C  0BFE               	decfsz	btemp,f
  2325  098D  298A               	goto	initloop
  2326  098E  3400               	retlw	0
  2327                           
  2328                           	psect	clrtext
  2329  0983                     clear_ram0:	
  2330                           ;	Called with FSR0 containing the base address, and
  2331                           ;	WREG with the size to clear
  2332                           
  2333  0983  0064               	clrwdt	;clear the watchdog before getting into this loop
  2334  0984                     clrloop0:	
  2335  0984  0180               	clrf	0	;clear RAM location pointed to by FSR
  2336  0985  3101               	addfsr 0,1
  2337  0986  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2338  0987  2984               	goto	clrloop0	;have we reached the end yet?
  2339  0988  3400               	retlw	0	;all done for this memory range, return
  2340                           
  2341                           	psect	cstackBANK1
  2342  00DA                     __pcstackBANK1:	
  2343  00DA                     ??_MTOUCH_Sensor_SampleAll:	
  2344                           
  2345                           ; 1 bytes @ 0x0
  2346  00DA                     	ds	1
  2347  00DB                     MTOUCH_Sensor_SampleAll@group:	
  2348                           
  2349                           ; 1 bytes @ 0x1
  2350  00DB                     	ds	1
  2351  00DC                     ??_MTOUCH_Service_Mainloop:	
  2352                           
  2353                           ; 1 bytes @ 0x2
  2354  00DC                     	ds	1
  2355                           
  2356                           	psect	cstackCOMMON
  2357  0070                     __pcstackCOMMON:	
  2358  0070                     ?_MTOUCH_Service_Mainloop:	
  2359  0070                     ?_MTOUCH_Button_isPressed:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_MTOUCH_Sensor_Enable:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_Sensor_Sampled_Reset:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_Sensor_Service:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?_Sensor_isEnabled:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ?_Sensor_RawSample_Update:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     ?_Sensor_setSampled:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     ?_Sensor_postAcquisitionProcess:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ?_Sensor_isActive:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ?_Sensor_isCalibrated:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_Sensor_setActive:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_Sensor_setInactive:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_Sensor_isCalibratingAcqTime:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_TMR2_LoadPeriodRegister:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_TMR2_StartTimer:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_TMR2_StopTimer:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_Sensor_autoCalibration:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_Sensor_setCalibratAcqTime:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?_Sensor_setCalibrated:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_TMR1_WriteTimer:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_MTOUCH_Button_InitializeAll:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_MTOUCH_Button_ServiceAll:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_MTOUCH_needReburst:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_MTOUCH_Tick:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ?_MTOUCH_Button_Tick:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_Button_Service:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ?_Button_Reading_Update:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?_Button_Deviation_Update:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?_Button_Baseline_Initialize:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?_Button_Baseline_Update:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?_Button_Tick_helper:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?_Button_Reading_Update_Helper:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_EUSART_Receive_ISR:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?_EUSART_Transmit_ISR:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ??_EUSART_Transmit_ISR:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?_EUSART_DefaultErrorHandler:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?_EUSART_RxDataHandler:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ??_EUSART_RxDataHandler:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ?_TMR1_ISR:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?_PIN_MANAGER_Initialize:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ?_OSCILLATOR_Initialize:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     ?_WDT_Initialize:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ?_TMR2_Initialize:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     ?_TMR1_Initialize:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ?_TMR1_DefaultInterruptHandler:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     ??_TMR1_DefaultInterruptHandler:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0070                     ?_MTOUCH_Sensor_Initialize:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2519                           ; 1 bytes @ 0x0
  2520                           
  2521  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2522                           ; 1 bytes @ 0x0
  2523                           
  2524  0070                     ?_Sensor_getScanGroupIndex:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0070                     ?_MTOUCH_ScanScheduler:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0070                     ?_MTOUCH_Initialize:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0070                     ?_MTOUCH_Button_Initialize:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545  0070                     ?_EUSART_Initialize:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_EUSART_is_tx_ready:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ?_EUSART_is_tx_done:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_EUSART_Write:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_INTERRUPT_InterruptManager:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ?_SYSTEM_Initialize:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_main:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     TMR1_WriteTimer@timerVal:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0x0
  2571  0070                     	ds	1
  2572  0071                     ??_EUSART_Receive_ISR:	
  2573  0071                     ??_EUSART_DefaultErrorHandler:	
  2574                           ; 1 bytes @ 0x1
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  0071                     	ds	1
  2579  0072                     ??_MTOUCH_Button_isPressed:	
  2580  0072                     ?_Sensor_DefaultCallback:	
  2581                           ; 1 bytes @ 0x2
  2582                           
  2583  0072                     ??_Sensor_Sampled_Reset:	
  2584                           ; 1 bytes @ 0x2
  2585                           
  2586  0072                     ??_Sensor_isEnabled:	
  2587                           ; 1 bytes @ 0x2
  2588                           
  2589  0072                     ??_Sensor_setSampled:	
  2590                           ; 1 bytes @ 0x2
  2591                           
  2592  0072                     ??_Sensor_isActive:	
  2593                           ; 1 bytes @ 0x2
  2594                           
  2595  0072                     ??_Sensor_isCalibrated:	
  2596                           ; 1 bytes @ 0x2
  2597                           
  2598  0072                     ??_Sensor_setActive:	
  2599                           ; 1 bytes @ 0x2
  2600                           
  2601  0072                     ??_Sensor_setInactive:	
  2602                           ; 1 bytes @ 0x2
  2603                           
  2604  0072                     ??_Sensor_isCalibratingAcqTime:	
  2605                           ; 1 bytes @ 0x2
  2606                           
  2607  0072                     ??_TMR2_LoadPeriodRegister:	
  2608                           ; 1 bytes @ 0x2
  2609                           
  2610  0072                     ??_TMR2_StartTimer:	
  2611                           ; 1 bytes @ 0x2
  2612                           
  2613  0072                     ??_TMR2_StopTimer:	
  2614                           ; 1 bytes @ 0x2
  2615                           
  2616  0072                     ??_Sensor_setCalibratAcqTime:	
  2617                           ; 1 bytes @ 0x2
  2618                           
  2619  0072                     ??_Sensor_setCalibrated:	
  2620                           ; 1 bytes @ 0x2
  2621                           
  2622  0072                     ??_TMR1_WriteTimer:	
  2623                           ; 1 bytes @ 0x2
  2624                           
  2625  0072                     ?_TMR1_SetInterruptHandler:	
  2626                           ; 1 bytes @ 0x2
  2627                           
  2628  0072                     ??_MTOUCH_needReburst:	
  2629                           ; 1 bytes @ 0x2
  2630                           
  2631  0072                     ?_memcpy:	
  2632                           ; 1 bytes @ 0x2
  2633                           
  2634  0072                     ??_Button_Baseline_Update:	
  2635                           ; 1 bytes @ 0x2
  2636                           
  2637  0072                     ??_Button_Tick_helper:	
  2638                           ; 1 bytes @ 0x2
  2639                           
  2640  0072                     ?_EUSART_SetRxInterruptHandler:	
  2641                           ; 1 bytes @ 0x2
  2642                           
  2643  0072                     ?_EUSART_SetTxInterruptHandler:	
  2644                           ; 1 bytes @ 0x2
  2645                           
  2646  0072                     ?_EUSART_SetFramingErrorHandler:	
  2647                           ; 1 bytes @ 0x2
  2648                           
  2649  0072                     ?_EUSART_SetOverrunErrorHandler:	
  2650                           ; 1 bytes @ 0x2
  2651                           
  2652  0072                     ?_EUSART_SetErrorHandler:	
  2653                           ; 1 bytes @ 0x2
  2654                           
  2655  0072                     ??_TMR1_ISR:	
  2656                           ; 1 bytes @ 0x2
  2657                           
  2658  0072                     ??_PIN_MANAGER_Initialize:	
  2659                           ; 1 bytes @ 0x2
  2660                           
  2661  0072                     ??_OSCILLATOR_Initialize:	
  2662                           ; 1 bytes @ 0x2
  2663                           
  2664  0072                     ??_WDT_Initialize:	
  2665                           ; 1 bytes @ 0x2
  2666                           
  2667  0072                     ??_TMR2_Initialize:	
  2668                           ; 1 bytes @ 0x2
  2669                           
  2670  0072                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2671                           ; 1 bytes @ 0x2
  2672                           
  2673  0072                     ??_Sensor_getScanGroupIndex:	
  2674                           ; 1 bytes @ 0x2
  2675                           
  2676  0072                     ??_MTOUCH_ScanScheduler:	
  2677                           ; 1 bytes @ 0x2
  2678                           
  2679  0072                     ??_EUSART_is_tx_ready:	
  2680                           ; 1 bytes @ 0x2
  2681                           
  2682  0072                     ??_EUSART_is_tx_done:	
  2683                           ; 1 bytes @ 0x2
  2684                           
  2685  0072                     ??_EUSART_Write:	
  2686                           ; 1 bytes @ 0x2
  2687                           
  2688  0072                     ??_INTERRUPT_InterruptManager:	
  2689                           ; 1 bytes @ 0x2
  2690                           
  2691  0072                     ?___bmul:	
  2692                           ; 1 bytes @ 0x2
  2693                           
  2694  0072                     ?_abs:	
  2695                           ; 1 bytes @ 0x2
  2696                           
  2697  0072                     Sensor_DefaultCallback@sensor:	
  2698                           ; 2 bytes @ 0x2
  2699                           
  2700  0072                     Sensor_setActive@sensor:	
  2701                           ; 1 bytes @ 0x2
  2702                           
  2703  0072                     Sensor_setInactive@sensor:	
  2704                           ; 1 bytes @ 0x2
  2705                           
  2706  0072                     Sensor_isActive@sensor:	
  2707                           ; 1 bytes @ 0x2
  2708                           
  2709  0072                     Sensor_isCalibrated@sensor:	
  2710                           ; 1 bytes @ 0x2
  2711                           
  2712  0072                     Sensor_setCalibrated@sensor:	
  2713                           ; 1 bytes @ 0x2
  2714                           
  2715  0072                     Sensor_setCalibratAcqTime@sensor:	
  2716                           ; 1 bytes @ 0x2
  2717                           
  2718  0072                     Sensor_isCalibratingAcqTime@sensor:	
  2719                           ; 1 bytes @ 0x2
  2720                           
  2721  0072                     Sensor_Sampled_Reset@sensor:	
  2722                           ; 1 bytes @ 0x2
  2723                           
  2724  0072                     Sensor_setSampled@sensor:	
  2725                           ; 1 bytes @ 0x2
  2726                           
  2727  0072                     Button_Deviation_Update@button:	
  2728                           ; 1 bytes @ 0x2
  2729                           
  2730  0072                     TMR2_LoadPeriodRegister@periodVal:	
  2731                           ; 1 bytes @ 0x2
  2732                           
  2733  0072                     ___bmul@multiplicand:	
  2734                           ; 1 bytes @ 0x2
  2735                           
  2736  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2737                           ; 1 bytes @ 0x2
  2738                           
  2739  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2740                           ; 2 bytes @ 0x2
  2741                           
  2742  0072                     EUSART_SetErrorHandler@interruptHandler:	
  2743                           ; 2 bytes @ 0x2
  2744                           
  2745  0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2746                           ; 2 bytes @ 0x2
  2747                           
  2748  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2749                           ; 2 bytes @ 0x2
  2750                           
  2751  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  2752                           ; 2 bytes @ 0x2
  2753                           
  2754  0072                     abs@a:	
  2755                           ; 2 bytes @ 0x2
  2756                           
  2757  0072                     memcpy@s1:	
  2758                           ; 2 bytes @ 0x2
  2759                           
  2760                           
  2761                           ; 2 bytes @ 0x2
  2762  0072                     	ds	1
  2763  0073                     ??_Sensor_DefaultCallback:	
  2764  0073                     ?_Sensor_loadADCSettings:	
  2765                           ; 1 bytes @ 0x3
  2766                           
  2767  0073                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2768                           ; 1 bytes @ 0x3
  2769                           
  2770  0073                     ??___bmul:	
  2771                           ; 1 bytes @ 0x3
  2772                           
  2773  0073                     Sensor_loadADCSettings@adc_index:	
  2774                           ; 1 bytes @ 0x3
  2775                           
  2776  0073                     Sensor_isEnabled@sensor:	
  2777                           ; 1 bytes @ 0x3
  2778                           
  2779  0073                     _MTOUCH_Button_isPressed$1119:	
  2780                           ; 1 bytes @ 0x3
  2781                           
  2782  0073                     EUSART_Write@txData:	
  2783                           ; 1 bytes @ 0x3
  2784                           
  2785  0073                     Button_Deviation_Update@deviation:	
  2786                           ; 1 bytes @ 0x3
  2787                           
  2788                           
  2789                           ; 4 bytes @ 0x3
  2790  0073                     	ds	1
  2791  0074                     ??_abs:	
  2792  0074                     ??_TMR1_SetInterruptHandler:	
  2793                           ; 1 bytes @ 0x4
  2794                           
  2795  0074                     ??_EUSART_SetRxInterruptHandler:	
  2796                           ; 1 bytes @ 0x4
  2797                           
  2798  0074                     ??_EUSART_SetTxInterruptHandler:	
  2799                           ; 1 bytes @ 0x4
  2800                           
  2801  0074                     ??_EUSART_SetFramingErrorHandler:	
  2802                           ; 1 bytes @ 0x4
  2803                           
  2804  0074                     ??_EUSART_SetOverrunErrorHandler:	
  2805                           ; 1 bytes @ 0x4
  2806                           
  2807  0074                     ??_EUSART_SetErrorHandler:	
  2808                           ; 1 bytes @ 0x4
  2809                           
  2810  0074                     ??_TMR1_Initialize:	
  2811                           ; 1 bytes @ 0x4
  2812                           
  2813  0074                     ??_Sensor_loadADCSettings:	
  2814                           ; 1 bytes @ 0x4
  2815                           
  2816  0074                     ??_EUSART_Initialize:	
  2817                           ; 1 bytes @ 0x4
  2818                           
  2819  0074                     Sensor_getScanGroupIndex@sensor:	
  2820                           ; 1 bytes @ 0x4
  2821                           
  2822  0074                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2823                           ; 1 bytes @ 0x4
  2824                           
  2825  0074                     Button_Tick_helper@button:	
  2826                           ; 1 bytes @ 0x4
  2827                           
  2828  0074                     MTOUCH_Button_isPressed@name:	
  2829                           ; 1 bytes @ 0x4
  2830                           
  2831  0074                     ___bmul@product:	
  2832                           ; 1 bytes @ 0x4
  2833                           
  2834  0074                     memcpy@n:	
  2835                           ; 1 bytes @ 0x4
  2836                           
  2837                           
  2838                           ; 2 bytes @ 0x4
  2839  0074                     	ds	1
  2840  0075                     ??_MTOUCH_Tick:	
  2841  0075                     ??_MTOUCH_Button_Tick:	
  2842                           ; 1 bytes @ 0x5
  2843                           
  2844  0075                     Sensor_getScanGroupIndex@sensorGroup:	
  2845                           ; 1 bytes @ 0x5
  2846                           
  2847  0075                     ___bmul@multiplier:	
  2848                           ; 1 bytes @ 0x5
  2849                           
  2850                           
  2851                           ; 1 bytes @ 0x5
  2852  0075                     	ds	1
  2853  0076                     ??_MTOUCH_Sensor_Enable:	
  2854  0076                     ??_MTOUCH_Sensor_Calibrate:	
  2855                           ; 1 bytes @ 0x6
  2856                           
  2857  0076                     ??_Sensor_RawSample_Update:	
  2858                           ; 1 bytes @ 0x6
  2859                           
  2860  0076                     ??_Sensor_postAcquisitionProcess:	
  2861                           ; 1 bytes @ 0x6
  2862                           
  2863  0076                     ??_Sensor_autoCalibration:	
  2864                           ; 1 bytes @ 0x6
  2865                           
  2866  0076                     ??_memcpy:	
  2867                           ; 1 bytes @ 0x6
  2868                           
  2869  0076                     ??_MTOUCH_Sensor_isCalibrated:	
  2870                           ; 1 bytes @ 0x6
  2871                           
  2872  0076                     ??_MTOUCH_Sensor_wasSampled:	
  2873                           ; 1 bytes @ 0x6
  2874                           
  2875  0076                     ?_MTOUCH_Sensor_RawSample_Get:	
  2876                           ; 1 bytes @ 0x6
  2877                           
  2878                           
  2879                           ; 2 bytes @ 0x6
  2880  0076                     	ds	1
  2881  0077                     Sensor_RawSample_Update@adcIndex:	
  2882  0077                     MTOUCH_Sensor_Enable@sensor:	
  2883                           ; 1 bytes @ 0x7
  2884                           
  2885  0077                     MTOUCH_Sensor_Calibrate@sensor:	
  2886                           ; 1 bytes @ 0x7
  2887                           
  2888  0077                     MTOUCH_Sensor_isCalibrated@sensor:	
  2889                           ; 1 bytes @ 0x7
  2890                           
  2891  0077                     MTOUCH_Sensor_wasSampled@sensor:	
  2892                           ; 1 bytes @ 0x7
  2893                           
  2894                           
  2895                           ; 1 bytes @ 0x7
  2896  0077                     	ds	1
  2897  0078                     ??_MTOUCH_Sensor_Initialize:	
  2898  0078                     ??_MTOUCH_Sensor_RawSample_Get:	
  2899                           ; 1 bytes @ 0x8
  2900                           
  2901  0078                     ??_MTOUCH_Button_Initialize:	
  2902                           ; 1 bytes @ 0x8
  2903                           
  2904  0078                     Sensor_RawSample_Update@sensor:	
  2905                           ; 1 bytes @ 0x8
  2906                           
  2907  0078                     Button_Baseline_Update@button:	
  2908                           ; 1 bytes @ 0x8
  2909                           
  2910                           
  2911                           ; 1 bytes @ 0x8
  2912  0078                     	ds	1
  2913  0079                     MTOUCH_Sensor_Initialize@sensor:	
  2914  0079                     MTOUCH_Sensor_RawSample_Get@name:	
  2915                           ; 1 bytes @ 0x9
  2916                           
  2917                           
  2918                           ; 1 bytes @ 0x9
  2919  0079                     	ds	1
  2920  007A                     ??_Button_Reading_Update:	
  2921  007A                     ??_MTOUCH_Initialize:	
  2922                           ; 1 bytes @ 0xA
  2923                           
  2924  007A                     ??_SYSTEM_Initialize:	
  2925                           ; 1 bytes @ 0xA
  2926                           
  2927  007A                     ??_main:	
  2928                           ; 1 bytes @ 0xA
  2929                           
  2930                           
  2931                           	psect	cstackBANK0
  2932  0020                     __pcstackBANK0:	
  2933                           ; 1 bytes @ 0xA
  2934                           
  2935  0020                     ??_Button_Deviation_Update:	
  2936  0020                     ??_Button_Baseline_Initialize:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0020                     ??_Button_Reading_Update_Helper:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0020                     ??_MTOUCH_Sensor_InitializeAll:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0020                     Sensor_postAcquisitionProcess@adcIndex:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0020                     Sensor_autoCalibration@adcIndex:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0020                     MTOUCH_Button_Initialize@name:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0020                     memcpy@tmp:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0020                     _Sensor_loadADCSettings$507:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960                           
  2961                           ; 2 bytes @ 0x0
  2962  0020                     	ds	1
  2963  0021                     MTOUCH_Sensor_InitializeAll@sensor:	
  2964  0021                     Sensor_autoCalibration@sensor:	
  2965                           ; 1 bytes @ 0x1
  2966                           
  2967  0021                     MTOUCH_Button_Initialize@button:	
  2968                           ; 1 bytes @ 0x1
  2969                           
  2970  0021                     Sensor_postAcquisitionProcess@deviation:	
  2971                           ; 1 bytes @ 0x1
  2972                           
  2973  0021                     memcpy@s:	
  2974                           ; 2 bytes @ 0x1
  2975                           
  2976                           
  2977                           ; 2 bytes @ 0x1
  2978  0021                     	ds	1
  2979  0022                     Sensor_loadADCSettings@addressOffset:	
  2980  0022                     Button_Reading_Update_Helper@button:	
  2981                           ; 1 bytes @ 0x2
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x2
  2985  0022                     	ds	1
  2986  0023                     Sensor_postAcquisitionProcess@sensor:	
  2987  0023                     Sensor_loadADCSettings@sensor:	
  2988                           ; 1 bytes @ 0x3
  2989                           
  2990  0023                     Button_Reading_Update@button:	
  2991                           ; 1 bytes @ 0x3
  2992                           
  2993  0023                     memcpy@d1:	
  2994                           ; 1 bytes @ 0x3
  2995                           
  2996                           
  2997                           ; 1 bytes @ 0x3
  2998  0023                     	ds	1
  2999  0024                     ?_Sensor_Acq_ExecutePacket:	
  3000  0024                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3001                           ; 1 bytes @ 0x4
  3002                           
  3003  0024                     Button_Baseline_Initialize@button:	
  3004                           ; 1 bytes @ 0x4
  3005                           
  3006  0024                     memcpy@d:	
  3007                           ; 1 bytes @ 0x4
  3008                           
  3009                           
  3010                           ; 1 bytes @ 0x4
  3011  0024                     	ds	1
  3012  0025                     ??_Sensor_Acq_ExecutePacket:	
  3013  0025                     ??_MTOUCH_Button_InitializeAll:	
  3014                           ; 1 bytes @ 0x5
  3015                           
  3016  0025                     ?_Button_State_Initializing:	
  3017                           ; 1 bytes @ 0x5
  3018                           
  3019  0025                     ?_Button_State_NotPressed:	
  3020                           ; 1 bytes @ 0x5
  3021                           
  3022  0025                     ?_Button_State_PressDebounce:	
  3023                           ; 1 bytes @ 0x5
  3024                           
  3025  0025                     ?_Button_State_Pressed:	
  3026                           ; 1 bytes @ 0x5
  3027                           
  3028  0025                     ?_Button_State_ReleaseDebounce:	
  3029                           ; 1 bytes @ 0x5
  3030                           
  3031  0025                     Button_State_Initializing@button:	
  3032                           ; 1 bytes @ 0x5
  3033                           
  3034  0025                     Button_State_NotPressed@button:	
  3035                           ; 1 bytes @ 0x5
  3036                           
  3037  0025                     Button_State_Pressed@button:	
  3038                           ; 1 bytes @ 0x5
  3039                           
  3040  0025                     Button_State_PressDebounce@button:	
  3041                           ; 1 bytes @ 0x5
  3042                           
  3043  0025                     Button_State_ReleaseDebounce@button:	
  3044                           ; 1 bytes @ 0x5
  3045                           
  3046                           
  3047                           ; 1 bytes @ 0x5
  3048  0025                     	ds	1
  3049  0026                     ??_Button_State_Initializing:	
  3050  0026                     ??_Button_State_NotPressed:	
  3051                           ; 1 bytes @ 0x6
  3052                           
  3053  0026                     ??_Button_State_PressDebounce:	
  3054                           ; 1 bytes @ 0x6
  3055                           
  3056  0026                     ??_Button_State_Pressed:	
  3057                           ; 1 bytes @ 0x6
  3058                           
  3059  0026                     ??_Button_State_ReleaseDebounce:	
  3060                           ; 1 bytes @ 0x6
  3061                           
  3062  0026                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3063                           ; 1 bytes @ 0x6
  3064                           
  3065  0026                     MTOUCH_Button_InitializeAll@button:	
  3066                           ; 1 bytes @ 0x6
  3067                           
  3068                           
  3069                           ; 1 bytes @ 0x6
  3070  0026                     	ds	1
  3071  0027                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3072                           
  3073                           ; 1 bytes @ 0x7
  3074  0027                     	ds	1
  3075  0028                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3076                           
  3077                           ; 1 bytes @ 0x8
  3078  0028                     	ds	1
  3079  0029                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3080                           
  3081                           ; 1 bytes @ 0x9
  3082  0029                     	ds	1
  3083  002A                     ??_Button_Service:	
  3084  002A                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3085                           ; 1 bytes @ 0xA
  3086                           
  3087                           
  3088                           ; 1 bytes @ 0xA
  3089  002A                     	ds	1
  3090  002B                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3091                           
  3092                           ; 1 bytes @ 0xB
  3093  002B                     	ds	1
  3094  002C                     Sensor_Acq_ExecutePacket@activeSensor:	
  3095  002C                     Button_Service@name:	
  3096                           ; 1 bytes @ 0xC
  3097                           
  3098                           
  3099                           ; 1 bytes @ 0xC
  3100  002C                     	ds	1
  3101  002D                     Button_Service@button:	
  3102  002D                     Sensor_Acq_ExecutePacket@last_a:	
  3103                           ; 1 bytes @ 0xD
  3104                           
  3105                           
  3106                           ; 2 bytes @ 0xD
  3107  002D                     	ds	1
  3108  002E                     ??_MTOUCH_Button_ServiceAll:	
  3109                           
  3110                           ; 1 bytes @ 0xE
  3111  002E                     	ds	1
  3112  002F                     MTOUCH_Button_ServiceAll@button:	
  3113  002F                     Sensor_Acq_ExecutePacket@last_b:	
  3114                           ; 1 bytes @ 0xF
  3115                           
  3116                           
  3117                           ; 2 bytes @ 0xF
  3118  002F                     	ds	2
  3119  0031                     Sensor_Acq_ExecutePacket@packet_counter:	
  3120                           
  3121                           ; 1 bytes @ 0x11
  3122  0031                     	ds	1
  3123  0032                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3124                           
  3125                           ; 1 bytes @ 0x12
  3126  0032                     	ds	1
  3127  0033                     ?_Sensor_Scanfrequency_Evaluation:	
  3128  0033                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3129                           ; 1 bytes @ 0x13
  3130                           
  3131                           
  3132                           ; 1 bytes @ 0x13
  3133  0033                     	ds	1
  3134  0034                     ??_Sensor_Scanfrequency_Evaluation:	
  3135                           
  3136                           ; 1 bytes @ 0x14
  3137  0034                     	ds	2
  3138  0036                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3139                           
  3140                           ; 1 bytes @ 0x16
  3141  0036                     	ds	1
  3142  0037                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3143                           
  3144                           ; 2 bytes @ 0x17
  3145  0037                     	ds	2
  3146  0039                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3147                           
  3148                           ; 1 bytes @ 0x19
  3149  0039                     	ds	1
  3150  003A                     Sensor_Scanfrequency_Evaluation@retry:	
  3151                           
  3152                           ; 1 bytes @ 0x1A
  3153  003A                     	ds	1
  3154  003B                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3155                           
  3156                           ; 4 bytes @ 0x1B
  3157  003B                     	ds	4
  3158  003F                     Sensor_Scanfrequency_Evaluation@i:	
  3159                           
  3160                           ; 1 bytes @ 0x1F
  3161  003F                     	ds	1
  3162  0040                     ?_Sensor_Acquisition:	
  3163  0040                     Sensor_Acquisition@sensor_adc2:	
  3164                           ; 1 bytes @ 0x20
  3165                           
  3166                           
  3167                           ; 1 bytes @ 0x20
  3168  0040                     	ds	1
  3169  0041                     ??_Sensor_Acquisition:	
  3170                           
  3171                           ; 1 bytes @ 0x21
  3172  0041                     	ds	1
  3173  0042                     Sensor_Acquisition@retry:	
  3174                           
  3175                           ; 1 bytes @ 0x22
  3176  0042                     	ds	1
  3177  0043                     Sensor_Acquisition@sensor_adc1:	
  3178                           
  3179                           ; 1 bytes @ 0x23
  3180  0043                     	ds	1
  3181  0044                     ??_Sensor_Service:	
  3182                           
  3183                           ; 1 bytes @ 0x24
  3184  0044                     	ds	3
  3185  0047                     Sensor_Service@scanGroup:	
  3186                           
  3187                           ; 1 bytes @ 0x27
  3188  0047                     	ds	1
  3189  0048                     Sensor_Service@error:	
  3190                           
  3191                           ; 1 bytes @ 0x28
  3192  0048                     	ds	1
  3193  0049                     Sensor_Service@sensor_adc1:	
  3194                           
  3195                           ; 1 bytes @ 0x29
  3196  0049                     	ds	1
  3197  004A                     Sensor_Service@sensor_adc2:	
  3198                           
  3199                           ; 1 bytes @ 0x2A
  3200  004A                     	ds	1
  3201                           
  3202                           	psect	maintext
  3203  072B                     __pmaintext:	
  3204 ;;
  3205 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3206 ;;
  3207 ;; *************** function _main *****************
  3208 ;; Defined at:
  3209 ;;		line 52 in file "main.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : B1F/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3223 ;;      Params:         0       0       0       0       0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0       0
  3226 ;;      Totals:         0       0       0       0       0       0       0       0
  3227 ;;Total ram usage:        0 bytes
  3228 ;; Hardware stack levels required when called:   12
  3229 ;; This function calls:
  3230 ;;		_EUSART_Write
  3231 ;;		_EUSART_is_tx_done
  3232 ;;		_EUSART_is_tx_ready
  3233 ;;		_MTOUCH_Button_InitializeAll
  3234 ;;		_MTOUCH_Button_isPressed
  3235 ;;		_MTOUCH_Service_Mainloop
  3236 ;;		_SYSTEM_Initialize
  3237 ;; This function is called by:
  3238 ;;		Startup code after reset
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           
  3243                           ;psect for function _main
  3244  072B                     _main:	
  3245  072B                     l5043:	
  3246                           ;incstack = 0
  3247                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3248                           
  3249                           
  3250                           ;main.c: 55:     SYSTEM_Initialize();
  3251  072B  318A  22FA  3187   	fcall	_SYSTEM_Initialize
  3252  072E                     l5045:	
  3253                           
  3254                           ;main.c: 61:     (INTCONbits.GIE = 1);
  3255  072E  178B               	bsf	11,7	;volatile
  3256  072F                     l5047:	
  3257                           
  3258                           ;main.c: 64:     (INTCONbits.PEIE = 1);
  3259  072F  170B               	bsf	11,6	;volatile
  3260  0730                     l5049:	
  3261  0730  0022               	movlb	2	; select bank2
  3262  0731  170E               	bsf	14,6	;volatile
  3263  0732                     l5051:	
  3264  0732  140E               	bsf	14,0	;volatile
  3265  0733                     l1009:	
  3266                           ;main.c: 75:     while (1)
  3267                           
  3268                           
  3269                           ;main.c: 76:     {;main.c: 77:         if(MTOUCH_Service_Mainloop())
  3270  0733  318C  241D  3187   	fcall	_MTOUCH_Service_Mainloop
  3271  0736  3A00               	xorlw	0
  3272  0737  1903               	skipnz
  3273  0738  2F3A               	goto	u5031
  3274  0739  2F3B               	goto	u5030
  3275  073A                     u5031:	
  3276  073A  2F33               	goto	l1009
  3277  073B                     u5030:	
  3278  073B                     l5053:	
  3279                           
  3280                           ;main.c: 78:         {;main.c: 79:             if (_wait_to_initialize > 0) {
  3281  073B  0020               	movlb	0	; select bank0
  3282  073C  085E               	movf	__wait_to_initialize,w
  3283  073D  1903               	btfsc	3,2
  3284  073E  2F40               	goto	u5041
  3285  073F  2F41               	goto	u5040
  3286  0740                     u5041:	
  3287  0740  2F56               	goto	l5063
  3288  0741                     u5040:	
  3289  0741                     l5055:	
  3290                           
  3291                           ;main.c: 80:                 if (++_first_delay_cntr >= 2000) {
  3292  0741  3001               	movlw	1
  3293  0742  07CF               	addwf	__first_delay_cntr,f
  3294  0743  3000               	movlw	0
  3295  0744  3DD0               	addwfc	__first_delay_cntr+1,f
  3296  0745  3007               	movlw	7
  3297  0746  0250               	subwf	__first_delay_cntr+1,w
  3298  0747  30D0               	movlw	208
  3299  0748  1903               	skipnz
  3300  0749  024F               	subwf	__first_delay_cntr,w
  3301  074A  1C03               	skipc
  3302  074B  2F4D               	goto	u5051
  3303  074C  2F4E               	goto	u5050
  3304  074D                     u5051:	
  3305  074D  2F83               	goto	l5073
  3306  074E                     u5050:	
  3307  074E                     l5057:	
  3308                           
  3309                           ;main.c: 81:                    MTOUCH_Button_InitializeAll();
  3310  074E  318B  23C0  3187   	fcall	_MTOUCH_Button_InitializeAll
  3311  0751                     l5059:	
  3312                           
  3313                           ;main.c: 82:                    _wait_to_initialize = 0;
  3314  0751  0020               	movlb	0	; select bank0
  3315  0752  01DE               	clrf	__wait_to_initialize
  3316  0753                     l5061:	
  3317  0753  0022               	movlb	2	; select bank2
  3318  0754  140E               	bsf	14,0	;volatile
  3319  0755  2F83               	goto	l5073
  3320  0756                     l5063:	
  3321                           
  3322                           ;main.c: 87:                 if(MTOUCH_Button_isPressed(0))
  3323  0756  3000               	movlw	0
  3324  0757  318C  24E5  3187   	fcall	_MTOUCH_Button_isPressed
  3325  075A  3A00               	xorlw	0
  3326  075B  1903               	skipnz
  3327  075C  2F5E               	goto	u5061
  3328  075D  2F5F               	goto	u5060
  3329  075E                     u5061:	
  3330  075E  2F76               	goto	l1016
  3331  075F                     u5060:	
  3332  075F                     l1017:	
  3333                           ;main.c: 88:                 {;main.c: 89:                     do { LATCbits.LATC6 = 0; 
      +                          } while(0);
  3334                           
  3335  075F  0022               	movlb	2	; select bank2
  3336  0760  130E               	bcf	14,6	;volatile
  3337  0761                     l5065:	
  3338                           
  3339                           ;main.c: 91:                     if(EUSART_is_tx_ready())
  3340  0761  3189  21BB  3187   	fcall	_EUSART_is_tx_ready
  3341  0764  3A00               	xorlw	0
  3342  0765  1903               	skipnz
  3343  0766  2F68               	goto	u5071
  3344  0767  2F69               	goto	u5070
  3345  0768                     u5071:	
  3346  0768  2F73               	goto	l5071
  3347  0769                     u5070:	
  3348  0769                     l1020:	
  3349                           ;main.c: 92:                     {;main.c: 93:                         do { LATAbits.LAT
      +                          A4 = 1; } while(0);
  3350                           
  3351  0769  0022               	movlb	2	; select bank2
  3352  076A  160C               	bsf	12,4	;volatile
  3353  076B                     l5067:	
  3354                           
  3355                           ;main.c: 94:                         _delay((unsigned long)((10)*(8000000/4000000.0)));
  3356  076B  3006               	movlw	6
  3357  076C                     u5107:	
  3358  076C  0B89               	decfsz	9,f
  3359  076D  2F6C               	goto	u5107
  3360  076E  3200               	nop2
  3361  076F                     l5069:	
  3362                           
  3363                           ;main.c: 95:                         EUSART_Write('b');
  3364  076F  3062               	movlw	98
  3365  0770  318C  248F  3187   	fcall	_EUSART_Write
  3366  0773                     l5071:	
  3367  0773  0022               	movlb	2	; select bank2
  3368  0774  140E               	bsf	14,0	;volatile
  3369  0775  2F83               	goto	l5073
  3370  0776                     l1016:	
  3371                           ;main.c: 99:                 else
  3372                           
  3373                           
  3374                           ;main.c: 100:                 {;main.c: 102:                     if (!PORTAbits.RA2) {
  3375  0776  0020               	movlb	0	; select bank0
  3376  0777  190C               	btfsc	12,2	;volatile
  3377  0778  2F7A               	goto	u5081
  3378  0779  2F7B               	goto	u5080
  3379  077A                     u5081:	
  3380  077A  2F7F               	goto	l1031
  3381  077B                     u5080:	
  3382  077B                     l1026:	
  3383                           ;main.c: 103:                         do { LATCbits.LATC7 = 1; } while(0);
  3384                           
  3385  077B  0022               	movlb	2	; select bank2
  3386  077C  178E               	bsf	14,7	;volatile
  3387  077D                     l1028:	
  3388                           ;main.c: 104:                         do { LATCbits.LATC6 = 0; } while(0);
  3389                           
  3390  077D  130E               	bcf	14,6	;volatile
  3391  077E  2F82               	goto	l1035
  3392  077F                     l1031:	
  3393                           ;main.c: 106:                         do { LATCbits.LATC7 = 0; } while(0);
  3394                           
  3395  077F  0022               	movlb	2	; select bank2
  3396  0780  138E               	bcf	14,7	;volatile
  3397  0781                     l1033:	
  3398                           ;main.c: 107:                         do { LATCbits.LATC6 = 1; } while(0);
  3399                           
  3400  0781  170E               	bsf	14,6	;volatile
  3401  0782                     l1035:	
  3402                           ;main.c: 109:                     do { LATCbits.LATC0 = 0; } while(0);
  3403                           
  3404  0782  100E               	bcf	14,0	;volatile
  3405  0783                     l5073:	
  3406                           
  3407                           ;main.c: 113:             if (EUSART_is_tx_done()) {
  3408  0783  3189  2143  3187   	fcall	_EUSART_is_tx_done
  3409  0786  3A00               	xorlw	0
  3410  0787  1903               	skipnz
  3411  0788  2F8A               	goto	u5091
  3412  0789  2F8B               	goto	u5090
  3413  078A                     u5091:	
  3414  078A  2F33               	goto	l1009
  3415  078B                     u5090:	
  3416  078B                     l1038:	
  3417                           ;main.c: 114:                 do { LATAbits.LATA4 = 0; } while(0);
  3418                           
  3419  078B  0022               	movlb	2	; select bank2
  3420  078C  120C               	bcf	12,4	;volatile
  3421  078D  2F33               	goto	l1009
  3422  078E  3180  283B         	ljmp	start
  3423  0790                     __end_of_main:	
  3424                           
  3425                           	psect	text1
  3426  0AFA                     __ptext1:	
  3427 ;; *************** function _SYSTEM_Initialize *****************
  3428 ;; Defined at:
  3429 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3443 ;;      Params:         0       0       0       0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0       0
  3446 ;;      Totals:         0       0       0       0       0       0       0       0
  3447 ;;Total ram usage:        0 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    9
  3450 ;; This function calls:
  3451 ;;		_EUSART_Initialize
  3452 ;;		_MTOUCH_Initialize
  3453 ;;		_OSCILLATOR_Initialize
  3454 ;;		_PIN_MANAGER_Initialize
  3455 ;;		_TMR1_Initialize
  3456 ;;		_TMR2_Initialize
  3457 ;;		_WDT_Initialize
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           
  3464                           ;psect for function _SYSTEM_Initialize
  3465  0AFA                     _SYSTEM_Initialize:	
  3466  0AFA                     l4967:	
  3467                           ;incstack = 0
  3468                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3469                           
  3470                           
  3471                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3472  0AFA  318B  23A5  318A   	fcall	_PIN_MANAGER_Initialize
  3473                           
  3474                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3475  0AFD  3189  217D  318A   	fcall	_OSCILLATOR_Initialize
  3476                           
  3477                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3478  0B00  3189  214B  318A   	fcall	_WDT_Initialize
  3479                           
  3480                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  3481  0B03  3189  21B3  318A   	fcall	_TMR2_Initialize
  3482                           
  3483                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  3484  0B06  318B  2327  318A   	fcall	_TMR1_Initialize
  3485                           
  3486                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  3487  0B09  318D  25E2  318A   	fcall	_EUSART_Initialize
  3488  0B0C                     l4969:	
  3489                           
  3490                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  3491  0B0C  318A  22A5  318A   	fcall	_MTOUCH_Initialize
  3492  0B0F                     l842:	
  3493  0B0F  0008               	return
  3494  0B10                     __end_of_SYSTEM_Initialize:	
  3495                           
  3496                           	psect	text2
  3497  094B                     __ptext2:	
  3498 ;; *************** function _WDT_Initialize *****************
  3499 ;; Defined at:
  3500 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3514 ;;      Params:         0       0       0       0       0       0       0       0
  3515 ;;      Locals:         0       0       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0       0
  3517 ;;      Totals:         0       0       0       0       0       0       0       0
  3518 ;;Total ram usage:        0 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    4
  3521 ;; This function calls:
  3522 ;;		Nothing
  3523 ;; This function is called by:
  3524 ;;		_SYSTEM_Initialize
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           
  3529                           ;psect for function _WDT_Initialize
  3530  094B                     _WDT_Initialize:	
  3531  094B                     l3797:	
  3532                           ;incstack = 0
  3533                           ; Regs used in _WDT_Initialize: [wreg]
  3534                           
  3535                           
  3536                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  3537  094B  3016               	movlw	22
  3538  094C  0021               	movlb	1	; select bank1
  3539  094D  0097               	movwf	23	;volatile
  3540  094E                     l848:	
  3541  094E  0008               	return
  3542  094F                     __end_of_WDT_Initialize:	
  3543                           
  3544                           	psect	text3
  3545  09B3                     __ptext3:	
  3546 ;; *************** function _TMR2_Initialize *****************
  3547 ;; Defined at:
  3548 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3562 ;;      Params:         0       0       0       0       0       0       0       0
  3563 ;;      Locals:         0       0       0       0       0       0       0       0
  3564 ;;      Temps:          0       0       0       0       0       0       0       0
  3565 ;;      Totals:         0       0       0       0       0       0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    4
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_SYSTEM_Initialize
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _TMR2_Initialize
  3578  09B3                     _TMR2_Initialize:	
  3579  09B3                     l3799:	
  3580                           ;incstack = 0
  3581                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3582                           
  3583                           
  3584                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3585  09B3  30FF               	movlw	255
  3586  09B4  0020               	movlb	0	; select bank0
  3587  09B5  009B               	movwf	27	;volatile
  3588  09B6                     l3801:	
  3589                           
  3590                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3591  09B6  019A               	clrf	26	;volatile
  3592  09B7                     l3803:	
  3593                           
  3594                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3595  09B7  1091               	bcf	17,1	;volatile
  3596  09B8                     l3805:	
  3597                           
  3598                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  3599  09B8  3004               	movlw	4
  3600  09B9  009C               	movwf	28	;volatile
  3601  09BA                     l893:	
  3602  09BA  0008               	return
  3603  09BB                     __end_of_TMR2_Initialize:	
  3604                           
  3605                           	psect	text4
  3606  0B27                     __ptext4:	
  3607 ;; *************** function _TMR1_Initialize *****************
  3608 ;; Defined at:
  3609 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0, pclath, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3623 ;;      Params:         0       0       0       0       0       0       0       0
  3624 ;;      Locals:         0       0       0       0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0
  3626 ;;      Totals:         0       0       0       0       0       0       0       0
  3627 ;;Total ram usage:        0 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    5
  3630 ;; This function calls:
  3631 ;;		_TMR1_SetInterruptHandler
  3632 ;; This function is called by:
  3633 ;;		_SYSTEM_Initialize
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _TMR1_Initialize
  3639  0B27                     _TMR1_Initialize:	
  3640  0B27                     l3807:	
  3641                           ;incstack = 0
  3642                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3643                           
  3644                           
  3645                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3646  0B27  0020               	movlb	0	; select bank0
  3647  0B28  0199               	clrf	25	;volatile
  3648  0B29                     l3809:	
  3649                           
  3650                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFD;
  3651  0B29  30FD               	movlw	253
  3652  0B2A  0097               	movwf	23	;volatile
  3653  0B2B                     l3811:	
  3654                           
  3655                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x94;
  3656  0B2B  3094               	movlw	148
  3657  0B2C  0096               	movwf	22	;volatile
  3658  0B2D                     l3813:	
  3659                           
  3660                           ;mcc_generated_files/tmr1.c: 78:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3661  0B2D  0817               	movf	23,w	;volatile
  3662  0B2E  00EC               	movwf	_timer1ReloadVal+1	;volatile
  3663  0B2F  0816               	movf	22,w	;volatile
  3664  0B30  00EB               	movwf	_timer1ReloadVal	;volatile
  3665  0B31                     l3815:	
  3666                           
  3667                           ;mcc_generated_files/tmr1.c: 81:     PIR1bits.TMR1IF = 0;
  3668  0B31  1011               	bcf	17,0	;volatile
  3669  0B32                     l3817:	
  3670                           
  3671                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3672  0B32  0021               	movlb	1	; select bank1
  3673  0B33  1411               	bsf	17,0	;volatile
  3674  0B34                     l3819:	
  3675                           
  3676                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3677  0B34  3033               	movlw	low _TMR1_DefaultInterruptHandler
  3678  0B35  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3679  0B36  3009               	movlw	high _TMR1_DefaultInterruptHandler
  3680  0B37  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3681  0B38  3189  2177  318B   	fcall	_TMR1_SetInterruptHandler
  3682  0B3B                     l3821:	
  3683                           
  3684                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0xC5;
  3685  0B3B  30C5               	movlw	197
  3686  0B3C  0020               	movlb	0	; select bank0
  3687  0B3D  0098               	movwf	24	;volatile
  3688  0B3E                     l939:	
  3689  0B3E  0008               	return
  3690  0B3F                     __end_of_TMR1_Initialize:	
  3691                           
  3692                           	psect	text5
  3693  0BA5                     __ptext5:	
  3694 ;; *************** function _PIN_MANAGER_Initialize *****************
  3695 ;; Defined at:
  3696 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;		None
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;		None
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      void 
  3703 ;; Registers used:
  3704 ;;		wreg, status,2
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3710 ;;      Params:         0       0       0       0       0       0       0       0
  3711 ;;      Locals:         0       0       0       0       0       0       0       0
  3712 ;;      Temps:          0       0       0       0       0       0       0       0
  3713 ;;      Totals:         0       0       0       0       0       0       0       0
  3714 ;;Total ram usage:        0 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    4
  3717 ;; This function calls:
  3718 ;;		Nothing
  3719 ;; This function is called by:
  3720 ;;		_SYSTEM_Initialize
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           
  3725                           ;psect for function _PIN_MANAGER_Initialize
  3726  0BA5                     _PIN_MANAGER_Initialize:	
  3727  0BA5                     l3773:	
  3728                           ;incstack = 0
  3729                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3730                           
  3731                           
  3732                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  3733  0BA5  0022               	movlb	2	; select bank2
  3734  0BA6  018C               	clrf	12	;volatile
  3735                           
  3736                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  3737  0BA7  018D               	clrf	13	;volatile
  3738                           
  3739                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  3740  0BA8  018E               	clrf	14	;volatile
  3741  0BA9                     l3775:	
  3742                           
  3743                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x2F;
  3744  0BA9  302F               	movlw	47
  3745  0BAA  0021               	movlb	1	; select bank1
  3746  0BAB  008C               	movwf	12	;volatile
  3747  0BAC                     l3777:	
  3748                           
  3749                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  3750  0BAC  3070               	movlw	112
  3751  0BAD  008D               	movwf	13	;volatile
  3752  0BAE                     l3779:	
  3753                           
  3754                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x2A;
  3755  0BAE  302A               	movlw	42
  3756  0BAF  008E               	movwf	14	;volatile
  3757  0BB0                     l3781:	
  3758                           
  3759                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x3E;
  3760  0BB0  303E               	movlw	62
  3761  0BB1  0023               	movlb	3	; select bank3
  3762  0BB2  008E               	movwf	14	;volatile
  3763  0BB3                     l3783:	
  3764                           
  3765                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  3766  0BB3  3050               	movlw	80
  3767  0BB4  008D               	movwf	13	;volatile
  3768  0BB5                     l3785:	
  3769                           
  3770                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x23;
  3771  0BB5  3023               	movlw	35
  3772  0BB6  008C               	movwf	12	;volatile
  3773                           
  3774                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3775  0BB7  0024               	movlb	4	; select bank4
  3776  0BB8  018D               	clrf	13	;volatile
  3777  0BB9                     l3787:	
  3778                           
  3779                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x04;
  3780  0BB9  3004               	movlw	4
  3781  0BBA  008C               	movwf	12	;volatile
  3782  0BBB                     l3789:	
  3783                           
  3784                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 0;
  3785  0BBB  0021               	movlb	1	; select bank1
  3786  0BBC  1395               	bcf	21,7	;volatile
  3787  0BBD                     l3791:	
  3788                           
  3789                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  3790  0BBD  0022               	movlb	2	; select bank2
  3791  0BBE  019D               	clrf	29	;volatile
  3792  0BBF                     l877:	
  3793  0BBF  0008               	return
  3794  0BC0                     __end_of_PIN_MANAGER_Initialize:	
  3795                           
  3796                           	psect	text6
  3797  097D                     __ptext6:	
  3798 ;; *************** function _OSCILLATOR_Initialize *****************
  3799 ;; Defined at:
  3800 ;;		line 62 in file "mcc_generated_files/mcc.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;		None
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;		None
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  1    wreg      void 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3814 ;;      Params:         0       0       0       0       0       0       0       0
  3815 ;;      Locals:         0       0       0       0       0       0       0       0
  3816 ;;      Temps:          0       0       0       0       0       0       0       0
  3817 ;;      Totals:         0       0       0       0       0       0       0       0
  3818 ;;Total ram usage:        0 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    4
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_SYSTEM_Initialize
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           
  3829                           ;psect for function _OSCILLATOR_Initialize
  3830  097D                     _OSCILLATOR_Initialize:	
  3831  097D                     l3793:	
  3832                           ;incstack = 0
  3833                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3834                           
  3835                           
  3836                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x70;
  3837  097D  3070               	movlw	112
  3838  097E  0021               	movlb	1	; select bank1
  3839  097F  0099               	movwf	25	;volatile
  3840  0980                     l3795:	
  3841                           
  3842                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  3843  0980  0022               	movlb	2	; select bank2
  3844  0981  0196               	clrf	22	;volatile
  3845  0982                     l845:	
  3846  0982  0008               	return
  3847  0983                     __end_of_OSCILLATOR_Initialize:	
  3848                           
  3849                           	psect	text7
  3850  0AA5                     __ptext7:	
  3851 ;; *************** function _MTOUCH_Initialize *****************
  3852 ;; Defined at:
  3853 ;;		line 100 in file "mcc_generated_files/mtouch/mtouch.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;		None
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3867 ;;      Params:         0       0       0       0       0       0       0       0
  3868 ;;      Locals:         0       0       0       0       0       0       0       0
  3869 ;;      Temps:          0       0       0       0       0       0       0       0
  3870 ;;      Totals:         0       0       0       0       0       0       0       0
  3871 ;;Total ram usage:        0 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    8
  3874 ;; This function calls:
  3875 ;;		_MTOUCH_Button_InitializeAll
  3876 ;;		_MTOUCH_Sensor_InitializeAll
  3877 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3878 ;;		_MTOUCH_Sensor_Scan_Initialize
  3879 ;;		_TMR1_SetInterruptHandler
  3880 ;; This function is called by:
  3881 ;;		_SYSTEM_Initialize
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           
  3886                           ;psect for function _MTOUCH_Initialize
  3887  0AA5                     _MTOUCH_Initialize:	
  3888  0AA5                     l4903:	
  3889                           ;incstack = 0
  3890                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3891                           
  3892                           
  3893                           ;mcc_generated_files/mtouch/mtouch.c: 102:     MTOUCH_Sensor_InitializeAll();
  3894  0AA5  3187  27EF  318A   	fcall	_MTOUCH_Sensor_InitializeAll
  3895  0AA8                     l4905:	
  3896                           
  3897                           ;mcc_generated_files/mtouch/mtouch.c: 103:     MTOUCH_Button_InitializeAll();
  3898  0AA8  318B  23C0  318A   	fcall	_MTOUCH_Button_InitializeAll
  3899  0AAB                     l4907:	
  3900                           
  3901                           ;mcc_generated_files/mtouch/mtouch.c: 104:     MTOUCH_Sensor_Sampled_ResetAll();
  3902  0AAB  318B  23DD  318A   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3903  0AAE                     l4909:	
  3904                           
  3905                           ;mcc_generated_files/mtouch/mtouch.c: 105:     MTOUCH_Sensor_Scan_Initialize();
  3906  0AAE  318A  2229  318A   	fcall	_MTOUCH_Sensor_Scan_Initialize
  3907  0AB1                     l4911:	
  3908                           
  3909                           ;mcc_generated_files/mtouch/mtouch.c: 106:     TMR1_SetInterruptHandler(MTOUCH_ScanSched
      +                          uler);
  3910  0AB1  30D7               	movlw	low _MTOUCH_ScanScheduler
  3911  0AB2  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3912  0AB3  3009               	movlw	high _MTOUCH_ScanScheduler
  3913  0AB4  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3914  0AB5  3189  2177  318A   	fcall	_TMR1_SetInterruptHandler
  3915  0AB8                     l432:	
  3916  0AB8  0008               	return
  3917  0AB9                     __end_of_MTOUCH_Initialize:	
  3918                           
  3919                           	psect	text8
  3920  0977                     __ptext8:	
  3921 ;; *************** function _TMR1_SetInterruptHandler *****************
  3922 ;; Defined at:
  3923 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  3926 ;;		 -> TMR1_DefaultInterruptHandler(1), MTOUCH_ScanScheduler(1), 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3938 ;;      Params:         2       0       0       0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0
  3941 ;;      Totals:         2       0       0       0       0       0       0       0
  3942 ;;Total ram usage:        2 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    4
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_MTOUCH_Initialize
  3949 ;;		_TMR1_Initialize
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function _TMR1_SetInterruptHandler
  3955  0977                     _TMR1_SetInterruptHandler:	
  3956  0977                     l3647:	
  3957                           ;incstack = 0
  3958                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  3959                           
  3960                           
  3961                           ;mcc_generated_files/tmr1.c: 172:     TMR1_InterruptHandler = InterruptHandler;
  3962  0977  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  3963  0978  0020               	movlb	0	; select bank0
  3964  0979  00EA               	movwf	_TMR1_InterruptHandler+1
  3965  097A  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  3966  097B  00E9               	movwf	_TMR1_InterruptHandler
  3967  097C                     l969:	
  3968  097C  0008               	return
  3969  097D                     __end_of_TMR1_SetInterruptHandler:	
  3970                           
  3971                           	psect	text9
  3972  07EF                     __ptext9:	
  3973 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3974 ;; Defined at:
  3975 ;;		line 206 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  sensor          1    1[BANK0 ] enum E2871
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3989 ;;      Params:         0       0       0       0       0       0       0       0
  3990 ;;      Locals:         0       1       0       0       0       0       0       0
  3991 ;;      Temps:          0       1       0       0       0       0       0       0
  3992 ;;      Totals:         0       2       0       0       0       0       0       0
  3993 ;;Total ram usage:        2 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    7
  3996 ;; This function calls:
  3997 ;;		_MTOUCH_Sensor_Initialize
  3998 ;; This function is called by:
  3999 ;;		_MTOUCH_Initialize
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           
  4004                           ;psect for function _MTOUCH_Sensor_InitializeAll
  4005  07EF                     _MTOUCH_Sensor_InitializeAll:	
  4006  07EF                     l4795:	
  4007                           ;incstack = 0
  4008                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4009                           
  4010                           
  4011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 210:     for (sensor = 0; sensor < 1u; sensor
      +                          ++)
  4012  07EF  0020               	movlb	0	; select bank0
  4013  07F0  01A1               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  4014  07F1                     l4801:	
  4015                           
  4016                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 212:         MTOUCH_Sensor_Initialize(sensor);
  4017  07F1  0821               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  4018  07F2  318A  22E4  3187   	fcall	_MTOUCH_Sensor_Initialize
  4019  07F5                     l4803:	
  4020                           
  4021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     }
  4022  07F5  3001               	movlw	1
  4023  07F6  0020               	movlb	0	; select bank0
  4024  07F7  00A0               	movwf	??_MTOUCH_Sensor_InitializeAll
  4025  07F8  0820               	movf	??_MTOUCH_Sensor_InitializeAll,w
  4026  07F9  07A1               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  4027  07FA                     l4805:	
  4028  07FA  0821               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  4029  07FB  1903               	btfsc	3,2
  4030  07FC  2FFE               	goto	u4711
  4031  07FD  2FFF               	goto	u4710
  4032  07FE                     u4711:	
  4033  07FE  2FF1               	goto	l4801
  4034  07FF                     u4710:	
  4035  07FF                     l134:	
  4036  07FF  0008               	return
  4037  0800                     __end_of_MTOUCH_Sensor_InitializeAll:	
  4038                           
  4039                           	psect	text10
  4040  0AE4                     __ptext10:	
  4041 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  4042 ;; Defined at:
  4043 ;;		line 191 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  sensor          1    wreg     enum E2871
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  sensor          1    9[COMMON] enum E2871
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  1    wreg      enum E2873
  4050 ;; Registers used:
  4051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4057 ;;      Params:         0       0       0       0       0       0       0       0
  4058 ;;      Locals:         1       0       0       0       0       0       0       0
  4059 ;;      Temps:          1       0       0       0       0       0       0       0
  4060 ;;      Totals:         2       0       0       0       0       0       0       0
  4061 ;;Total ram usage:        2 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    6
  4064 ;; This function calls:
  4065 ;;		_MTOUCH_Sensor_Calibrate
  4066 ;;		_MTOUCH_Sensor_Enable
  4067 ;;		_Sensor_Sampled_Reset
  4068 ;;		___bmul
  4069 ;; This function is called by:
  4070 ;;		_MTOUCH_Sensor_InitializeAll
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _MTOUCH_Sensor_Initialize
  4076  0AE4                     _MTOUCH_Sensor_Initialize:	
  4077                           
  4078                           ;incstack = 0
  4079                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4080                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  4081  0AE4  00F9               	movwf	MTOUCH_Sensor_Initialize@sensor
  4082  0AE5                     l4647:	
  4083                           
  4084                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 191: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           192: {;mcc_generated_files/mtouch/mtouch_sensor.c: 194:     MTOUCH_Sensor_Enable(sensor
      +                          );
  4085  0AE5  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4086  0AE6  318A  2292  318A   	fcall	_MTOUCH_Sensor_Enable
  4087                           
  4088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 195:     MTOUCH_Sensor_Calibrate(sensor);
  4089  0AE9  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4090  0AEA  318A  227F  318A   	fcall	_MTOUCH_Sensor_Calibrate
  4091                           
  4092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 196:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  4093  0AED  3009               	movlw	9
  4094  0AEE  00F8               	movwf	??_MTOUCH_Sensor_Initialize
  4095  0AEF  0878               	movf	??_MTOUCH_Sensor_Initialize,w
  4096  0AF0  00F2               	movwf	___bmul@multiplicand
  4097  0AF1  0879               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4098  0AF2  318A  22B9  318A   	fcall	___bmul
  4099  0AF5  3E60               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  4100  0AF6  3189  21A4  318A   	fcall	_Sensor_Sampled_Reset
  4101  0AF9                     l129:	
  4102  0AF9  0008               	return
  4103  0AFA                     __end_of_MTOUCH_Sensor_Initialize:	
  4104                           
  4105                           	psect	text11
  4106  0A92                     __ptext11:	
  4107 ;; *************** function _MTOUCH_Sensor_Enable *****************
  4108 ;; Defined at:
  4109 ;;		line 824 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  sensor          1    wreg     enum E2871
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  sensor          1    7[COMMON] enum E2871
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4123 ;;      Params:         0       0       0       0       0       0       0       0
  4124 ;;      Locals:         1       0       0       0       0       0       0       0
  4125 ;;      Temps:          1       0       0       0       0       0       0       0
  4126 ;;      Totals:         2       0       0       0       0       0       0       0
  4127 ;;Total ram usage:        2 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    5
  4130 ;; This function calls:
  4131 ;;		___bmul
  4132 ;; This function is called by:
  4133 ;;		_MTOUCH_Sensor_Initialize
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           
  4138                           ;psect for function _MTOUCH_Sensor_Enable
  4139  0A92                     _MTOUCH_Sensor_Enable:	
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4143                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  4144  0A92  00F7               	movwf	MTOUCH_Sensor_Enable@sensor
  4145  0A93                     l4559:	
  4146                           
  4147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 824: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 825: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 826:     if(sensor < 1u)
  4148  0A93  0877               	movf	MTOUCH_Sensor_Enable@sensor,w
  4149  0A94  1D03               	btfss	3,2
  4150  0A95  2A97               	goto	u4301
  4151  0A96  2A98               	goto	u4300
  4152  0A97                     u4301:	
  4153  0A97  2AA4               	goto	l314
  4154  0A98                     u4300:	
  4155  0A98                     l4561:	
  4156                           
  4157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 827:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  4158  0A98  3009               	movlw	9
  4159  0A99  00F6               	movwf	??_MTOUCH_Sensor_Enable
  4160  0A9A  0876               	movf	??_MTOUCH_Sensor_Enable,w
  4161  0A9B  00F2               	movwf	___bmul@multiplicand
  4162  0A9C  0877               	movf	MTOUCH_Sensor_Enable@sensor,w
  4163  0A9D  318A  22B9  318A   	fcall	___bmul
  4164  0AA0  3E68               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  4165  0AA1  0086               	movwf	6
  4166  0AA2  0187               	clrf	7
  4167  0AA3  1581               	bsf	1,3
  4168  0AA4                     l314:	
  4169  0AA4  0008               	return
  4170  0AA5                     __end_of_MTOUCH_Sensor_Enable:	
  4171                           
  4172                           	psect	text12
  4173  0BC0                     __ptext12:	
  4174 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  4175 ;; Defined at:
  4176 ;;		line 153 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  button          1    6[BANK0 ] enum E3067
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4190 ;;      Params:         0       0       0       0       0       0       0       0
  4191 ;;      Locals:         0       1       0       0       0       0       0       0
  4192 ;;      Temps:          0       1       0       0       0       0       0       0
  4193 ;;      Totals:         0       2       0       0       0       0       0       0
  4194 ;;Total ram usage:        2 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    7
  4197 ;; This function calls:
  4198 ;;		_MTOUCH_Button_Initialize
  4199 ;;		_memcpy
  4200 ;; This function is called by:
  4201 ;;		_MTOUCH_Initialize
  4202 ;;		_main
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           
  4207                           ;psect for function _MTOUCH_Button_InitializeAll
  4208  0BC0                     _MTOUCH_Button_InitializeAll:	
  4209  0BC0                     l4857:	
  4210                           ;incstack = 0
  4211                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4212                           
  4213                           
  4214                           ;mcc_generated_files/mtouch/mtouch_button.c: 155:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 157:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  4215  0BC0  3000               	movlw	low (_mtouch_button_init| (0+32768))
  4216  0BC1  00F2               	movwf	memcpy@s1
  4217  0BC2  3090               	movlw	high (_mtouch_button_init| (0+32768))
  4218  0BC3  00F3               	movwf	memcpy@s1+1
  4219  0BC4  3010               	movlw	16
  4220  0BC5  00F4               	movwf	memcpy@n
  4221  0BC6  3000               	movlw	0
  4222  0BC7  00F5               	movwf	memcpy@n+1
  4223  0BC8  30B8               	movlw	(low (_mtouch_button| 0))& (0+255)
  4224  0BC9  318D  2514  318B   	fcall	_memcpy
  4225  0BCC                     l4859:	
  4226                           
  4227                           ;mcc_generated_files/mtouch/mtouch_button.c: 159:     for (button = 0; button < 1u; butt
      +                          on++)
  4228  0BCC  0020               	movlb	0	; select bank0
  4229  0BCD  01A6               	clrf	MTOUCH_Button_InitializeAll@button
  4230  0BCE                     l4865:	
  4231                           
  4232                           ;mcc_generated_files/mtouch/mtouch_button.c: 160:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 161:         MTOUCH_Button_Initialize(button);
  4233  0BCE  0826               	movf	MTOUCH_Button_InitializeAll@button,w
  4234  0BCF  318D  2543  318B   	fcall	_MTOUCH_Button_Initialize
  4235  0BD2                     l4867:	
  4236                           
  4237                           ;mcc_generated_files/mtouch/mtouch_button.c: 162:     }
  4238  0BD2  3001               	movlw	1
  4239  0BD3  0020               	movlb	0	; select bank0
  4240  0BD4  00A5               	movwf	??_MTOUCH_Button_InitializeAll
  4241  0BD5  0825               	movf	??_MTOUCH_Button_InitializeAll,w
  4242  0BD6  07A6               	addwf	MTOUCH_Button_InitializeAll@button,f
  4243  0BD7                     l4869:	
  4244  0BD7  0826               	movf	MTOUCH_Button_InitializeAll@button,w
  4245  0BD8  1903               	btfsc	3,2
  4246  0BD9  2BDB               	goto	u4781
  4247  0BDA  2BDC               	goto	u4780
  4248  0BDB                     u4781:	
  4249  0BDB  2BCE               	goto	l4865
  4250  0BDC                     u4780:	
  4251  0BDC                     l500:	
  4252  0BDC  0008               	return
  4253  0BDD                     __end_of_MTOUCH_Button_InitializeAll:	
  4254                           
  4255                           	psect	text13
  4256  0D14                     __ptext13:	
  4257 ;; *************** function _memcpy *****************
  4258 ;; Defined at:
  4259 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/memcpy.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  d1              1    wreg     PTR void 
  4262 ;;		 -> mtouch_button(16), 
  4263 ;;  s1              2    2[COMMON] PTR const void 
  4264 ;;		 -> mtouch_button_init(16), 
  4265 ;;  n               2    4[COMMON] unsigned int 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  d1              1    3[BANK0 ] PTR void 
  4268 ;;		 -> mtouch_button(16), 
  4269 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  4270 ;;		 -> mtouch_button_init(16), 
  4271 ;;  d               1    4[BANK0 ] PTR unsigned char 
  4272 ;;		 -> mtouch_button(16), 
  4273 ;;  tmp             1    0[BANK0 ] unsigned char 
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      PTR void 
  4276 ;; Registers used:
  4277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4283 ;;      Params:         4       0       0       0       0       0       0       0
  4284 ;;      Locals:         0       5       0       0       0       0       0       0
  4285 ;;      Temps:          1       0       0       0       0       0       0       0
  4286 ;;      Totals:         5       5       0       0       0       0       0       0
  4287 ;;Total ram usage:       10 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    4
  4290 ;; This function calls:
  4291 ;;		Nothing
  4292 ;; This function is called by:
  4293 ;;		_MTOUCH_Button_InitializeAll
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _memcpy
  4299  0D14                     _memcpy:	
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4303                           ;memcpy@d1 stored from wreg
  4304  0D14  0020               	movlb	0	; select bank0
  4305  0D15  00A3               	movwf	memcpy@d1
  4306  0D16                     l4723:	
  4307  0D16  0873               	movf	memcpy@s1+1,w
  4308  0D17  00A2               	movwf	memcpy@s+1
  4309  0D18  0872               	movf	memcpy@s1,w
  4310  0D19  00A1               	movwf	memcpy@s
  4311  0D1A  0823               	movf	memcpy@d1,w
  4312  0D1B  00F6               	movwf	??_memcpy
  4313  0D1C  0876               	movf	??_memcpy,w
  4314  0D1D  00A4               	movwf	memcpy@d
  4315  0D1E  2D36               	goto	l4733
  4316  0D1F                     l4725:	
  4317  0D1F  0821               	movf	memcpy@s,w
  4318  0D20  0084               	movwf	4
  4319  0D21  0822               	movf	memcpy@s+1,w
  4320  0D22  0085               	movwf	5
  4321  0D23  0800               	movf	0,w	;code access
  4322  0D24  00F6               	movwf	??_memcpy
  4323  0D25  0876               	movf	??_memcpy,w
  4324  0D26  00A0               	movwf	memcpy@tmp
  4325  0D27                     l4727:	
  4326  0D27  3001               	movlw	1
  4327  0D28  07A1               	addwf	memcpy@s,f
  4328  0D29  3000               	movlw	0
  4329  0D2A  3DA2               	addwfc	memcpy@s+1,f
  4330  0D2B                     l4729:	
  4331  0D2B  0820               	movf	memcpy@tmp,w
  4332  0D2C  00F6               	movwf	??_memcpy
  4333  0D2D  0824               	movf	memcpy@d,w
  4334  0D2E  0086               	movwf	6
  4335  0D2F  0187               	clrf	7
  4336  0D30  0876               	movf	??_memcpy,w
  4337  0D31  0081               	movwf	1
  4338  0D32                     l4731:	
  4339  0D32  3001               	movlw	1
  4340  0D33  00F6               	movwf	??_memcpy
  4341  0D34  0876               	movf	??_memcpy,w
  4342  0D35  07A4               	addwf	memcpy@d,f
  4343  0D36                     l4733:	
  4344  0D36  3001               	movlw	1
  4345  0D37  02F4               	subwf	memcpy@n,f
  4346  0D38  3000               	movlw	0
  4347  0D39  3BF5               	subwfb	memcpy@n+1,f
  4348  0D3A  0A74               	incf	memcpy@n,w
  4349  0D3B  1D03               	skipz
  4350  0D3C  2D41               	goto	u4551
  4351  0D3D  0A75               	incf	memcpy@n+1,w
  4352  0D3E  1D03               	btfss	3,2
  4353  0D3F  2D41               	goto	u4551
  4354  0D40  2D42               	goto	u4550
  4355  0D41                     u4551:	
  4356  0D41  2D1F               	goto	l4725
  4357  0D42                     u4550:	
  4358  0D42                     l1573:	
  4359  0D42  0008               	return
  4360  0D43                     __end_of_memcpy:	
  4361                           
  4362                           	psect	text14
  4363  0DE2                     __ptext14:	
  4364 ;; *************** function _EUSART_Initialize *****************
  4365 ;; Defined at:
  4366 ;;		line 88 in file "mcc_generated_files/eusart.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      void 
  4373 ;; Registers used:
  4374 ;;		wreg, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4380 ;;      Params:         0       0       0       0       0       0       0       0
  4381 ;;      Locals:         0       0       0       0       0       0       0       0
  4382 ;;      Temps:          1       0       0       0       0       0       0       0
  4383 ;;      Totals:         1       0       0       0       0       0       0       0
  4384 ;;Total ram usage:        1 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    5
  4387 ;; This function calls:
  4388 ;;		_EUSART_SetErrorHandler
  4389 ;;		_EUSART_SetFramingErrorHandler
  4390 ;;		_EUSART_SetOverrunErrorHandler
  4391 ;;		_EUSART_SetRxInterruptHandler
  4392 ;;		_EUSART_SetTxInterruptHandler
  4393 ;; This function is called by:
  4394 ;;		_SYSTEM_Initialize
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _EUSART_Initialize
  4400  0DE2                     _EUSART_Initialize:	
  4401  0DE2                     l3737:	
  4402                           ;incstack = 0
  4403                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4404                           
  4405                           
  4406                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  4407  0DE2  0021               	movlb	1	; select bank1
  4408  0DE3  1291               	bcf	17,5	;volatile
  4409  0DE4                     l3739:	
  4410                           
  4411                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  4412  0DE4  30A9               	movlw	low _EUSART_Receive_ISR
  4413  0DE5  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  4414  0DE6  300D               	movlw	high _EUSART_Receive_ISR
  4415  0DE7  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  4416  0DE8  3189  216B  318D   	fcall	_EUSART_SetRxInterruptHandler
  4417  0DEB                     l3741:	
  4418                           
  4419                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  4420  0DEB  0021               	movlb	1	; select bank1
  4421  0DEC  1211               	bcf	17,4	;volatile
  4422                           
  4423                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  4424  0DED  30FB               	movlw	low _EUSART_Transmit_ISR
  4425  0DEE  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  4426  0DEF  300B               	movlw	high _EUSART_Transmit_ISR
  4427  0DF0  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  4428  0DF1  3189  2171  318D   	fcall	_EUSART_SetTxInterruptHandler
  4429  0DF4                     l3743:	
  4430                           
  4431                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  4432  0DF4  3008               	movlw	8
  4433  0DF5  0023               	movlb	3	; select bank3
  4434  0DF6  009F               	movwf	31	;volatile
  4435  0DF7                     l3745:	
  4436                           
  4437                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  4438  0DF7  3090               	movlw	144
  4439  0DF8  009D               	movwf	29	;volatile
  4440  0DF9                     l3747:	
  4441                           
  4442                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  4443  0DF9  3024               	movlw	36
  4444  0DFA  009E               	movwf	30	;volatile
  4445  0DFB                     l3749:	
  4446                           
  4447                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x67;
  4448  0DFB  3067               	movlw	103
  4449  0DFC  009B               	movwf	27	;volatile
  4450  0DFD                     l3751:	
  4451                           
  4452                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  4453  0DFD  019C               	clrf	28	;volatile
  4454  0DFE                     l3753:	
  4455                           
  4456                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  4457  0DFE  3032               	movlw	low _EUSART_DefaultFramingErrorHandler
  4458  0DFF  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4459  0E00  3009               	movlw	high _EUSART_DefaultFramingErrorHandler
  4460  0E01  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4461  0E02  3189  215F  318D   	fcall	_EUSART_SetFramingErrorHandler
  4462  0E05                     l3755:	
  4463                           
  4464                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  4465  0E05  303F               	movlw	low _EUSART_DefaultOverrunErrorHandler
  4466  0E06  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4467  0E07  3009               	movlw	high _EUSART_DefaultOverrunErrorHandler
  4468  0E08  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4469  0E09  3189  2165  318D   	fcall	_EUSART_SetOverrunErrorHandler
  4470  0E0C                     l3757:	
  4471                           
  4472                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  4473  0E0C  303B               	movlw	low _EUSART_DefaultErrorHandler
  4474  0E0D  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  4475  0E0E  3009               	movlw	high _EUSART_DefaultErrorHandler
  4476  0E0F  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4477  0E10  3189  2159  318D   	fcall	_EUSART_SetErrorHandler
  4478                           
  4479                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  4480  0E13  0020               	movlb	0	; select bank0
  4481  0E14  01D3               	clrf	_eusartRxLastError	;volatile
  4482                           
  4483                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  4484  0E15  01D6               	clrf	_eusartTxHead	;volatile
  4485                           
  4486                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  4487  0E16  01D5               	clrf	_eusartTxTail	;volatile
  4488  0E17                     l3759:	
  4489                           
  4490                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  4491  0E17  3008               	movlw	8
  4492  0E18  00F4               	movwf	??_EUSART_Initialize
  4493  0E19  0874               	movf	??_EUSART_Initialize,w
  4494  0E1A  00EF               	movwf	_eusartTxBufferRemaining	;volatile
  4495  0E1B                     l3761:	
  4496                           
  4497                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  4498  0E1B  01FB               	clrf	_eusartRxHead	;volatile
  4499  0E1C                     l3763:	
  4500                           
  4501                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  4502  0E1C  01FA               	clrf	_eusartRxTail	;volatile
  4503  0E1D                     l3765:	
  4504                           
  4505                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  4506  0E1D  01D4               	clrf	_eusartRxCount	;volatile
  4507  0E1E                     l3767:	
  4508                           
  4509                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  4510  0E1E  0021               	movlb	1	; select bank1
  4511  0E1F  1691               	bsf	17,5	;volatile
  4512  0E20                     l719:	
  4513  0E20  0008               	return
  4514  0E21                     __end_of_EUSART_Initialize:	
  4515                           
  4516                           	psect	text15
  4517  0971                     __ptext15:	
  4518 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  4519 ;; Defined at:
  4520 ;;		line 285 in file "mcc_generated_files/eusart.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  4523 ;;		 -> EUSART_Transmit_ISR(1), 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4535 ;;      Params:         2       0       0       0       0       0       0       0
  4536 ;;      Locals:         0       0       0       0       0       0       0       0
  4537 ;;      Temps:          0       0       0       0       0       0       0       0
  4538 ;;      Totals:         2       0       0       0       0       0       0       0
  4539 ;;Total ram usage:        2 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    4
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_EUSART_Initialize
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _EUSART_SetTxInterruptHandler
  4551  0971                     _EUSART_SetTxInterruptHandler:	
  4552  0971                     l3667:	
  4553                           ;incstack = 0
  4554                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  4555                           
  4556                           
  4557                           ;mcc_generated_files/eusart.c: 286:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  4558  0971  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  4559  0972  0020               	movlb	0	; select bank0
  4560  0973  00EE               	movwf	_EUSART_TxDefaultInterruptHandler+1
  4561  0974  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  4562  0975  00ED               	movwf	_EUSART_TxDefaultInterruptHandler
  4563  0976                     l791:	
  4564  0976  0008               	return
  4565  0977                     __end_of_EUSART_SetTxInterruptHandler:	
  4566                           
  4567                           	psect	text16
  4568  096B                     __ptext16:	
  4569 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4570 ;; Defined at:
  4571 ;;		line 289 in file "mcc_generated_files/eusart.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  4574 ;;		 -> EUSART_Receive_ISR(1), 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4586 ;;      Params:         2       0       0       0       0       0       0       0
  4587 ;;      Locals:         0       0       0       0       0       0       0       0
  4588 ;;      Temps:          0       0       0       0       0       0       0       0
  4589 ;;      Totals:         2       0       0       0       0       0       0       0
  4590 ;;Total ram usage:        2 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    4
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_EUSART_Initialize
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _EUSART_SetRxInterruptHandler
  4602  096B                     _EUSART_SetRxInterruptHandler:	
  4603  096B                     l3665:	
  4604                           ;incstack = 0
  4605                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4606                           
  4607                           
  4608                           ;mcc_generated_files/eusart.c: 290:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4609  096B  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4610  096C  0021               	movlb	1	; select bank1
  4611  096D  00D9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  4612  096E  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4613  096F  00D8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  4614  0970                     l794:	
  4615  0970  0008               	return
  4616  0971                     __end_of_EUSART_SetRxInterruptHandler:	
  4617                           
  4618                           	psect	text17
  4619  0965                     __ptext17:	
  4620 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4621 ;; Defined at:
  4622 ;;		line 277 in file "mcc_generated_files/eusart.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  4625 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  1    wreg      void 
  4630 ;; Registers used:
  4631 ;;		wreg
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4637 ;;      Params:         2       0       0       0       0       0       0       0
  4638 ;;      Locals:         0       0       0       0       0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0       0       0       0
  4640 ;;      Totals:         2       0       0       0       0       0       0       0
  4641 ;;Total ram usage:        2 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    4
  4644 ;; This function calls:
  4645 ;;		Nothing
  4646 ;; This function is called by:
  4647 ;;		_EUSART_Initialize
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           
  4652                           ;psect for function _EUSART_SetOverrunErrorHandler
  4653  0965                     _EUSART_SetOverrunErrorHandler:	
  4654  0965                     l3671:	
  4655                           ;incstack = 0
  4656                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4657                           
  4658                           
  4659                           ;mcc_generated_files/eusart.c: 278:     EUSART_OverrunErrorHandler = interruptHandler;
  4660  0965  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4661  0966  0021               	movlb	1	; select bank1
  4662  0967  00D5               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  4663  0968  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4664  0969  00D4               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  4665  096A                     l785:	
  4666  096A  0008               	return
  4667  096B                     __end_of_EUSART_SetOverrunErrorHandler:	
  4668                           
  4669                           	psect	text18
  4670  095F                     __ptext18:	
  4671 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4672 ;; Defined at:
  4673 ;;		line 273 in file "mcc_generated_files/eusart.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  4676 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      void 
  4681 ;; Registers used:
  4682 ;;		wreg
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4688 ;;      Params:         2       0       0       0       0       0       0       0
  4689 ;;      Locals:         0       0       0       0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0       0
  4691 ;;      Totals:         2       0       0       0       0       0       0       0
  4692 ;;Total ram usage:        2 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    4
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_EUSART_Initialize
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           
  4703                           ;psect for function _EUSART_SetFramingErrorHandler
  4704  095F                     _EUSART_SetFramingErrorHandler:	
  4705  095F                     l3669:	
  4706                           ;incstack = 0
  4707                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4708                           
  4709                           
  4710                           ;mcc_generated_files/eusart.c: 274:     EUSART_FramingErrorHandler = interruptHandler;
  4711  095F  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4712  0960  0021               	movlb	1	; select bank1
  4713  0961  00D7               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  4714  0962  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4715  0963  00D6               	movwf	_EUSART_FramingErrorHandler^(0+128)
  4716  0964                     l782:	
  4717  0964  0008               	return
  4718  0965                     __end_of_EUSART_SetFramingErrorHandler:	
  4719                           
  4720                           	psect	text19
  4721  0959                     __ptext19:	
  4722 ;; *************** function _EUSART_SetErrorHandler *****************
  4723 ;; Defined at:
  4724 ;;		line 281 in file "mcc_generated_files/eusart.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  4727 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4739 ;;      Params:         2       0       0       0       0       0       0       0
  4740 ;;      Locals:         0       0       0       0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0       0
  4742 ;;      Totals:         2       0       0       0       0       0       0       0
  4743 ;;Total ram usage:        2 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    4
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		_EUSART_Initialize
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _EUSART_SetErrorHandler
  4755  0959                     _EUSART_SetErrorHandler:	
  4756  0959                     l3673:	
  4757                           ;incstack = 0
  4758                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4759                           
  4760                           
  4761                           ;mcc_generated_files/eusart.c: 282:     EUSART_ErrorHandler = interruptHandler;
  4762  0959  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4763  095A  0021               	movlb	1	; select bank1
  4764  095B  00D3               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  4765  095C  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4766  095D  00D2               	movwf	_EUSART_ErrorHandler^(0+128)
  4767  095E                     l788:	
  4768  095E  0008               	return
  4769  095F                     __end_of_EUSART_SetErrorHandler:	
  4770                           
  4771                           	psect	text20
  4772  0C1D                     __ptext20:	
  4773 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4774 ;; Defined at:
  4775 ;;		line 116 in file "mcc_generated_files/mtouch/mtouch.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      _Bool 
  4782 ;; Registers used:
  4783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4789 ;;      Params:         0       0       0       0       0       0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0
  4791 ;;      Temps:          0       0       1       0       0       0       0       0
  4792 ;;      Totals:         0       0       1       0       0       0       0       0
  4793 ;;Total ram usage:        1 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:   11
  4796 ;; This function calls:
  4797 ;;		_MTOUCH_Button_ServiceAll
  4798 ;;		_MTOUCH_Sensor_SampleAll
  4799 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4800 ;;		_MTOUCH_Tick
  4801 ;;		_MTOUCH_needReburst
  4802 ;; This function is called by:
  4803 ;;		_main
  4804 ;;		_touch_example
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function _MTOUCH_Service_Mainloop
  4810  0C1D                     _MTOUCH_Service_Mainloop:	
  4811  0C1D                     l4925:	
  4812                           ;incstack = 0
  4813                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4814                           
  4815                           
  4816                           ;mcc_generated_files/mtouch/mtouch.c: 120:     if(mtouch_time_toScan)
  4817  0C1D  0020               	movlb	0	; select bank0
  4818  0C1E  0857               	movf	_mtouch_time_toScan,w
  4819  0C1F  1903               	btfsc	3,2
  4820  0C20  2C22               	goto	u4861
  4821  0C21  2C23               	goto	u4860
  4822  0C22                     u4861:	
  4823  0C22  2C2B               	goto	l4929
  4824  0C23                     u4860:	
  4825  0C23                     l4927:	
  4826                           
  4827                           ;mcc_generated_files/mtouch/mtouch.c: 121:     {;mcc_generated_files/mtouch/mtouch.c: 12
      +                          2:         if(MTOUCH_Sensor_SampleAll() == 0)
  4828  0C23  318B  2358  318C   	fcall	_MTOUCH_Sensor_SampleAll
  4829  0C26  3A00               	xorlw	0
  4830  0C27  1D03               	skipz
  4831  0C28  2C2A               	goto	u4871
  4832  0C29  2C2B               	goto	u4870
  4833  0C2A                     u4871:	
  4834  0C2A  2C2D               	goto	l4933
  4835  0C2B                     u4870:	
  4836  0C2B                     l4929:	
  4837                           
  4838                           ;mcc_generated_files/mtouch/mtouch.c: 123:         return 0;
  4839  0C2B  3000               	movlw	0
  4840  0C2C  2C3F               	goto	l437
  4841  0C2D                     l4933:	
  4842                           
  4843                           ;mcc_generated_files/mtouch/mtouch.c: 126:             MTOUCH_Button_ServiceAll();
  4844  0C2D  318A  224A  318C   	fcall	_MTOUCH_Button_ServiceAll
  4845  0C30                     l4935:	
  4846                           
  4847                           ;mcc_generated_files/mtouch/mtouch.c: 127:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  4848  0C30  3180  2002  318C   	fcall	_MTOUCH_needReburst
  4849  0C33  0021               	movlb	1	; select bank1
  4850  0C34  00DC               	movwf	??_MTOUCH_Service_Mainloop^(0+128)
  4851  0C35  085C               	movf	??_MTOUCH_Service_Mainloop^(0+128),w
  4852  0C36  0020               	movlb	0	; select bank0
  4853  0C37  00D7               	movwf	_mtouch_time_toScan
  4854  0C38                     l4937:	
  4855                           
  4856                           ;mcc_generated_files/mtouch/mtouch.c: 128:             MTOUCH_Sensor_Sampled_ResetAll();
  4857  0C38  318B  23DD  318C   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4858  0C3B                     l4939:	
  4859                           
  4860                           ;mcc_generated_files/mtouch/mtouch.c: 129:             MTOUCH_Tick();
  4861  0C3B  3189  2147  318C   	fcall	_MTOUCH_Tick
  4862  0C3E                     l4941:	
  4863                           
  4864                           ;mcc_generated_files/mtouch/mtouch.c: 130:             return 1;
  4865  0C3E  3001               	movlw	1
  4866  0C3F                     l437:	
  4867  0C3F  0008               	return
  4868  0C40                     __end_of_MTOUCH_Service_Mainloop:	
  4869                           
  4870                           	psect	text21
  4871  0002                     __ptext21:	
  4872 ;; *************** function _MTOUCH_needReburst *****************
  4873 ;; Defined at:
  4874 ;;		line 153 in file "mcc_generated_files/mtouch/mtouch.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  needReburst     1    0        _Bool 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      _Bool 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4888 ;;      Params:         0       0       0       0       0       0       0       0
  4889 ;;      Locals:         1       0       0       0       0       0       0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0
  4891 ;;      Totals:         1       0       0       0       0       0       0       0
  4892 ;;Total ram usage:        1 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    4
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_MTOUCH_Service_Mainloop
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _MTOUCH_needReburst
  4904  0002                     _MTOUCH_needReburst:	
  4905  0002                     l3729:	
  4906                           ;incstack = 0
  4907                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  4908                           
  4909  0002                     l3731:	
  4910                           
  4911                           ;mcc_generated_files/mtouch/mtouch.c: 157:     return needReburst;
  4912  0002  3000               	movlw	0
  4913  0003                     l444:	
  4914  0003  0008               	return
  4915  0004                     __end_of_MTOUCH_needReburst:	
  4916                           
  4917                           	psect	text22
  4918  0947                     __ptext22:	
  4919 ;; *************** function _MTOUCH_Tick *****************
  4920 ;; Defined at:
  4921 ;;		line 143 in file "mcc_generated_files/mtouch/mtouch.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      void 
  4928 ;; Registers used:
  4929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4935 ;;      Params:         0       0       0       0       0       0       0       0
  4936 ;;      Locals:         0       0       0       0       0       0       0       0
  4937 ;;      Temps:          0       0       0       0       0       0       0       0
  4938 ;;      Totals:         0       0       0       0       0       0       0       0
  4939 ;;Total ram usage:        0 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    6
  4942 ;; This function calls:
  4943 ;;		_MTOUCH_Button_Tick
  4944 ;; This function is called by:
  4945 ;;		_MTOUCH_Service_Mainloop
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _MTOUCH_Tick
  4951  0947                     _MTOUCH_Tick:	
  4952  0947                     l3735:	
  4953                           ;incstack = 0
  4954                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4955                           
  4956                           
  4957                           ;mcc_generated_files/mtouch/mtouch.c: 145:     MTOUCH_Button_Tick();
  4958  0947  3189  2154  3189   	fcall	_MTOUCH_Button_Tick
  4959  094A                     l441:	
  4960  094A  0008               	return
  4961  094B                     __end_of_MTOUCH_Tick:	
  4962                           
  4963                           	psect	text23
  4964  0954                     __ptext23:	
  4965 ;; *************** function _MTOUCH_Button_Tick *****************
  4966 ;; Defined at:
  4967 ;;		line 312 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4981 ;;      Params:         0       0       0       0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0       0
  4983 ;;      Temps:          0       0       0       0       0       0       0       0
  4984 ;;      Totals:         0       0       0       0       0       0       0       0
  4985 ;;Total ram usage:        0 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    5
  4988 ;; This function calls:
  4989 ;;		_Button_Tick_helper
  4990 ;; This function is called by:
  4991 ;;		_MTOUCH_Tick
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           
  4996                           ;psect for function _MTOUCH_Button_Tick
  4997  0954                     _MTOUCH_Button_Tick:	
  4998  0954                     l3649:	
  4999                           ;incstack = 0
  5000                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5001                           
  5002                           
  5003                           ;mcc_generated_files/mtouch/mtouch_button.c: 314:     Button_Tick_helper(&mtouch_button[
      +                          0]);
  5004  0954  30B8               	movlw	(low (_mtouch_button| 0))& (0+255)
  5005  0955  318C  2440  3189   	fcall	_Button_Tick_helper
  5006  0958                     l546:	
  5007  0958  0008               	return
  5008  0959                     __end_of_MTOUCH_Button_Tick:	
  5009                           
  5010                           	psect	text24
  5011  0C40                     __ptext24:	
  5012 ;; *************** function _Button_Tick_helper *****************
  5013 ;; Defined at:
  5014 ;;		line 316 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  button          1    wreg     PTR struct .
  5017 ;;		 -> mtouch_button(16), 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  button          1    4[COMMON] PTR struct .
  5020 ;;		 -> mtouch_button(16), 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5030 ;;      Params:         0       0       0       0       0       0       0       0
  5031 ;;      Locals:         1       0       0       0       0       0       0       0
  5032 ;;      Temps:          2       0       0       0       0       0       0       0
  5033 ;;      Totals:         3       0       0       0       0       0       0       0
  5034 ;;Total ram usage:        3 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    4
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_MTOUCH_Button_Tick
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _Button_Tick_helper
  5046  0C40                     _Button_Tick_helper:	
  5047                           
  5048                           ;incstack = 0
  5049                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  5050                           ;Button_Tick_helper@button stored from wreg
  5051  0C40  00F4               	movwf	Button_Tick_helper@button
  5052  0C41                     l3551:	
  5053                           
  5054                           ;mcc_generated_files/mtouch/mtouch_button.c: 316: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 317: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 319:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  5055  0C41  0874               	movf	Button_Tick_helper@button,w
  5056  0C42  3E02               	addlw	2
  5057  0C43  0086               	movwf	6
  5058  0C44  0187               	clrf	7
  5059  0C45  3003               	movlw	3
  5060  0C46  0601               	xorwf	1,w
  5061  0C47  1D03               	btfss	3,2
  5062  0C48  2C4A               	goto	u2931
  5063  0C49  2C4B               	goto	u2930
  5064  0C4A                     u2931:	
  5065  0C4A  2C66               	goto	l551
  5066  0C4B                     u2930:	
  5067  0C4B                     l3553:	
  5068                           
  5069                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 321:         (button->counter)++;
  5070  0C4B  0874               	movf	Button_Tick_helper@button,w
  5071  0C4C  3E0A               	addlw	10
  5072  0C4D  0086               	movwf	6
  5073  0C4E  0187               	clrf	7
  5074  0C4F  3001               	movlw	1
  5075  0C50  0781               	addwf	1,f
  5076  0C51  3141               	addfsr 1,1
  5077  0C52  1803               	skipnc
  5078  0C53  0A81               	incf	1,f
  5079                           
  5080                           ;mcc_generated_files/mtouch/mtouch_button.c: 322:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  5081  0C54  0874               	movf	Button_Tick_helper@button,w
  5082  0C55  3E0A               	addlw	10
  5083  0C56  0086               	movwf	6
  5084  0C57  0187               	clrf	7
  5085  0C58  0016               	moviw fsr1++
  5086  0C59  0401               	iorwf	1,w
  5087  0C5A  1D03               	btfss	3,2
  5088  0C5B  2C5D               	goto	u2941
  5089  0C5C  2C5E               	goto	u2940
  5090  0C5D                     u2941:	
  5091  0C5D  2C66               	goto	l551
  5092  0C5E                     u2940:	
  5093  0C5E                     l3555:	
  5094                           
  5095                           ;mcc_generated_files/mtouch/mtouch_button.c: 323:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 324:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  5096  0C5E  0874               	movf	Button_Tick_helper@button,w
  5097  0C5F  3E0A               	addlw	10
  5098  0C60  0086               	movwf	6
  5099  0C61  0187               	clrf	7
  5100  0C62  30FF               	movlw	255
  5101  0C63  3FC0               	movwi [0]fsr1
  5102  0C64  30FF               	movlw	255
  5103  0C65  3FC1               	movwi [1]fsr1
  5104  0C66                     l551:	
  5105  0C66  0008               	return
  5106  0C67                     __end_of_Button_Tick_helper:	
  5107                           
  5108                           	psect	text25
  5109  0BDD                     __ptext25:	
  5110 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  5111 ;; Defined at:
  5112 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;  sensor          1    4[COMMON] PTR struct .
  5117 ;;		 -> mtouch_sensor(9), 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      void 
  5120 ;; Registers used:
  5121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5127 ;;      Params:         0       0       0       0       0       0       0       0
  5128 ;;      Locals:         1       0       0       0       0       0       0       0
  5129 ;;      Temps:          1       0       0       0       0       0       0       0
  5130 ;;      Totals:         2       0       0       0       0       0       0       0
  5131 ;;Total ram usage:        2 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    5
  5134 ;; This function calls:
  5135 ;;		_Sensor_Sampled_Reset
  5136 ;; This function is called by:
  5137 ;;		_MTOUCH_Initialize
  5138 ;;		_MTOUCH_Service_Mainloop
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           
  5143                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  5144  0BDD                     _MTOUCH_Sensor_Sampled_ResetAll:	
  5145  0BDD                     l4847:	
  5146                           ;incstack = 0
  5147                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  5148                           
  5149                           
  5150                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 936:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[1u -1];sensor++)
  5151  0BDD  3060               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  5152  0BDE  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5153  0BDF  0873               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5154  0BE0  00F4               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  5155  0BE1  3060               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  5156  0BE2  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5157  0BE3  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5158  0BE4  0273               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5159  0BE5  1803               	skipnc
  5160  0BE6  2BE8               	goto	u4761
  5161  0BE7  2BE9               	goto	u4760
  5162  0BE8                     u4761:	
  5163  0BE8  2BEA               	goto	l4851
  5164  0BE9                     u4760:	
  5165  0BE9  2BFA               	goto	l364
  5166  0BEA                     l4851:	
  5167                           
  5168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 938:         Sensor_Sampled_Reset(sensor);
  5169  0BEA  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5170  0BEB  3189  21A4  318B   	fcall	_Sensor_Sampled_Reset
  5171  0BEE                     l4853:	
  5172                           
  5173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     }
  5174  0BEE  3009               	movlw	9
  5175  0BEF  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5176  0BF0  0873               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5177  0BF1  07F4               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  5178  0BF2                     l4855:	
  5179  0BF2  3060               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  5180  0BF3  00F3               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5181  0BF4  0874               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5182  0BF5  0273               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5183  0BF6  1803               	skipnc
  5184  0BF7  2BF9               	goto	u4771
  5185  0BF8  2BFA               	goto	u4770
  5186  0BF9                     u4771:	
  5187  0BF9  2BEA               	goto	l4851
  5188  0BFA                     u4770:	
  5189  0BFA                     l364:	
  5190  0BFA  0008               	return
  5191  0BFB                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  5192                           
  5193                           	psect	text26
  5194  09A4                     __ptext26:	
  5195 ;; *************** function _Sensor_Sampled_Reset *****************
  5196 ;; Defined at:
  5197 ;;		line 947 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  sensor          1    wreg     PTR struct .
  5200 ;;		 -> mtouch_sensor(9), 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;  sensor          1    2[COMMON] PTR struct .
  5203 ;;		 -> mtouch_sensor(9), 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5213 ;;      Params:         0       0       0       0       0       0       0       0
  5214 ;;      Locals:         1       0       0       0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0
  5216 ;;      Totals:         1       0       0       0       0       0       0       0
  5217 ;;Total ram usage:        1 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    4
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_MTOUCH_Sensor_Initialize
  5224 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function _Sensor_Sampled_Reset
  5230  09A4                     _Sensor_Sampled_Reset:	
  5231                           
  5232                           ;incstack = 0
  5233                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5234                           ;Sensor_Sampled_Reset@sensor stored from wreg
  5235  09A4  00F2               	movwf	Sensor_Sampled_Reset@sensor
  5236  09A5                     l4563:	
  5237                           
  5238                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 947: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          948: {;mcc_generated_files/mtouch/mtouch_sensor.c: 949:     sensor->sampled = 0;
  5239  09A5  0872               	movf	Sensor_Sampled_Reset@sensor,w
  5240  09A6  3E08               	addlw	8
  5241  09A7  0086               	movwf	6
  5242  09A8  0187               	clrf	7
  5243  09A9  1001               	bcf	1,0
  5244  09AA                     l370:	
  5245  09AA  0008               	return
  5246  09AB                     __end_of_Sensor_Sampled_Reset:	
  5247                           
  5248                           	psect	text27
  5249  0B58                     __ptext27:	
  5250 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5251 ;; Defined at:
  5252 ;;		line 241 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  group           1    1[BANK1 ] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      _Bool 
  5259 ;; Registers used:
  5260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5266 ;;      Params:         0       0       0       0       0       0       0       0
  5267 ;;      Locals:         0       0       1       0       0       0       0       0
  5268 ;;      Temps:          0       0       1       0       0       0       0       0
  5269 ;;      Totals:         0       0       2       0       0       0       0       0
  5270 ;;Total ram usage:        2 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:   10
  5273 ;; This function calls:
  5274 ;;		_Sensor_Service
  5275 ;; This function is called by:
  5276 ;;		_MTOUCH_Service_Mainloop
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _MTOUCH_Sensor_SampleAll
  5282  0B58                     _MTOUCH_Sensor_SampleAll:	
  5283  0B58                     l4885:	
  5284                           ;incstack = 0
  5285                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5286                           
  5287                           
  5288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 244:     for (group = 0; group < 1u; group++)
  5289  0B58  0021               	movlb	1	; select bank1
  5290  0B59  01DB               	clrf	MTOUCH_Sensor_SampleAll@group^(0+128)
  5291  0B5A                     l4891:	
  5292                           
  5293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 246:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  5294  0B5A  085B               	movf	MTOUCH_Sensor_SampleAll@group^(0+128),w
  5295  0B5B  3183  23FD  318B   	fcall	_Sensor_Service
  5296  0B5E  3A00               	xorlw	0
  5297  0B5F  1903               	skipnz
  5298  0B60  2B62               	goto	u4831
  5299  0B61  2B63               	goto	u4830
  5300  0B62                     u4831:	
  5301  0B62  2B65               	goto	l4897
  5302  0B63                     u4830:	
  5303  0B63                     l4893:	
  5304                           
  5305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:             return 0;
  5306  0B63  3000               	movlw	0
  5307  0B64  2B70               	goto	l143
  5308  0B65                     l4897:	
  5309                           
  5310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 248:     }
  5311  0B65  3001               	movlw	1
  5312  0B66  0021               	movlb	1	; select bank1
  5313  0B67  00DA               	movwf	??_MTOUCH_Sensor_SampleAll^(0+128)
  5314  0B68  085A               	movf	??_MTOUCH_Sensor_SampleAll^(0+128),w
  5315  0B69  07DB               	addwf	MTOUCH_Sensor_SampleAll@group^(0+128),f
  5316  0B6A  085B               	movf	MTOUCH_Sensor_SampleAll@group^(0+128),w
  5317  0B6B  1903               	btfsc	3,2
  5318  0B6C  2B6E               	goto	u4841
  5319  0B6D  2B6F               	goto	u4840
  5320  0B6E                     u4841:	
  5321  0B6E  2B5A               	goto	l4891
  5322  0B6F                     u4840:	
  5323  0B6F                     l4899:	
  5324                           
  5325                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     return 1;
  5326  0B6F  3001               	movlw	1
  5327  0B70                     l143:	
  5328  0B70  0008               	return
  5329  0B71                     __end_of_MTOUCH_Sensor_SampleAll:	
  5330                           
  5331                           	psect	text28
  5332  03FD                     __ptext28:	
  5333 ;; *************** function _Sensor_Service *****************
  5334 ;; Defined at:
  5335 ;;		line 286 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  scanGroup       1    wreg     unsigned char 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  scanGroup       1   39[BANK0 ] unsigned char 
  5340 ;;  sensor_adc2     1   42[BANK0 ] PTR struct .
  5341 ;;		 -> NULL(0), 
  5342 ;;  sensor_adc1     1   41[BANK0 ] PTR struct .
  5343 ;;		 -> mtouch_sensor(9), 
  5344 ;;  error           1   40[BANK0 ] enum E2873
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      enum E2873
  5347 ;; Registers used:
  5348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5354 ;;      Params:         0       0       0       0       0       0       0       0
  5355 ;;      Locals:         0       4       0       0       0       0       0       0
  5356 ;;      Temps:          0       3       0       0       0       0       0       0
  5357 ;;      Totals:         0       7       0       0       0       0       0       0
  5358 ;;Total ram usage:        7 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    9
  5361 ;; This function calls:
  5362 ;;		_Sensor_Acquisition
  5363 ;;		_Sensor_DefaultCallback
  5364 ;;		_Sensor_RawSample_Update
  5365 ;;		_Sensor_isEnabled
  5366 ;;		_Sensor_setSampled
  5367 ;; This function is called by:
  5368 ;;		_MTOUCH_Sensor_SampleAll
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _Sensor_Service
  5374  03FD                     _Sensor_Service:	
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5378                           ;Sensor_Service@scanGroup stored from wreg
  5379  03FD  0020               	movlb	0	; select bank0
  5380  03FE  00C7               	movwf	Sensor_Service@scanGroup
  5381  03FF                     l4807:	
  5382                           
  5383                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 286: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 287: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 288:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 289:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 291:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  5384  03FF  0847               	movf	Sensor_Service@scanGroup,w
  5385  0400  00C4               	movwf	??_Sensor_Service
  5386  0401  01C5               	clrf	??_Sensor_Service+1
  5387  0402  35C4               	lslf	??_Sensor_Service,f
  5388  0403  0DC5               	rlf	??_Sensor_Service+1,f
  5389  0404  3015               	movlw	low (_sensor_scan_group| (0+32768))
  5390  0405  0744               	addwf	??_Sensor_Service,w
  5391  0406  0084               	movwf	4
  5392  0407  3090               	movlw	high (_sensor_scan_group| (0+32768))
  5393  0408  3D45               	addwfc	??_Sensor_Service+1,w
  5394  0409  0085               	movwf	5
  5395  040A  0800               	movf	0,w	;code access
  5396  040B  00C6               	movwf	??_Sensor_Service+2
  5397  040C  0846               	movf	??_Sensor_Service+2,w
  5398  040D  00C9               	movwf	Sensor_Service@sensor_adc1
  5399                           
  5400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 292:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  5401  040E  0847               	movf	Sensor_Service@scanGroup,w
  5402  040F  00C4               	movwf	??_Sensor_Service
  5403  0410  01C5               	clrf	??_Sensor_Service+1
  5404  0411  35C4               	lslf	??_Sensor_Service,f
  5405  0412  0DC5               	rlf	??_Sensor_Service+1,f
  5406  0413  3016               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  5407  0414  0744               	addwf	??_Sensor_Service,w
  5408  0415  0084               	movwf	4
  5409  0416  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  5410  0417  3D45               	addwfc	??_Sensor_Service+1,w
  5411  0418  0085               	movwf	5
  5412  0419  0800               	movf	0,w	;code access
  5413  041A  00C6               	movwf	??_Sensor_Service+2
  5414  041B  0846               	movf	??_Sensor_Service+2,w
  5415  041C  00CA               	movwf	Sensor_Service@sensor_adc2
  5416  041D                     l4809:	
  5417                           
  5418                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 294:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  5419  041D  084A               	movf	Sensor_Service@sensor_adc2,w
  5420  041E  00C4               	movwf	??_Sensor_Service
  5421  041F  0844               	movf	??_Sensor_Service,w
  5422  0420  00C0               	movwf	Sensor_Acquisition@sensor_adc2
  5423  0421  0849               	movf	Sensor_Service@sensor_adc1,w
  5424  0422  3186  26BA  3183   	fcall	_Sensor_Acquisition
  5425  0425  0020               	movlb	0	; select bank0
  5426  0426  00C5               	movwf	??_Sensor_Service+1
  5427  0427  0845               	movf	??_Sensor_Service+1,w
  5428  0428  00C8               	movwf	Sensor_Service@error
  5429                           
  5430                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 297:     switch(error)
  5431  0429  2C72               	goto	l4833
  5432  042A                     l4811:	
  5433                           
  5434                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 300:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 301:             if(Sensor_isEnabled(sensor_adc1))
  5435  042A  0849               	movf	Sensor_Service@sensor_adc1,w
  5436  042B  318A  226D  3183   	fcall	_Sensor_isEnabled
  5437  042E  3A00               	xorlw	0
  5438  042F  1903               	skipnz
  5439  0430  2C32               	goto	u4721
  5440  0431  2C33               	goto	u4720
  5441  0432                     u4721:	
  5442  0432  2C4D               	goto	l4821
  5443  0433                     u4720:	
  5444  0433                     l4813:	
  5445                           
  5446                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 302:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 307:                 if(!lowpowerActivated)
  5447  0433  0020               	movlb	0	; select bank0
  5448  0434  0859               	movf	_lowpowerActivated,w
  5449  0435  1D03               	btfss	3,2
  5450  0436  2C38               	goto	u4731
  5451  0437  2C39               	goto	u4730
  5452  0438                     u4731:	
  5453  0438  2C3D               	goto	l4817
  5454  0439                     u4730:	
  5455  0439                     l4815:	
  5456                           
  5457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 308:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 309:                     Sensor_RawSample_Update(sensor_adc1);
  5458  0439  0849               	movf	Sensor_Service@sensor_adc1,w
  5459  043A  318C  2467  3183   	fcall	_Sensor_RawSample_Update
  5460  043D                     l4817:	
  5461                           
  5462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:                 Sensor_setSampled(sens
      +                          or_adc1);
  5463  043D  0020               	movlb	0	; select bank0
  5464  043E  0849               	movf	Sensor_Service@sensor_adc1,w
  5465  043F  3189  219D  3183   	fcall	_Sensor_setSampled
  5466  0442                     l4819:	
  5467                           
  5468                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 312:                 callback_sampled(senso
      +                          r_adc1->sensor);
  5469  0442  0020               	movlb	0	; select bank0
  5470  0443  0849               	movf	Sensor_Service@sensor_adc1,w
  5471  0444  0086               	movwf	6
  5472  0445  0187               	clrf	7
  5473  0446  0801               	movf	1,w
  5474  0447  00C4               	movwf	??_Sensor_Service
  5475  0448  0844               	movf	??_Sensor_Service,w
  5476  0449  00F2               	movwf	Sensor_DefaultCallback@sensor
  5477  044A  3189  2134  3183   	fcall	_Sensor_DefaultCallback
  5478  044D                     l4821:	
  5479                           
  5480                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  5481  044D  0020               	movlb	0	; select bank0
  5482  044E  084A               	movf	Sensor_Service@sensor_adc2,w
  5483  044F  318A  226D  3183   	fcall	_Sensor_isEnabled
  5484  0452  3A00               	xorlw	0
  5485  0453  1903               	skipnz
  5486  0454  2C56               	goto	u4741
  5487  0455  2C57               	goto	u4740
  5488  0456                     u4741:	
  5489  0456  2C95               	goto	l4835
  5490  0457                     u4740:	
  5491  0457                     l4823:	
  5492                           
  5493                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 315:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 316:                 if(!lowpowerActivated)
  5494  0457  0020               	movlb	0	; select bank0
  5495  0458  0859               	movf	_lowpowerActivated,w
  5496  0459  1D03               	btfss	3,2
  5497  045A  2C5C               	goto	u4751
  5498  045B  2C5D               	goto	u4750
  5499  045C                     u4751:	
  5500  045C  2C61               	goto	l4827
  5501  045D                     u4750:	
  5502  045D                     l4825:	
  5503                           
  5504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 318:                     Sensor_RawSample_Update(sensor_adc2);
  5505  045D  084A               	movf	Sensor_Service@sensor_adc2,w
  5506  045E  318C  2467  3183   	fcall	_Sensor_RawSample_Update
  5507  0461                     l4827:	
  5508                           
  5509                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 320:                 Sensor_setSampled(sens
      +                          or_adc2);
  5510  0461  0020               	movlb	0	; select bank0
  5511  0462  084A               	movf	Sensor_Service@sensor_adc2,w
  5512  0463  3189  219D  3183   	fcall	_Sensor_setSampled
  5513  0466                     l4829:	
  5514                           
  5515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 321:                 callback_sampled(senso
      +                          r_adc2->sensor);
  5516  0466  0020               	movlb	0	; select bank0
  5517  0467  084A               	movf	Sensor_Service@sensor_adc2,w
  5518  0468  0086               	movwf	6
  5519  0469  0187               	clrf	7
  5520  046A  0801               	movf	1,w
  5521  046B  00C4               	movwf	??_Sensor_Service
  5522  046C  0844               	movf	??_Sensor_Service,w
  5523  046D  00F2               	movwf	Sensor_DefaultCallback@sensor
  5524  046E  3189  2134  3183   	fcall	_Sensor_DefaultCallback
  5525  0471  2C95               	goto	l4835
  5526  0472                     l4833:	
  5527  0472  0848               	movf	Sensor_Service@error,w
  5528  0473  00C4               	movwf	??_Sensor_Service
  5529  0474  01C5               	clrf	??_Sensor_Service+1
  5530  0475  1BC4               	btfsc	??_Sensor_Service,7
  5531  0476  03C5               	decf	??_Sensor_Service+1,f
  5532                           
  5533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5534                           ; Switch size 1, requested type "simple"
  5535                           ; Number of cases is 2, Range of values is 0 to 255
  5536                           ; switch strategies available:
  5537                           ; Name         Instructions Cycles
  5538                           ; simple_byte            7     4 (average)
  5539                           ; jumptable            260     6 (fixed)
  5540                           ;	Chosen strategy is simple_byte
  5541  0477  0845               	movf	??_Sensor_Service+1,w
  5542  0478  3A00               	xorlw	0	; case 0
  5543  0479  1903               	skipnz
  5544  047A  2C7F               	goto	l5115
  5545  047B  3AFF               	xorlw	255	; case 255
  5546  047C  1903               	skipnz
  5547  047D  2C84               	goto	l5117
  5548  047E  2C95               	goto	l4835
  5549  047F                     l5115:	
  5550                           
  5551                           ; Switch size 1, requested type "simple"
  5552                           ; Number of cases is 1, Range of values is 0 to 0
  5553                           ; switch strategies available:
  5554                           ; Name         Instructions Cycles
  5555                           ; simple_byte            4     3 (average)
  5556                           ; direct_byte            8     6 (fixed)
  5557                           ; jumptable            260     6 (fixed)
  5558                           ;	Chosen strategy is simple_byte
  5559  047F  0844               	movf	??_Sensor_Service,w
  5560  0480  3A00               	xorlw	0	; case 0
  5561  0481  1903               	skipnz
  5562  0482  2C2A               	goto	l4811
  5563  0483  2C95               	goto	l4835
  5564  0484                     l5117:	
  5565                           
  5566                           ; Switch size 1, requested type "simple"
  5567                           ; Number of cases is 5, Range of values is 251 to 255
  5568                           ; switch strategies available:
  5569                           ; Name         Instructions Cycles
  5570                           ; direct_byte           15     5 (fixed)
  5571                           ; simple_byte           16     9 (average)
  5572                           ; jumptable            263     9 (fixed)
  5573                           ;	Chosen strategy is simple_byte
  5574  0484  0844               	movf	??_Sensor_Service,w
  5575  0485  3AFB               	xorlw	251	; case 251
  5576  0486  1903               	skipnz
  5577  0487  2C95               	goto	l4835
  5578  0488  3A07               	xorlw	7	; case 252
  5579  0489  1903               	skipnz
  5580  048A  2C95               	goto	l4835
  5581  048B  3A01               	xorlw	1	; case 253
  5582  048C  1903               	skipnz
  5583  048D  2C95               	goto	l4835
  5584  048E  3A03               	xorlw	3	; case 254
  5585  048F  1903               	skipnz
  5586  0490  2C95               	goto	l4835
  5587  0491  3A01               	xorlw	1	; case 255
  5588  0492  1903               	skipnz
  5589  0493  2C95               	goto	l4835
  5590  0494  2C95               	goto	l4835
  5591  0495                     l4835:	
  5592                           
  5593                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:     return error;
  5594  0495  0020               	movlb	0	; select bank0
  5595  0496  0848               	movf	Sensor_Service@error,w
  5596  0497                     l171:	
  5597  0497  0008               	return
  5598  0498                     __end_of_Sensor_Service:	
  5599                           
  5600                           	psect	text29
  5601  099D                     __ptext29:	
  5602 ;; *************** function _Sensor_setSampled *****************
  5603 ;; Defined at:
  5604 ;;		line 952 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  sensor          1    wreg     PTR struct .
  5607 ;;		 -> NULL(0), mtouch_sensor(9), 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  sensor          1    2[COMMON] PTR struct .
  5610 ;;		 -> NULL(0), mtouch_sensor(9), 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5620 ;;      Params:         0       0       0       0       0       0       0       0
  5621 ;;      Locals:         1       0       0       0       0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0       0
  5623 ;;      Totals:         1       0       0       0       0       0       0       0
  5624 ;;Total ram usage:        1 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    4
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_Sensor_Service
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           
  5635                           ;psect for function _Sensor_setSampled
  5636  099D                     _Sensor_setSampled:	
  5637                           
  5638                           ;incstack = 0
  5639                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5640                           ;Sensor_setSampled@sensor stored from wreg
  5641  099D  00F2               	movwf	Sensor_setSampled@sensor
  5642  099E                     l4705:	
  5643                           
  5644                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 953
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     sensor->sampled = 1;
  5645  099E  0872               	movf	Sensor_setSampled@sensor,w
  5646  099F  3E08               	addlw	8
  5647  09A0  0086               	movwf	6
  5648  09A1  0187               	clrf	7
  5649  09A2  1401               	bsf	1,0
  5650  09A3                     l373:	
  5651  09A3  0008               	return
  5652  09A4                     __end_of_Sensor_setSampled:	
  5653                           
  5654                           	psect	text30
  5655  0C67                     __ptext30:	
  5656 ;; *************** function _Sensor_RawSample_Update *****************
  5657 ;; Defined at:
  5658 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  sensor          1    wreg     PTR struct .
  5661 ;;		 -> NULL(0), mtouch_sensor(9), 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  sensor          1    8[COMMON] PTR struct .
  5664 ;;		 -> NULL(0), mtouch_sensor(9), 
  5665 ;;  adcIndex        1    7[COMMON] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5675 ;;      Params:         0       0       0       0       0       0       0       0
  5676 ;;      Locals:         2       0       0       0       0       0       0       0
  5677 ;;      Temps:          1       0       0       0       0       0       0       0
  5678 ;;      Totals:         3       0       0       0       0       0       0       0
  5679 ;;Total ram usage:        3 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    5
  5682 ;; This function calls:
  5683 ;;		_Sensor_getScanGroupIndex
  5684 ;; This function is called by:
  5685 ;;		_Sensor_Service
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _Sensor_RawSample_Update
  5691  0C67                     _Sensor_RawSample_Update:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5695                           ;Sensor_RawSample_Update@sensor stored from wreg
  5696  0C67  00F8               	movwf	Sensor_RawSample_Update@sensor
  5697  0C68                     l4693:	
  5698                           
  5699                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 785: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 786: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 787:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  5700  0C68  0878               	movf	Sensor_RawSample_Update@sensor,w
  5701  0C69  318D  2576  318C   	fcall	_Sensor_getScanGroupIndex
  5702  0C6C  00F6               	movwf	??_Sensor_RawSample_Update
  5703  0C6D  0876               	movf	??_Sensor_RawSample_Update,w
  5704  0C6E  00F7               	movwf	Sensor_RawSample_Update@adcIndex
  5705  0C6F                     l4695:	
  5706                           
  5707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     if (INTCONbits.GIE == (uint8_t)1)
  5708  0C6F  1F8B               	btfss	11,7	;volatile
  5709  0C70  2C72               	goto	u4531
  5710  0C71  2C73               	goto	u4530
  5711  0C72                     u4531:	
  5712  0C72  2C82               	goto	l4703
  5713  0C73                     u4530:	
  5714  0C73                     l4697:	
  5715                           
  5716                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 791:         INTCONbits.GIE = (uint8_t)0;
  5717  0C73  138B               	bcf	11,7	;volatile
  5718  0C74                     l4699:	
  5719                           
  5720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  5721  0C74  3577               	lslf	Sensor_RawSample_Update@adcIndex,w
  5722  0C75  3E4B               	addlw	(low (_packet_sample| 0))& (0+255)
  5723  0C76  0086               	movwf	6
  5724  0C77  0187               	clrf	7
  5725  0C78  0878               	movf	Sensor_RawSample_Update@sensor,w
  5726  0C79  3E06               	addlw	6
  5727  0C7A  0084               	movwf	4
  5728  0C7B  0185               	clrf	5
  5729  0C7C  3F40               	moviw [0]fsr1
  5730  0C7D  3F80               	movwi [0]fsr0
  5731  0C7E  3F41               	moviw [1]fsr1
  5732  0C7F  3F81               	movwi [1]fsr0
  5733  0C80                     l4701:	
  5734                           
  5735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 793:         INTCONbits.GIE = (uint8_t)1;
  5736  0C80  178B               	bsf	11,7	;volatile
  5737                           
  5738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     }
  5739  0C81  2C8E               	goto	l300
  5740  0C82                     l4703:	
  5741                           
  5742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 796:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 797:         sensor->rawSample = packet_sample[adcIndex];
  5743  0C82  3577               	lslf	Sensor_RawSample_Update@adcIndex,w
  5744  0C83  3E4B               	addlw	(low (_packet_sample| 0))& (0+255)
  5745  0C84  0086               	movwf	6
  5746  0C85  0187               	clrf	7
  5747  0C86  0878               	movf	Sensor_RawSample_Update@sensor,w
  5748  0C87  3E06               	addlw	6
  5749  0C88  0084               	movwf	4
  5750  0C89  0185               	clrf	5
  5751  0C8A  3F40               	moviw [0]fsr1
  5752  0C8B  3F80               	movwi [0]fsr0
  5753  0C8C  3F41               	moviw [1]fsr1
  5754  0C8D  3F81               	movwi [1]fsr0
  5755  0C8E                     l300:	
  5756  0C8E  0008               	return
  5757  0C8F                     __end_of_Sensor_RawSample_Update:	
  5758                           
  5759                           	psect	text31
  5760  0934                     __ptext31:	
  5761 ;; *************** function _Sensor_DefaultCallback *****************
  5762 ;; Defined at:
  5763 ;;		line 806 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  sensor          1    2[COMMON] enum E2871
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		None
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5777 ;;      Params:         1       0       0       0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0
  5780 ;;      Totals:         1       0       0       0       0       0       0       0
  5781 ;;Total ram usage:        1 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    4
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_Sensor_Service
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function _Sensor_DefaultCallback
  5793  0934                     _Sensor_DefaultCallback:	
  5794  0934                     l303:	
  5795                           ;incstack = 0
  5796                           ; Regs used in _Sensor_DefaultCallback: []
  5797                           
  5798  0934  0008               	return
  5799  0935                     __end_of_Sensor_DefaultCallback:	
  5800                           
  5801                           	psect	text32
  5802  06BA                     __ptext32:	
  5803 ;; *************** function _Sensor_Acquisition *****************
  5804 ;; Defined at:
  5805 ;;		line 355 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  sensor_adc1     1    wreg     PTR struct .
  5808 ;;		 -> mtouch_sensor(9), 
  5809 ;;  sensor_adc2     1   32[BANK0 ] PTR struct .
  5810 ;;		 -> NULL(0), 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  sensor_adc1     1   35[BANK0 ] PTR struct .
  5813 ;;		 -> mtouch_sensor(9), 
  5814 ;;  retry           1   34[BANK0 ] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      enum E2873
  5817 ;; Registers used:
  5818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5824 ;;      Params:         0       1       0       0       0       0       0       0
  5825 ;;      Locals:         0       2       0       0       0       0       0       0
  5826 ;;      Temps:          0       1       0       0       0       0       0       0
  5827 ;;      Totals:         0       4       0       0       0       0       0       0
  5828 ;;Total ram usage:        4 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    8
  5831 ;; This function calls:
  5832 ;;		_Sensor_Acq_ExecutePacket
  5833 ;;		_Sensor_Scanfrequency_Evaluation
  5834 ;;		_Sensor_isActive
  5835 ;;		_Sensor_isCalibrated
  5836 ;;		_Sensor_postAcquisitionProcess
  5837 ;; This function is called by:
  5838 ;;		_Sensor_Service
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           
  5843                           ;psect for function _Sensor_Acquisition
  5844  06BA                     _Sensor_Acquisition:	
  5845                           
  5846                           ;incstack = 0
  5847                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5848                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  5849  06BA  0020               	movlb	0	; select bank0
  5850  06BB  00C3               	movwf	Sensor_Acquisition@sensor_adc1
  5851  06BC                     l4651:	
  5852                           
  5853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 355: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 356: {;mcc_generated_files/mtouch/mtouch_sensor.c: 357:     
      +                          uint8_t retry = (uint8_t)5;
  5854  06BC  3005               	movlw	5
  5855  06BD  00C1               	movwf	??_Sensor_Acquisition
  5856  06BE  0841               	movf	??_Sensor_Acquisition,w
  5857  06BF  00C2               	movwf	Sensor_Acquisition@retry
  5858  06C0                     l4653:	
  5859                           
  5860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  5861  06C0  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  5862  06C1  1D03               	btfss	3,2
  5863  06C2  2EC4               	goto	u4431
  5864  06C3  2EC5               	goto	u4430
  5865  06C4                     u4431:	
  5866  06C4  2ED6               	goto	l4667
  5867  06C5                     u4430:	
  5868  06C5                     l4655:	
  5869  06C5  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  5870  06C6  1D03               	btfss	3,2
  5871  06C7  2EC9               	goto	u4441
  5872  06C8  2ECA               	goto	u4440
  5873  06C9                     u4441:	
  5874  06C9  2ED6               	goto	l4667
  5875  06CA                     u4440:	
  5876  06CA                     l4657:	
  5877                           
  5878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 362:         return MTOUCH_SENSOR_ERROR_invalid_index;
  5879  06CA  30FF               	movlw	255
  5880  06CB  2F2A               	goto	l182
  5881  06CC                     l4661:	
  5882                           
  5883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 372:         retry--;
  5884  06CC  3001               	movlw	1
  5885  06CD  0020               	movlb	0	; select bank0
  5886  06CE  02C2               	subwf	Sensor_Acquisition@retry,f
  5887                           
  5888                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 373:         if(retry == 0)
  5889  06CF  0842               	movf	Sensor_Acquisition@retry,w
  5890  06D0  1D03               	btfss	3,2
  5891  06D1  2ED3               	goto	u4451
  5892  06D2  2ED4               	goto	u4450
  5893  06D3                     u4451:	
  5894  06D3  2ED6               	goto	l4667
  5895  06D4                     u4450:	
  5896  06D4                     l4663:	
  5897                           
  5898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 374:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 375:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5899  06D4  30FC               	movlw	252
  5900  06D5  2F2A               	goto	l182
  5901  06D6                     l4667:	
  5902                           
  5903                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  5904  06D6  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  5905  06D7  00C1               	movwf	??_Sensor_Acquisition
  5906  06D8  0841               	movf	??_Sensor_Acquisition,w
  5907  06D9  00A4               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5908  06DA  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  5909  06DB  3180  206B  3186   	fcall	_Sensor_Acq_ExecutePacket
  5910  06DE  3A00               	xorlw	0
  5911  06DF  1D03               	skipz
  5912  06E0  2EE2               	goto	u4461
  5913  06E1  2EE3               	goto	u4460
  5914  06E2                     u4461:	
  5915  06E2  2ECC               	goto	l4661
  5916  06E3                     u4460:	
  5917  06E3                     l4669:	
  5918                           
  5919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 379:     if(sensor_adc1 != ((void*)0))
  5920  06E3  0020               	movlb	0	; select bank0
  5921  06E4  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  5922  06E5  1903               	btfsc	3,2
  5923  06E6  2EE8               	goto	u4471
  5924  06E7  2EE9               	goto	u4470
  5925  06E8                     u4471:	
  5926  06E8  2EED               	goto	l4673
  5927  06E9                     u4470:	
  5928  06E9                     l4671:	
  5929                           
  5930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 381:         Sensor_postAcquisitionProcess(sensor_adc1);
  5931  06E9  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  5932  06EA  318E  2621  3186   	fcall	_Sensor_postAcquisitionProcess
  5933  06ED                     l4673:	
  5934                           
  5935                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 384:     if(sensor_adc2 !=((void*)0))
  5936  06ED  0020               	movlb	0	; select bank0
  5937  06EE  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  5938  06EF  1903               	btfsc	3,2
  5939  06F0  2EF2               	goto	u4481
  5940  06F1  2EF3               	goto	u4480
  5941  06F2                     u4481:	
  5942  06F2  2EF7               	goto	l4677
  5943  06F3                     u4480:	
  5944  06F3                     l4675:	
  5945                           
  5946                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 386:         Sensor_postAcquisitionProcess(sensor_adc2);
  5947  06F3  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  5948  06F4  318E  2621  3186   	fcall	_Sensor_postAcquisitionProcess
  5949  06F7                     l4677:	
  5950                           
  5951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 389:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  5952  06F7  0020               	movlb	0	; select bank0
  5953  06F8  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  5954  06F9  318A  220B  3186   	fcall	_Sensor_isActive
  5955  06FC  3A00               	xorlw	0
  5956  06FD  1903               	skipnz
  5957  06FE  2F00               	goto	u4491
  5958  06FF  2F01               	goto	u4490
  5959  0700                     u4491:	
  5960  0700  2F0B               	goto	l4681
  5961  0701                     u4490:	
  5962  0701                     l4679:	
  5963  0701  0020               	movlb	0	; select bank0
  5964  0702  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  5965  0703  3189  21C4  3186   	fcall	_Sensor_isCalibrated
  5966  0706  3A00               	xorlw	0
  5967  0707  1D03               	skipz
  5968  0708  2F0A               	goto	u4501
  5969  0709  2F0B               	goto	u4500
  5970  070A                     u4501:	
  5971  070A  2F1F               	goto	l4685
  5972  070B                     u4500:	
  5973  070B                     l4681:	
  5974  070B  0020               	movlb	0	; select bank0
  5975  070C  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  5976  070D  318A  220B  3186   	fcall	_Sensor_isActive
  5977  0710  3A00               	xorlw	0
  5978  0711  1903               	skipnz
  5979  0712  2F14               	goto	u4511
  5980  0713  2F15               	goto	u4510
  5981  0714                     u4511:	
  5982  0714  2F29               	goto	l4689
  5983  0715                     u4510:	
  5984  0715                     l4683:	
  5985  0715  0020               	movlb	0	; select bank0
  5986  0716  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  5987  0717  3189  21C4  3186   	fcall	_Sensor_isCalibrated
  5988  071A  3A00               	xorlw	0
  5989  071B  1903               	skipnz
  5990  071C  2F1E               	goto	u4521
  5991  071D  2F1F               	goto	u4520
  5992  071E                     u4521:	
  5993  071E  2F29               	goto	l4689
  5994  071F                     u4520:	
  5995  071F                     l4685:	
  5996                           
  5997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 392:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  5998  071F  0020               	movlb	0	; select bank0
  5999  0720  0840               	movf	Sensor_Acquisition@sensor_adc2,w
  6000  0721  00C1               	movwf	??_Sensor_Acquisition
  6001  0722  0841               	movf	??_Sensor_Acquisition,w
  6002  0723  00B3               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  6003  0724  0843               	movf	Sensor_Acquisition@sensor_adc1,w
  6004  0725  3186  2639  3186   	fcall	_Sensor_Scanfrequency_Evaluation
  6005  0728  2F2A               	goto	l182
  6006  0729                     l4689:	
  6007                           
  6008                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     return MTOUCH_SENSOR_ERROR_none;
  6009  0729  3000               	movlw	0
  6010  072A                     l182:	
  6011  072A  0008               	return
  6012  072B                     __end_of_Sensor_Acquisition:	
  6013                           
  6014                           	psect	text33
  6015  0E21                     __ptext33:	
  6016 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6017 ;; Defined at:
  6018 ;;		line 398 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  sensor          1    wreg     PTR struct .
  6021 ;;		 -> NULL(0), mtouch_sensor(9), 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  sensor          1    3[BANK0 ] PTR struct .
  6024 ;;		 -> NULL(0), mtouch_sensor(9), 
  6025 ;;  deviation       2    1[BANK0 ] unsigned short 
  6026 ;;  adcIndex        1    0[BANK0 ] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6036 ;;      Params:         0       0       0       0       0       0       0       0
  6037 ;;      Locals:         0       4       0       0       0       0       0       0
  6038 ;;      Temps:          1       0       0       0       0       0       0       0
  6039 ;;      Totals:         1       4       0       0       0       0       0       0
  6040 ;;Total ram usage:        5 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    5
  6043 ;; This function calls:
  6044 ;;		_Sensor_getScanGroupIndex
  6045 ;;		_Sensor_isEnabled
  6046 ;;		_Sensor_setActive
  6047 ;;		_Sensor_setInactive
  6048 ;;		_abs
  6049 ;; This function is called by:
  6050 ;;		_Sensor_Acquisition
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _Sensor_postAcquisitionProcess
  6056  0E21                     _Sensor_postAcquisitionProcess:	
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6060                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  6061  0E21  0020               	movlb	0	; select bank0
  6062  0E22  00A3               	movwf	Sensor_postAcquisitionProcess@sensor
  6063  0E23                     l4565:	
  6064                           
  6065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 399: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 400:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 401:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  6066  0E23  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  6067  0E24  318D  2576  318E   	fcall	_Sensor_getScanGroupIndex
  6068  0E27  00F6               	movwf	??_Sensor_postAcquisitionProcess
  6069  0E28  0876               	movf	??_Sensor_postAcquisitionProcess,w
  6070  0E29  0020               	movlb	0	; select bank0
  6071  0E2A  00A0               	movwf	Sensor_postAcquisitionProcess@adcIndex
  6072  0E2B                     l4567:	
  6073                           
  6074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 403:     if(Sensor_isEnabled(sensor))
  6075  0E2B  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  6076  0E2C  318A  226D  318E   	fcall	_Sensor_isEnabled
  6077  0E2F  3A00               	xorlw	0
  6078  0E30  1903               	skipnz
  6079  0E31  2E33               	goto	u4311
  6080  0E32  2E34               	goto	u4310
  6081  0E33                     u4311:	
  6082  0E33  2E4D               	goto	l4571
  6083  0E34                     u4310:	
  6084  0E34                     l4569:	
  6085                           
  6086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  6087  0E34  0020               	movlb	0	; select bank0
  6088  0E35  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  6089  0E36  3E06               	addlw	6
  6090  0E37  0086               	movwf	6
  6091  0E38  0187               	clrf	7
  6092  0E39  3520               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  6093  0E3A  3E4B               	addlw	(low (_packet_sample| 0))& (0+255)
  6094  0E3B  0084               	movwf	4
  6095  0E3C  0185               	clrf	5
  6096  0E3D  3F40               	moviw [0]fsr1
  6097  0E3E  0200               	subwf	0,w
  6098  0E3F  00F2               	movwf	abs@a
  6099  0E40  3101               	addfsr 0,1
  6100  0E41  3F41               	moviw [1]fsr1
  6101  0E42  3B00               	subwfb	0,w
  6102  0E43  00F3               	movwf	abs@a+1
  6103  0E44  318B  238B  318E   	fcall	_abs
  6104  0E47  0873               	movf	?_abs+1,w
  6105  0E48  0020               	movlb	0	; select bank0
  6106  0E49  00A2               	movwf	Sensor_postAcquisitionProcess@deviation+1
  6107  0E4A  0872               	movf	?_abs,w
  6108  0E4B  00A1               	movwf	Sensor_postAcquisitionProcess@deviation
  6109  0E4C  2E50               	goto	l4573
  6110  0E4D                     l4571:	
  6111                           
  6112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:         deviation = 0;
  6113  0E4D  0020               	movlb	0	; select bank0
  6114  0E4E  01A1               	clrf	Sensor_postAcquisitionProcess@deviation
  6115  0E4F  01A2               	clrf	Sensor_postAcquisitionProcess@deviation+1
  6116  0E50                     l4573:	
  6117                           
  6118                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     if(deviation > 100u)
  6119  0E50  3000               	movlw	0
  6120  0E51  0222               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  6121  0E52  3065               	movlw	101
  6122  0E53  1903               	skipnz
  6123  0E54  0221               	subwf	Sensor_postAcquisitionProcess@deviation,w
  6124  0E55  1C03               	skipc
  6125  0E56  2E58               	goto	u4321
  6126  0E57  2E59               	goto	u4320
  6127  0E58                     u4321:	
  6128  0E58  2E5E               	goto	l4577
  6129  0E59                     u4320:	
  6130  0E59                     l4575:	
  6131                           
  6132                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:         Sensor_setActive(sensor);
  6133  0E59  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  6134  0E5A  3189  218F  318E   	fcall	_Sensor_setActive
  6135  0E5D  2E62               	goto	l200
  6136  0E5E                     l4577:	
  6137                           
  6138                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 411:         Sensor_setInactive(sensor);
  6139  0E5E  0823               	movf	Sensor_postAcquisitionProcess@sensor,w
  6140  0E5F  3189  2196  318E   	fcall	_Sensor_setInactive
  6141  0E62                     l200:	
  6142  0E62  0008               	return
  6143  0E63                     __end_of_Sensor_postAcquisitionProcess:	
  6144                           
  6145                           	psect	text34
  6146  0996                     __ptext34:	
  6147 ;; *************** function _Sensor_setInactive *****************
  6148 ;; Defined at:
  6149 ;;		line 860 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  sensor          1    wreg     PTR struct .
  6152 ;;		 -> NULL(0), mtouch_sensor(9), 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  sensor          1    2[COMMON] PTR struct .
  6155 ;;		 -> NULL(0), mtouch_sensor(9), 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      void 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6165 ;;      Params:         0       0       0       0       0       0       0       0
  6166 ;;      Locals:         1       0       0       0       0       0       0       0
  6167 ;;      Temps:          0       0       0       0       0       0       0       0
  6168 ;;      Totals:         1       0       0       0       0       0       0       0
  6169 ;;Total ram usage:        1 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    4
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		_Sensor_postAcquisitionProcess
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function _Sensor_setInactive
  6181  0996                     _Sensor_setInactive:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6185                           ;Sensor_setInactive@sensor stored from wreg
  6186  0996  00F2               	movwf	Sensor_setInactive@sensor
  6187  0997                     l4545:	
  6188                           
  6189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 86
      +                          1: {;mcc_generated_files/mtouch/mtouch_sensor.c: 862:     sensor->active = 0;
  6190  0997  0872               	movf	Sensor_setInactive@sensor,w
  6191  0998  3E08               	addlw	8
  6192  0999  0086               	movwf	6
  6193  099A  0187               	clrf	7
  6194  099B  1081               	bcf	1,1
  6195  099C                     l330:	
  6196  099C  0008               	return
  6197  099D                     __end_of_Sensor_setInactive:	
  6198                           
  6199                           	psect	text35
  6200  098F                     __ptext35:	
  6201 ;; *************** function _Sensor_setActive *****************
  6202 ;; Defined at:
  6203 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  sensor          1    wreg     PTR struct .
  6206 ;;		 -> NULL(0), mtouch_sensor(9), 
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;  sensor          1    2[COMMON] PTR struct .
  6209 ;;		 -> NULL(0), mtouch_sensor(9), 
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6219 ;;      Params:         0       0       0       0       0       0       0       0
  6220 ;;      Locals:         1       0       0       0       0       0       0       0
  6221 ;;      Temps:          0       0       0       0       0       0       0       0
  6222 ;;      Totals:         1       0       0       0       0       0       0       0
  6223 ;;Total ram usage:        1 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    4
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_Sensor_postAcquisitionProcess
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           
  6234                           ;psect for function _Sensor_setActive
  6235  098F                     _Sensor_setActive:	
  6236                           
  6237                           ;incstack = 0
  6238                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6239                           ;Sensor_setActive@sensor stored from wreg
  6240  098F  00F2               	movwf	Sensor_setActive@sensor
  6241  0990                     l4543:	
  6242                           
  6243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 857:     sensor->active = 1;
  6244  0990  0872               	movf	Sensor_setActive@sensor,w
  6245  0991  3E08               	addlw	8
  6246  0992  0086               	movwf	6
  6247  0993  0187               	clrf	7
  6248  0994  1481               	bsf	1,1
  6249  0995                     l327:	
  6250  0995  0008               	return
  6251  0996                     __end_of_Sensor_setActive:	
  6252                           
  6253                           	psect	text36
  6254  0639                     __ptext36:	
  6255 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  6256 ;; Defined at:
  6257 ;;		line 716 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  sensor_adc1     1    wreg     PTR struct .
  6260 ;;		 -> mtouch_sensor(9), 
  6261 ;;  sensor_adc2     1   19[BANK0 ] PTR struct .
  6262 ;;		 -> NULL(0), 
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;  sensor_adc1     1   22[BANK0 ] PTR struct .
  6265 ;;		 -> mtouch_sensor(9), 
  6266 ;;  best_packet_    4   27[BANK0 ] unsigned short [2]
  6267 ;;  packet_noise    2   23[BANK0 ] unsigned short 
  6268 ;;  i               1   31[BANK0 ] unsigned char 
  6269 ;;  retry           1   26[BANK0 ] unsigned char 
  6270 ;;  best_sample_    1   25[BANK0 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      enum E2873
  6273 ;; Registers used:
  6274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6280 ;;      Params:         0       1       0       0       0       0       0       0
  6281 ;;      Locals:         0      10       0       0       0       0       0       0
  6282 ;;      Temps:          0       2       0       0       0       0       0       0
  6283 ;;      Totals:         0      13       0       0       0       0       0       0
  6284 ;;Total ram usage:       13 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    7
  6287 ;; This function calls:
  6288 ;;		_Sensor_Acq_ExecutePacket
  6289 ;; This function is called by:
  6290 ;;		_Sensor_Acquisition
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           
  6295                           ;psect for function _Sensor_Scanfrequency_Evaluation
  6296  0639                     _Sensor_Scanfrequency_Evaluation:	
  6297                           
  6298                           ;incstack = 0
  6299                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6300                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  6301  0639  0020               	movlb	0	; select bank0
  6302  063A  00B6               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  6303  063B                     l4579:	
  6304                           
  6305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 716: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 717: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 718:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 719:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 720:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 721:     mtouch_sensor_sampleperiod_t best_sample_period;
  6306  063B  0852               	movf	_packet_noise+1,w
  6307  063C  00B5               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  6308  063D  0851               	movf	_packet_noise,w
  6309  063E  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6310  063F  36B5               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6311  0640  0CB4               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6312  0641  36B5               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6313  0642  0CB4               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6314  0643  0851               	movf	_packet_noise,w
  6315  0644  0734               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  6316  0645  00B7               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6317  0646  0852               	movf	_packet_noise+1,w
  6318  0647  3D35               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  6319  0648  00B8               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6320  0649                     l4581:	
  6321                           
  6322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:     best_sample_period = sample_period
      +                          ;
  6323  0649  085F               	movf	_sample_period,w
  6324  064A  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6325  064B  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6326  064C  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6327  064D                     l4583:	
  6328                           
  6329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 727:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  6330  064D  084C               	movf	_packet_sample+1,w
  6331  064E  00BC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6332  064F  084B               	movf	_packet_sample,w
  6333  0650  00BB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6334  0651                     l4585:	
  6335                           
  6336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  6337  0651  084E               	movf	_packet_sample+3,w
  6338  0652  00BE               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  6339  0653  084D               	movf	_packet_sample+2,w
  6340  0654  00BD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  6341  0655                     l4587:	
  6342                           
  6343                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 730:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  6344  0655  01BF               	clrf	Sensor_Scanfrequency_Evaluation@i
  6345  0656                     l4593:	
  6346                           
  6347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 731:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 732:         sample_period += frequency_hop[i];
  6348  0656  083F               	movf	Sensor_Scanfrequency_Evaluation@i,w
  6349  0657  3E10               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6350  0658  0084               	movwf	4
  6351  0659  3090               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6352  065A  1803               	skipnc
  6353  065B  3E01               	addlw	1
  6354  065C  0085               	movwf	5
  6355  065D  0800               	movf	0,w	;code access
  6356  065E  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6357  065F  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6358  0660  07DF               	addwf	_sample_period,f
  6359  0661                     l4597:	
  6360                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  6361                           
  6362  0661  30AE               	movlw	174
  6363  0662  025F               	subwf	_sample_period,w
  6364  0663  1803               	skipnc
  6365  0664  2E66               	goto	u4331
  6366  0665  2E67               	goto	u4330
  6367  0666                     u4331:	
  6368  0666  2E6B               	goto	l4601
  6369  0667                     u4330:	
  6370  0667                     l4599:	
  6371                           
  6372                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 739:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 740:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  6373  0667  30AE               	movlw	174
  6374  0668  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6375  0669  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6376  066A  07DF               	addwf	_sample_period,f
  6377  066B                     l4601:	
  6378                           
  6379                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:         retry = (uint8_t)5;
  6380  066B  3005               	movlw	5
  6381  066C  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6382  066D  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6383  066E  00BA               	movwf	Sensor_Scanfrequency_Evaluation@retry
  6384                           
  6385                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  6386  066F  2E7A               	goto	l4609
  6387  0670                     l4603:	
  6388                           
  6389                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 746:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 747:             retry--;
  6390  0670  3001               	movlw	1
  6391  0671  0020               	movlb	0	; select bank0
  6392  0672  02BA               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  6393                           
  6394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:             if(retry == 0)
  6395  0673  083A               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  6396  0674  1D03               	btfss	3,2
  6397  0675  2E77               	goto	u4341
  6398  0676  2E78               	goto	u4340
  6399  0677                     u4341:	
  6400  0677  2E7A               	goto	l4609
  6401  0678                     u4340:	
  6402  0678                     l4605:	
  6403                           
  6404                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 749:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 750:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6405  0678  30FC               	movlw	252
  6406  0679  2EB9               	goto	l288
  6407  067A                     l4609:	
  6408                           
  6409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  6410  067A  0833               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  6411  067B  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6412  067C  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6413  067D  00A4               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6414  067E  0836               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  6415  067F  3180  206B  3186   	fcall	_Sensor_Acq_ExecutePacket
  6416  0682  3A00               	xorlw	0
  6417  0683  1D03               	skipz
  6418  0684  2E86               	goto	u4351
  6419  0685  2E87               	goto	u4350
  6420  0686                     u4351:	
  6421  0686  2E70               	goto	l4603
  6422  0687                     u4350:	
  6423  0687                     l4611:	
  6424                           
  6425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 754:         if(packet_noise_Max < packet_n
      +                          oise)
  6426  0687  0020               	movlb	0	; select bank0
  6427  0688  0852               	movf	_packet_noise+1,w
  6428  0689  0238               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  6429  068A  1D03               	skipz
  6430  068B  2E8E               	goto	u4365
  6431  068C  0851               	movf	_packet_noise,w
  6432  068D  0237               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  6433  068E                     u4365:	
  6434  068E  1803               	skipnc
  6435  068F  2E91               	goto	u4361
  6436  0690  2E92               	goto	u4360
  6437  0691                     u4361:	
  6438  0691  2EA2               	goto	l4615
  6439  0692                     u4360:	
  6440  0692                     l4613:	
  6441                           
  6442                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 756:             packet_noise_Max = packet_noise;
  6443  0692  0852               	movf	_packet_noise+1,w
  6444  0693  00B8               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6445  0694  0851               	movf	_packet_noise,w
  6446  0695  00B7               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6447                           
  6448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 757:             best_sample_period = sampl
      +                          e_period;
  6449  0696  085F               	movf	_sample_period,w
  6450  0697  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6451  0698  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6452  0699  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6453                           
  6454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  6455  069A  084C               	movf	_packet_sample+1,w
  6456  069B  00BC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6457  069C  084B               	movf	_packet_sample,w
  6458  069D  00BB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6459                           
  6460                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 759:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  6461  069E  084E               	movf	_packet_sample+3,w
  6462  069F  00BE               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  6463  06A0  084D               	movf	_packet_sample+2,w
  6464  06A1  00BD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  6465  06A2                     l4615:	
  6466                           
  6467                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 761:     }
  6468  06A2  3001               	movlw	1
  6469  06A3  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6470  06A4  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6471  06A5  07BF               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  6472  06A6                     l4617:	
  6473  06A6  3005               	movlw	5
  6474  06A7  023F               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  6475  06A8  1C03               	skipc
  6476  06A9  2EAB               	goto	u4371
  6477  06AA  2EAC               	goto	u4370
  6478  06AB                     u4371:	
  6479  06AB  2E56               	goto	l4593
  6480  06AC                     u4370:	
  6481  06AC                     l4619:	
  6482                           
  6483                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:     sample_period = best_sample_period
      +                          ;
  6484  06AC  0839               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  6485  06AD  00B4               	movwf	??_Sensor_Scanfrequency_Evaluation
  6486  06AE  0834               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6487  06AF  00DF               	movwf	_sample_period
  6488                           
  6489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  6490  06B0  083C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  6491  06B1  00CC               	movwf	_packet_sample+1
  6492  06B2  083B               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  6493  06B3  00CB               	movwf	_packet_sample
  6494                           
  6495                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  6496  06B4  083E               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  6497  06B5  00CE               	movwf	_packet_sample+3
  6498  06B6  083D               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  6499  06B7  00CD               	movwf	_packet_sample+2
  6500                           
  6501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 767:     return MTOUCH_SENSOR_ERROR_none;
  6502  06B8  3000               	movlw	0
  6503  06B9                     l288:	
  6504  06B9  0008               	return
  6505  06BA                     __end_of_Sensor_Scanfrequency_Evaluation:	
  6506                           
  6507                           	psect	text37
  6508  006B                     __ptext37:	
  6509 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  6510 ;; Defined at:
  6511 ;;		line 454 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  sensor_adc1     1    wreg     PTR struct .
  6514 ;;		 -> mtouch_sensor(9), 
  6515 ;;  sensor_adc2     1    4[BANK0 ] PTR struct .
  6516 ;;		 -> NULL(0), 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  sensor_adc1     1   18[BANK0 ] PTR struct .
  6519 ;;		 -> mtouch_sensor(9), 
  6520 ;;  last_b          2   15[BANK0 ] unsigned short 
  6521 ;;  last_a          2   13[BANK0 ] unsigned short 
  6522 ;;  packet_count    1   17[BANK0 ] unsigned char 
  6523 ;;  activeSensor    1   12[BANK0 ] unsigned char 
  6524 ;;  ADxIF_flag      1   11[BANK0 ] unsigned char 
  6525 ;;  sensor2Force    1   10[BANK0 ] unsigned char 
  6526 ;;  sensor1Force    1    9[BANK0 ] unsigned char 
  6527 ;;  AD2CON2_temp    1    8[BANK0 ] unsigned char 
  6528 ;;  AD1CON2_temp    1    7[BANK0 ] unsigned char 
  6529 ;;  ADCOMCON_tem    1    6[BANK0 ] unsigned char 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      enum E2873
  6532 ;; Registers used:
  6533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6539 ;;      Params:         0       1       0       0       0       0       0       0
  6540 ;;      Locals:         0      13       0       0       0       0       0       0
  6541 ;;      Temps:          0       1       0       0       0       0       0       0
  6542 ;;      Totals:         0      15       0       0       0       0       0       0
  6543 ;;Total ram usage:       15 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    6
  6546 ;; This function calls:
  6547 ;;		_MTOUCH_Sensor_Scan_Initialize
  6548 ;;		_Sensor_autoCalibration
  6549 ;;		_Sensor_isActive
  6550 ;;		_Sensor_isCalibrated
  6551 ;;		_Sensor_isEnabled
  6552 ;;		_Sensor_loadADCSettings
  6553 ;;		_TMR2_LoadPeriodRegister
  6554 ;;		_TMR2_StartTimer
  6555 ;;		_TMR2_StopTimer
  6556 ;;		_abs
  6557 ;; This function is called by:
  6558 ;;		_Sensor_Acquisition
  6559 ;;		_Sensor_Scanfrequency_Evaluation
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           
  6564                           ;psect for function _Sensor_Acq_ExecutePacket
  6565  006B                     _Sensor_Acq_ExecutePacket:	
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6569                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  6570  006B  0020               	movlb	0	; select bank0
  6571  006C  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  6572  006D                     l4341:	
  6573                           
  6574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 459:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  6575  006D  01AD               	clrf	Sensor_Acq_ExecutePacket@last_a
  6576  006E  01AE               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  6577                           
  6578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  6579  006F  01AF               	clrf	Sensor_Acq_ExecutePacket@last_b
  6580  0070  01B0               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  6581                           
  6582                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     uint8_t activeSensor = 0;
  6583  0071  01AC               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6584                           
  6585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 464:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 470:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  6586  0072  01A9               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6587  0073  01AA               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6588  0074                     l4343:	
  6589                           
  6590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  6591  0074  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6592  0075  1903               	btfsc	3,2
  6593  0076  2878               	goto	u3941
  6594  0077  2879               	goto	u3940
  6595  0078                     u3941:	
  6596  0078  28C1               	goto	l4373
  6597  0079                     u3940:	
  6598  0079                     l4345:	
  6599  0079  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6600  007A  1903               	btfsc	3,2
  6601  007B  287D               	goto	u3951
  6602  007C  287E               	goto	u3950
  6603  007D                     u3951:	
  6604  007D  28C1               	goto	l4373
  6605  007E                     u3950:	
  6606  007E                     l4347:	
  6607                           
  6608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 472:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 473:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  6609  007E  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6610  007F  3E08               	addlw	8
  6611  0080  0086               	movwf	6
  6612  0081  0187               	clrf	7
  6613  0082  1981               	btfsc	1,3
  6614  0083  2885               	goto	u3961
  6615  0084  2886               	goto	u3960
  6616  0085                     u3961:	
  6617  0085  2896               	goto	l4355
  6618  0086                     u3960:	
  6619  0086                     l4349:	
  6620  0086  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6621  0087  3E08               	addlw	8
  6622  0088  0086               	movwf	6
  6623  0089  0187               	clrf	7
  6624  008A  1D81               	btfss	1,3
  6625  008B  288D               	goto	u3971
  6626  008C  288E               	goto	u3970
  6627  008D                     u3971:	
  6628  008D  2896               	goto	l4355
  6629  008E                     u3970:	
  6630  008E                     l4351:	
  6631                           
  6632                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 475:             sensor_adc1->enabled = 1;
  6633  008E  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6634  008F  3E08               	addlw	8
  6635  0090  0086               	movwf	6
  6636  0091  0187               	clrf	7
  6637  0092  1581               	bsf	1,3
  6638  0093                     l4353:	
  6639                           
  6640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 476:             sensor1ForceEnabled = 1;
  6641  0093  01A9               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6642  0094  0AA9               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  6643                           
  6644                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:         }
  6645  0095  28E7               	goto	l4397
  6646  0096                     l4355:	
  6647  0096  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6648  0097  3E08               	addlw	8
  6649  0098  0086               	movwf	6
  6650  0099  0187               	clrf	7
  6651  009A  1981               	btfsc	1,3
  6652  009B  289D               	goto	u3981
  6653  009C  289E               	goto	u3980
  6654  009D                     u3981:	
  6655  009D  28AE               	goto	l4363
  6656  009E                     u3980:	
  6657  009E                     l4357:	
  6658  009E  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6659  009F  3E08               	addlw	8
  6660  00A0  0086               	movwf	6
  6661  00A1  0187               	clrf	7
  6662  00A2  1D81               	btfss	1,3
  6663  00A3  28A5               	goto	u3991
  6664  00A4  28A6               	goto	u3990
  6665  00A5                     u3991:	
  6666  00A5  28AE               	goto	l4363
  6667  00A6                     u3990:	
  6668  00A6                     l4359:	
  6669                           
  6670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 479:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 480:             sensor_adc2->enabled = 1;
  6671  00A6  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6672  00A7  3E08               	addlw	8
  6673  00A8  0086               	movwf	6
  6674  00A9  0187               	clrf	7
  6675  00AA  1581               	bsf	1,3
  6676  00AB                     l4361:	
  6677                           
  6678                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 481:             sensor2ForceEnabled = 1;
  6679  00AB  01AA               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6680  00AC  0AAA               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  6681                           
  6682                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:         }
  6683  00AD  28E7               	goto	l4397
  6684  00AE                     l4363:	
  6685  00AE  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6686  00AF  3E08               	addlw	8
  6687  00B0  0086               	movwf	6
  6688  00B1  0187               	clrf	7
  6689  00B2  1981               	btfsc	1,3
  6690  00B3  28B5               	goto	u4001
  6691  00B4  28B6               	goto	u4000
  6692  00B5                     u4001:	
  6693  00B5  28C0               	goto	l220
  6694  00B6                     u4000:	
  6695  00B6                     l4365:	
  6696  00B6  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6697  00B7  3E08               	addlw	8
  6698  00B8  0086               	movwf	6
  6699  00B9  0187               	clrf	7
  6700  00BA  1981               	btfsc	1,3
  6701  00BB  28BD               	goto	u4011
  6702  00BC  28BE               	goto	u4010
  6703  00BD                     u4011:	
  6704  00BD  28C0               	goto	l220
  6705  00BE                     u4010:	
  6706  00BE                     l4367:	
  6707                           
  6708                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 484:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 485:             return MTOUCH_SENSOR_ERROR_none;
  6709  00BE  3000               	movlw	0
  6710  00BF  2A92               	goto	l224
  6711  00C0                     l220:	
  6712                           
  6713                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 490:     }
  6714  00C0  28E7               	goto	l4397
  6715  00C1                     l4373:	
  6716  00C1  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6717  00C2  1D03               	btfss	3,2
  6718  00C3  28C5               	goto	u4021
  6719  00C4  28C6               	goto	u4020
  6720  00C5                     u4021:	
  6721  00C5  28D4               	goto	l4385
  6722  00C6                     u4020:	
  6723  00C6                     l4375:	
  6724  00C6  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6725  00C7  1903               	btfsc	3,2
  6726  00C8  28CA               	goto	u4031
  6727  00C9  28CB               	goto	u4030
  6728  00CA                     u4031:	
  6729  00CA  28D4               	goto	l4385
  6730  00CB                     u4030:	
  6731  00CB                     l4377:	
  6732                           
  6733                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 493:         if(sensor_adc2->enabled == 0)
  6734  00CB  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6735  00CC  3E08               	addlw	8
  6736  00CD  0086               	movwf	6
  6737  00CE  0187               	clrf	7
  6738  00CF  1981               	btfsc	1,3
  6739  00D0  28D2               	goto	u4041
  6740  00D1  28D3               	goto	u4040
  6741  00D2                     u4041:	
  6742  00D2  28E7               	goto	l4397
  6743  00D3                     u4040:	
  6744  00D3  28BE               	goto	l4367
  6745  00D4                     l4385:	
  6746  00D4  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6747  00D5  1903               	btfsc	3,2
  6748  00D6  28D8               	goto	u4051
  6749  00D7  28D9               	goto	u4050
  6750  00D8                     u4051:	
  6751  00D8  28E7               	goto	l4397
  6752  00D9                     u4050:	
  6753  00D9                     l4387:	
  6754  00D9  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6755  00DA  1D03               	btfss	3,2
  6756  00DB  28DD               	goto	u4061
  6757  00DC  28DE               	goto	u4060
  6758  00DD                     u4061:	
  6759  00DD  28E7               	goto	l4397
  6760  00DE                     u4060:	
  6761  00DE                     l4389:	
  6762                           
  6763                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 503:         if(sensor_adc1->enabled == 0)
  6764  00DE  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6765  00DF  3E08               	addlw	8
  6766  00E0  0086               	movwf	6
  6767  00E1  0187               	clrf	7
  6768  00E2  1981               	btfsc	1,3
  6769  00E3  28E5               	goto	u4071
  6770  00E4  28E6               	goto	u4070
  6771  00E5                     u4071:	
  6772  00E5  28E7               	goto	l4397
  6773  00E6                     u4070:	
  6774  00E6  28BE               	goto	l4367
  6775  00E7                     l4397:	
  6776                           
  6777                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     if(Sensor_isActive(sensor_adc2))
  6778  00E7  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6779  00E8  318A  220B  3180   	fcall	_Sensor_isActive
  6780  00EB  3A00               	xorlw	0
  6781  00EC  1903               	skipnz
  6782  00ED  28EF               	goto	u4081
  6783  00EE  28F0               	goto	u4080
  6784  00EF                     u4081:	
  6785  00EF  28F3               	goto	l4401
  6786  00F0                     u4080:	
  6787  00F0                     l4399:	
  6788                           
  6789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 516:         activeSensor = 1;
  6790  00F0  0020               	movlb	0	; select bank0
  6791  00F1  01AC               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6792  00F2  0AAC               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  6793  00F3                     l4401:	
  6794                           
  6795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 522:     ADCOMCON_temp = ADCOMCON;
  6796  00F3  002E               	movlb	14	; select bank14
  6797  00F4  0812               	movf	18,w	;volatile
  6798  00F5  0020               	movlb	0	; select bank0
  6799  00F6  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  6800  00F7  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  6801  00F8  00A6               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  6802                           
  6803                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 523:     AD1CON2_temp = AD1CON2;
  6804  00F9  002E               	movlb	14	; select bank14
  6805  00FA  0813               	movf	19,w	;volatile
  6806  00FB  0020               	movlb	0	; select bank0
  6807  00FC  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  6808  00FD  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  6809  00FE  00A7               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  6810                           
  6811                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 524:     AD2CON2_temp = AD2CON2;
  6812  00FF  002F               	movlb	15	; select bank15
  6813  0100  0813               	movf	19,w	;volatile
  6814  0101  0020               	movlb	0	; select bank0
  6815  0102  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  6816  0103  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  6817  0104  00A8               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  6818  0105                     l4403:	
  6819                           
  6820                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 525:     MTOUCH_Sensor_Scan_Initialize();
  6821  0105  318A  2229  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6822  0108                     l4405:	
  6823                           
  6824                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 529:     if(sensor_adc1!=((void*)0))
  6825  0108  0020               	movlb	0	; select bank0
  6826  0109  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6827  010A  1903               	btfsc	3,2
  6828  010B  290D               	goto	u4091
  6829  010C  290E               	goto	u4090
  6830  010D                     u4091:	
  6831  010D  2920               	goto	l4417
  6832  010E                     u4090:	
  6833  010E                     l4407:	
  6834                           
  6835                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 530:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 531:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6836  010E  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6837  010F  3E04               	addlw	4
  6838  0110  0086               	movwf	6
  6839  0111  0187               	clrf	7
  6840  0112  0801               	movf	1,w
  6841  0113  3EFF               	addlw	255
  6842  0114  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  6843  0115  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  6844  0116  00B1               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6845  0117                     l4409:	
  6846                           
  6847                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:         ADxIF_flag = 0;
  6848  0117  01AB               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6849  0118                     l4411:	
  6850                           
  6851                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         AAD1GRD = 0b01000000;
  6852  0118  3040               	movlw	64
  6853  0119  002E               	movlb	14	; select bank14
  6854  011A  0098               	movwf	24	;volatile
  6855  011B                     l4413:	
  6856                           
  6857                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 534:         AAD2GRD = 0b00000000;
  6858  011B  002F               	movlb	15	; select bank15
  6859  011C  0198               	clrf	24	;volatile
  6860  011D                     l4415:	
  6861                           
  6862                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 535:         APFCONbits.GRDASEL = 0x0;
  6863  011D  0022               	movlb	2	; select bank2
  6864  011E  101D               	bcf	29,0	;volatile
  6865                           
  6866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 536:     }
  6867  011F  2932               	goto	l4427
  6868  0120                     l4417:	
  6869                           
  6870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 538:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 539:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6871  0120  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6872  0121  3E04               	addlw	4
  6873  0122  0086               	movwf	6
  6874  0123  0187               	clrf	7
  6875  0124  0801               	movf	1,w
  6876  0125  3EFF               	addlw	255
  6877  0126  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  6878  0127  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  6879  0128  00B1               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6880  0129                     l4419:	
  6881                           
  6882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:         ADxIF_flag = 1;
  6883  0129  01AB               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6884  012A  0AAB               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  6885  012B                     l4421:	
  6886                           
  6887                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         AAD1GRD = 0b00000000;
  6888  012B  002E               	movlb	14	; select bank14
  6889  012C  0198               	clrf	24	;volatile
  6890  012D                     l4423:	
  6891                           
  6892                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:         AAD2GRD = 0b01000000;
  6893  012D  3040               	movlw	64
  6894  012E  002F               	movlb	15	; select bank15
  6895  012F  0098               	movwf	24	;volatile
  6896  0130                     l4425:	
  6897                           
  6898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 543:         APFCONbits.GRDASEL = 0x1;
  6899  0130  0022               	movlb	2	; select bank2
  6900  0131  141D               	bsf	29,0	;volatile
  6901  0132                     l4427:	
  6902                           
  6903                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  6904  0132  01F3               	clrf	Sensor_loadADCSettings@adc_index
  6905  0133  0020               	movlb	0	; select bank0
  6906  0134  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6907  0135  3182  2293  3180   	fcall	_Sensor_loadADCSettings
  6908  0138                     l4429:	
  6909                           
  6910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  6911  0138  01F3               	clrf	Sensor_loadADCSettings@adc_index
  6912  0139  0AF3               	incf	Sensor_loadADCSettings@adc_index,f
  6913  013A  0020               	movlb	0	; select bank0
  6914  013B  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6915  013C  3182  2293  3180   	fcall	_Sensor_loadADCSettings
  6916  013F                     l4431:	
  6917                           
  6918                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     sensor_globalFlags.done = 0;
  6919  013F  0020               	movlb	0	; select bank0
  6920  0140  1058               	bcf	_sensor_globalFlags,0	;volatile
  6921  0141                     l4433:	
  6922                           
  6923                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     sensor_globalFlags.error = 0;
  6924  0141  1158               	bcf	_sensor_globalFlags,2	;volatile
  6925  0142                     l4435:	
  6926                           
  6927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:     sensor_globalFlags.interrupted = 0
      +                          ;
  6928  0142  11D8               	bcf	_sensor_globalFlags,3	;volatile
  6929  0143                     l4437:	
  6930                           
  6931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  6932  0143  085F               	movf	_sample_period,w
  6933  0144  3189  214F  3180   	fcall	_TMR2_LoadPeriodRegister
  6934  0147                     l4439:	
  6935                           
  6936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     TMR2_StartTimer();
  6937  0147  3189  2135  3180   	fcall	_TMR2_StartTimer
  6938  014A                     l4441:	
  6939                           
  6940                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     packet_noise = 0;
  6941  014A  0020               	movlb	0	; select bank0
  6942  014B  01D1               	clrf	_packet_noise
  6943  014C  01D2               	clrf	_packet_noise+1
  6944  014D                     l4443:	
  6945                           
  6946                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 559:         if(ADxIF_flag == 0)
  6947  014D  082B               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  6948  014E  1D03               	btfss	3,2
  6949  014F  2951               	goto	u4101
  6950  0150  2952               	goto	u4100
  6951  0151                     u4101:	
  6952  0151  295D               	goto	l240
  6953  0152                     u4100:	
  6954  0152                     l4445:	
  6955                           
  6956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 561:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6957  0152  1B11               	btfsc	17,6	;volatile
  6958  0153  2955               	goto	u4111
  6959  0154  2956               	goto	u4110
  6960  0155                     u4111:	
  6961  0155  2957               	goto	l242
  6962  0156                     u4110:	
  6963  0156                     l4447:	
  6964  0156  10D8               	bcf	_sensor_globalFlags,1	;volatile
  6965  0157                     l242:	
  6966  0157  1F11               	btfss	17,6	;volatile
  6967  0158  295A               	goto	u4121
  6968  0159  295B               	goto	u4120
  6969  015A                     u4121:	
  6970  015A  2957               	goto	l242
  6971  015B                     u4120:	
  6972  015B                     l244:	
  6973                           
  6974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:             PIR1bits.AD1IF = 0;
  6975  015B  1311               	bcf	17,6	;volatile
  6976                           
  6977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:         }
  6978  015C  2967               	goto	l4451
  6979  015D                     l240:	
  6980                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         else
  6981                           
  6982                           
  6983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 567:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6984  015D  1B12               	btfsc	18,6	;volatile
  6985  015E  2960               	goto	u4131
  6986  015F  2961               	goto	u4130
  6987  0160                     u4131:	
  6988  0160  2962               	goto	l247
  6989  0161                     u4130:	
  6990  0161                     l4449:	
  6991  0161  10D8               	bcf	_sensor_globalFlags,1	;volatile
  6992  0162                     l247:	
  6993  0162  1F12               	btfss	18,6	;volatile
  6994  0163  2965               	goto	u4141
  6995  0164  2966               	goto	u4140
  6996  0165                     u4141:	
  6997  0165  2962               	goto	l247
  6998  0166                     u4140:	
  6999  0166                     l249:	
  7000                           
  7001                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 569:             PIR2bits.AD2IF = 0;
  7002  0166  1312               	bcf	18,6	;volatile
  7003  0167                     l4451:	
  7004                           
  7005                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:         AAD1GRD ^= 0b00100001;
  7006  0167  3021               	movlw	33
  7007  0168  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  7008  0169  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  7009  016A  002E               	movlb	14	; select bank14
  7010  016B  0698               	xorwf	24,f	;volatile
  7011                           
  7012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 573:         AAD2GRD ^= 0b00100001;
  7013  016C  3021               	movlw	33
  7014  016D  0020               	movlb	0	; select bank0
  7015  016E  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  7016  016F  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  7017  0170  002F               	movlb	15	; select bank15
  7018  0171  0698               	xorwf	24,f	;volatile
  7019                           
  7020                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:         AAD1CON3 ^= 0b11000000;
  7021  0172  30C0               	movlw	192
  7022  0173  0020               	movlb	0	; select bank0
  7023  0174  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  7024  0175  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  7025  0176  002E               	movlb	14	; select bank14
  7026  0177  0694               	xorwf	20,f	;volatile
  7027                           
  7028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:         AAD2CON3 ^= 0b11000000;
  7029  0178  30C0               	movlw	192
  7030  0179  0020               	movlb	0	; select bank0
  7031  017A  00A5               	movwf	??_Sensor_Acq_ExecutePacket
  7032  017B  0825               	movf	??_Sensor_Acq_ExecutePacket,w
  7033  017C  002F               	movlb	15	; select bank15
  7034  017D  0694               	xorwf	20,f	;volatile
  7035  017E                     l4453:	
  7036                           
  7037                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         if ((packet_counter & 0x01) ==
      +                           0)
  7038  017E  0020               	movlb	0	; select bank0
  7039  017F  1831               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7040  0180  2982               	goto	u4151
  7041  0181  2983               	goto	u4150
  7042  0182                     u4151:	
  7043  0182  29CE               	goto	l4467
  7044  0183                     u4150:	
  7045  0183                     l4455:	
  7046                           
  7047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 579:             packet_sample[0] += AAD1RES0;
  7048  0183  002E               	movlb	14	; select bank14
  7049  0184  081A               	movf	26,w	;volatile
  7050  0185  0020               	movlb	0	; select bank0
  7051  0186  07CB               	addwf	_packet_sample,f
  7052  0187  002E               	movlb	14	; select bank14
  7053  0188  081B               	movf	27,w	;volatile
  7054  0189  0020               	movlb	0	; select bank0
  7055  018A  3DCC               	addwfc	_packet_sample+1,f
  7056                           
  7057                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             packet_sample[1] += AAD2RE
      +                          S0;
  7058  018B  002F               	movlb	15	; select bank15
  7059  018C  081A               	movf	26,w	;volatile
  7060  018D  0020               	movlb	0	; select bank0
  7061  018E  07CD               	addwf	_packet_sample+2,f
  7062  018F  002F               	movlb	15	; select bank15
  7063  0190  081B               	movf	27,w	;volatile
  7064  0191  0020               	movlb	0	; select bank0
  7065  0192  3DCE               	addwfc	_packet_sample+3,f
  7066  0193                     l4457:	
  7067                           
  7068                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:             if(activeSensor ==0)
  7069  0193  082C               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7070  0194  1D03               	btfss	3,2
  7071  0195  2997               	goto	u4161
  7072  0196  2998               	goto	u4160
  7073  0197                     u4161:	
  7074  0197  29B3               	goto	l4463
  7075  0198                     u4160:	
  7076  0198                     l4459:	
  7077                           
  7078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 583:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  7079  0198  002E               	movlb	14	; select bank14
  7080  0199  081A               	movf	26,w	;volatile
  7081  019A  0020               	movlb	0	; select bank0
  7082  019B  022F               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7083  019C  00F2               	movwf	abs@a
  7084  019D  002E               	movlb	14	; select bank14
  7085  019E  081B               	movf	27,w	;volatile
  7086  019F  0020               	movlb	0	; select bank0
  7087  01A0  3B30               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7088  01A1  00F3               	movwf	abs@a+1
  7089  01A2  318B  238B  3180   	fcall	_abs
  7090  01A5  0872               	movf	?_abs,w
  7091  01A6  0020               	movlb	0	; select bank0
  7092  01A7  07D1               	addwf	_packet_noise,f
  7093  01A8  0873               	movf	?_abs+1,w
  7094  01A9  3DD2               	addwfc	_packet_noise+1,f
  7095  01AA                     l4461:	
  7096                           
  7097                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 584:                 last_b = AAD1RES0;
  7098  01AA  002E               	movlb	14	; select bank14
  7099  01AB  081B               	movf	27,w	;volatile
  7100  01AC  0020               	movlb	0	; select bank0
  7101  01AD  00B0               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7102  01AE  002E               	movlb	14	; select bank14
  7103  01AF  081A               	movf	26,w	;volatile
  7104  01B0  0020               	movlb	0	; select bank0
  7105  01B1  00AF               	movwf	Sensor_Acq_ExecutePacket@last_b
  7106                           
  7107                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:             }
  7108  01B2  2A11               	goto	l4479
  7109  01B3                     l4463:	
  7110                           
  7111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 587:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 588:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  7112  01B3  002F               	movlb	15	; select bank15
  7113  01B4  081A               	movf	26,w	;volatile
  7114  01B5  0020               	movlb	0	; select bank0
  7115  01B6  022F               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7116  01B7  00F2               	movwf	abs@a
  7117  01B8  002F               	movlb	15	; select bank15
  7118  01B9  081B               	movf	27,w	;volatile
  7119  01BA  0020               	movlb	0	; select bank0
  7120  01BB  3B30               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7121  01BC  00F3               	movwf	abs@a+1
  7122  01BD  318B  238B  3180   	fcall	_abs
  7123  01C0  0872               	movf	?_abs,w
  7124  01C1  0020               	movlb	0	; select bank0
  7125  01C2  07D1               	addwf	_packet_noise,f
  7126  01C3  0873               	movf	?_abs+1,w
  7127  01C4  3DD2               	addwfc	_packet_noise+1,f
  7128  01C5                     l4465:	
  7129                           
  7130                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:                 last_b = AAD2RES0;
  7131  01C5  002F               	movlb	15	; select bank15
  7132  01C6  081B               	movf	27,w	;volatile
  7133  01C7  0020               	movlb	0	; select bank0
  7134  01C8  00B0               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7135  01C9  002F               	movlb	15	; select bank15
  7136  01CA  081A               	movf	26,w	;volatile
  7137  01CB  0020               	movlb	0	; select bank0
  7138  01CC  00AF               	movwf	Sensor_Acq_ExecutePacket@last_b
  7139  01CD  2A11               	goto	l4479
  7140  01CE                     l4467:	
  7141                           
  7142                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 593:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 594:             packet_sample[0] -= AAD1RES0;
  7143  01CE  002E               	movlb	14	; select bank14
  7144  01CF  081A               	movf	26,w	;volatile
  7145  01D0  0020               	movlb	0	; select bank0
  7146  01D1  02CB               	subwf	_packet_sample,f
  7147  01D2  002E               	movlb	14	; select bank14
  7148  01D3  081B               	movf	27,w	;volatile
  7149  01D4  0020               	movlb	0	; select bank0
  7150  01D5  3BCC               	subwfb	_packet_sample+1,f
  7151                           
  7152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:             packet_sample[1] -= AAD2RE
      +                          S0;
  7153  01D6  002F               	movlb	15	; select bank15
  7154  01D7  081A               	movf	26,w	;volatile
  7155  01D8  0020               	movlb	0	; select bank0
  7156  01D9  02CD               	subwf	_packet_sample+2,f
  7157  01DA  002F               	movlb	15	; select bank15
  7158  01DB  081B               	movf	27,w	;volatile
  7159  01DC  0020               	movlb	0	; select bank0
  7160  01DD  3BCE               	subwfb	_packet_sample+3,f
  7161  01DE                     l4469:	
  7162                           
  7163                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 596:             if(activeSensor ==0)
  7164  01DE  082C               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7165  01DF  1D03               	btfss	3,2
  7166  01E0  29E2               	goto	u4171
  7167  01E1  29E3               	goto	u4170
  7168  01E2                     u4171:	
  7169  01E2  29FE               	goto	l4475
  7170  01E3                     u4170:	
  7171  01E3                     l4471:	
  7172                           
  7173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 598:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  7174  01E3  002E               	movlb	14	; select bank14
  7175  01E4  081A               	movf	26,w	;volatile
  7176  01E5  0020               	movlb	0	; select bank0
  7177  01E6  022D               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7178  01E7  00F2               	movwf	abs@a
  7179  01E8  002E               	movlb	14	; select bank14
  7180  01E9  081B               	movf	27,w	;volatile
  7181  01EA  0020               	movlb	0	; select bank0
  7182  01EB  3B2E               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7183  01EC  00F3               	movwf	abs@a+1
  7184  01ED  318B  238B  3180   	fcall	_abs
  7185  01F0  0872               	movf	?_abs,w
  7186  01F1  0020               	movlb	0	; select bank0
  7187  01F2  07D1               	addwf	_packet_noise,f
  7188  01F3  0873               	movf	?_abs+1,w
  7189  01F4  3DD2               	addwfc	_packet_noise+1,f
  7190  01F5                     l4473:	
  7191                           
  7192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:                 last_a = AAD1RES0;
  7193  01F5  002E               	movlb	14	; select bank14
  7194  01F6  081B               	movf	27,w	;volatile
  7195  01F7  0020               	movlb	0	; select bank0
  7196  01F8  00AE               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  7197  01F9  002E               	movlb	14	; select bank14
  7198  01FA  081A               	movf	26,w	;volatile
  7199  01FB  0020               	movlb	0	; select bank0
  7200  01FC  00AD               	movwf	Sensor_Acq_ExecutePacket@last_a
  7201                           
  7202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:             }
  7203  01FD  2A11               	goto	l4479
  7204  01FE                     l4475:	
  7205                           
  7206                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 603:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  7207  01FE  002F               	movlb	15	; select bank15
  7208  01FF  081A               	movf	26,w	;volatile
  7209  0200  0020               	movlb	0	; select bank0
  7210  0201  022D               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7211  0202  00F2               	movwf	abs@a
  7212  0203  002F               	movlb	15	; select bank15
  7213  0204  081B               	movf	27,w	;volatile
  7214  0205  0020               	movlb	0	; select bank0
  7215  0206  3B2E               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7216  0207  00F3               	movwf	abs@a+1
  7217  0208  318B  238B  3180   	fcall	_abs
  7218  020B  0872               	movf	?_abs,w
  7219  020C  0020               	movlb	0	; select bank0
  7220  020D  07D1               	addwf	_packet_noise,f
  7221  020E  0873               	movf	?_abs+1,w
  7222  020F  3DD2               	addwfc	_packet_noise+1,f
  7223  0210  29F5               	goto	l4473
  7224  0211                     l4479:	
  7225                           
  7226                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:         if (packet_counter == 0)
  7227  0211  0831               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  7228  0212  1D03               	btfss	3,2
  7229  0213  2A15               	goto	u4181
  7230  0214  2A16               	goto	u4180
  7231  0215                     u4181:	
  7232  0215  2A17               	goto	l4483
  7233  0216                     u4180:	
  7234  0216                     l4481:	
  7235                           
  7236                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 612:             sensor_globalFlags.done = (uint8_t)1;
  7237  0216  1458               	bsf	_sensor_globalFlags,0	;volatile
  7238  0217                     l4483:	
  7239                           
  7240                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:         packet_counter--;
  7241  0217  3001               	movlw	1
  7242  0218  02B1               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  7243  0219                     l4485:	
  7244                           
  7245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:         if (sensor_globalFlags.check !
      +                          = 0)
  7246  0219  1CD8               	btfss	_sensor_globalFlags,1	;volatile
  7247  021A  2A1C               	goto	u4191
  7248  021B  2A1D               	goto	u4190
  7249  021C                     u4191:	
  7250  021C  2A1F               	goto	l257
  7251  021D                     u4190:	
  7252  021D                     l4487:	
  7253                           
  7254                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 618:             sensor_globalFlags.error = 1;
  7255  021D  1558               	bsf	_sensor_globalFlags,2	;volatile
  7256                           
  7257                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             sensor_globalFlags.done = 
      +                          1;
  7258  021E  1458               	bsf	_sensor_globalFlags,0	;volatile
  7259  021F                     l257:	
  7260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:         }
  7261                           
  7262                           
  7263                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:         sensor_globalFlags.check = 1;
  7264  021F  14D8               	bsf	_sensor_globalFlags,1	;volatile
  7265                           
  7266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:     } while(sensor_globalFlags.done ==
      +                           0);
  7267  0220  1C58               	btfss	_sensor_globalFlags,0	;volatile
  7268  0221  2A23               	goto	u4201
  7269  0222  2A24               	goto	u4200
  7270  0223                     u4201:	
  7271  0223  294D               	goto	l4443
  7272  0224                     u4200:	
  7273  0224                     l4489:	
  7274                           
  7275                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:     TMR2_StopTimer();
  7276  0224  3189  2138  3180   	fcall	_TMR2_StopTimer
  7277  0227                     l4491:	
  7278                           
  7279                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:     ADCOMCON = ADCOMCON_temp;
  7280  0227  0020               	movlb	0	; select bank0
  7281  0228  0826               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  7282  0229  002E               	movlb	14	; select bank14
  7283  022A  0092               	movwf	18	;volatile
  7284  022B                     l4493:	
  7285                           
  7286                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:     AD1CON2 = AD1CON2_temp;
  7287  022B  0020               	movlb	0	; select bank0
  7288  022C  0827               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  7289  022D  002E               	movlb	14	; select bank14
  7290  022E  0093               	movwf	19	;volatile
  7291  022F                     l4495:	
  7292                           
  7293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:     AD2CON2 = AD2CON2_temp;
  7294  022F  0020               	movlb	0	; select bank0
  7295  0230  0828               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  7296  0231  002F               	movlb	15	; select bank15
  7297  0232  0093               	movwf	19	;volatile
  7298  0233                     l4497:	
  7299                           
  7300                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 629:     if(sensor_globalFlags.error)
  7301  0233  0020               	movlb	0	; select bank0
  7302  0234  1D58               	btfss	_sensor_globalFlags,2	;volatile
  7303  0235  2A37               	goto	u4211
  7304  0236  2A38               	goto	u4210
  7305  0237                     u4211:	
  7306  0237  2A3A               	goto	l259
  7307  0238                     u4210:	
  7308  0238                     l4499:	
  7309                           
  7310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 630:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 631:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  7311  0238  30FB               	movlw	251
  7312  0239  2A92               	goto	l224
  7313  023A                     l259:	
  7314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 632:     }
  7315                           
  7316                           
  7317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:     if(sensor_globalFlags.interrupted)
  7318  023A  1DD8               	btfss	_sensor_globalFlags,3	;volatile
  7319  023B  2A3D               	goto	u4221
  7320  023C  2A3E               	goto	u4220
  7321  023D                     u4221:	
  7322  023D  2A40               	goto	l4507
  7323  023E                     u4220:	
  7324  023E                     l4503:	
  7325                           
  7326                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 636:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  7327  023E  30FA               	movlw	250
  7328  023F  2A92               	goto	l224
  7329  0240                     l4507:	
  7330                           
  7331                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 640:     if (sensor1ForceEnabled)
  7332  0240  0829               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  7333  0241  1903               	btfsc	3,2
  7334  0242  2A44               	goto	u4231
  7335  0243  2A45               	goto	u4230
  7336  0244                     u4231:	
  7337  0244  2A4A               	goto	l4511
  7338  0245                     u4230:	
  7339  0245                     l4509:	
  7340                           
  7341                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         sensor_adc1->enabled = 0;
  7342  0245  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7343  0246  3E08               	addlw	8
  7344  0247  0086               	movwf	6
  7345  0248  0187               	clrf	7
  7346  0249  1181               	bcf	1,3
  7347  024A                     l4511:	
  7348                           
  7349                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     if (sensor2ForceEnabled)
  7350  024A  082A               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  7351  024B  1903               	btfsc	3,2
  7352  024C  2A4E               	goto	u4241
  7353  024D  2A4F               	goto	u4240
  7354  024E                     u4241:	
  7355  024E  2A54               	goto	l4515
  7356  024F                     u4240:	
  7357  024F                     l4513:	
  7358                           
  7359                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:         sensor_adc2->enabled = 0;
  7360  024F  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7361  0250  3E08               	addlw	8
  7362  0251  0086               	movwf	6
  7363  0252  0187               	clrf	7
  7364  0253  1181               	bcf	1,3
  7365  0254                     l4515:	
  7366                           
  7367                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  7368  0254  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7369  0255  318A  226D  3180   	fcall	_Sensor_isEnabled
  7370  0258  3A00               	xorlw	0
  7371  0259  1903               	skipnz
  7372  025A  2A5C               	goto	u4251
  7373  025B  2A5D               	goto	u4250
  7374  025C                     u4251:	
  7375  025C  2A6C               	goto	l4521
  7376  025D                     u4250:	
  7377  025D                     l4517:	
  7378  025D  0020               	movlb	0	; select bank0
  7379  025E  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7380  025F  3189  21C4  3180   	fcall	_Sensor_isCalibrated
  7381  0262  3A00               	xorlw	0
  7382  0263  1D03               	skipz
  7383  0264  2A66               	goto	u4261
  7384  0265  2A67               	goto	u4260
  7385  0266                     u4261:	
  7386  0266  2A6C               	goto	l4521
  7387  0267                     u4260:	
  7388  0267                     l4519:	
  7389                           
  7390                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 648:         Sensor_autoCalibration(sensor_
      +                          adc1);
  7391  0267  0020               	movlb	0	; select bank0
  7392  0268  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7393  0269  3183  235F  3180   	fcall	_Sensor_autoCalibration
  7394  026C                     l4521:	
  7395                           
  7396                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  7397  026C  0020               	movlb	0	; select bank0
  7398  026D  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7399  026E  318A  226D  3180   	fcall	_Sensor_isEnabled
  7400  0271  3A00               	xorlw	0
  7401  0272  1903               	skipnz
  7402  0273  2A75               	goto	u4271
  7403  0274  2A76               	goto	u4270
  7404  0275                     u4271:	
  7405  0275  2A85               	goto	l4527
  7406  0276                     u4270:	
  7407  0276                     l4523:	
  7408  0276  0020               	movlb	0	; select bank0
  7409  0277  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7410  0278  3189  21C4  3180   	fcall	_Sensor_isCalibrated
  7411  027B  3A00               	xorlw	0
  7412  027C  1D03               	skipz
  7413  027D  2A7F               	goto	u4281
  7414  027E  2A80               	goto	u4280
  7415  027F                     u4281:	
  7416  027F  2A85               	goto	l4527
  7417  0280                     u4280:	
  7418  0280                     l4525:	
  7419                           
  7420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:         Sensor_autoCalibration(sensor_
      +                          adc2);
  7421  0280  0020               	movlb	0	; select bank0
  7422  0281  0824               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7423  0282  3183  235F  3180   	fcall	_Sensor_autoCalibration
  7424  0285                     l4527:	
  7425                           
  7426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 653:     AD1PRECON = 0;
  7427  0285  002E               	movlb	14	; select bank14
  7428  0286  0196               	clrf	22	;volatile
  7429  0287                     l4529:	
  7430                           
  7431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     AD2PRECON = 0;
  7432  0287  002F               	movlb	15	; select bank15
  7433  0288  0196               	clrf	22	;volatile
  7434  0289                     l4531:	
  7435                           
  7436                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     AD1ACQCON = 0;
  7437  0289  002E               	movlb	14	; select bank14
  7438  028A  0197               	clrf	23	;volatile
  7439  028B                     l4533:	
  7440                           
  7441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 656:     AD2ACQCON = 0;
  7442  028B  002F               	movlb	15	; select bank15
  7443  028C  0197               	clrf	23	;volatile
  7444  028D                     l4535:	
  7445                           
  7446                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     AD1CON0bits.ADON = 0;
  7447  028D  002E               	movlb	14	; select bank14
  7448  028E  1011               	bcf	17,0	;volatile
  7449  028F                     l4537:	
  7450                           
  7451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:     AD2CON0bits.ADON = 0;
  7452  028F  002F               	movlb	15	; select bank15
  7453  0290  1011               	bcf	17,0	;volatile
  7454  0291  28BE               	goto	l4367
  7455  0292                     l224:	
  7456  0292  0008               	return
  7457  0293                     __end_of_Sensor_Acq_ExecutePacket:	
  7458                           
  7459                           	psect	text38
  7460  0938                     __ptext38:	
  7461 ;; *************** function _TMR2_StopTimer *****************
  7462 ;; Defined at:
  7463 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		None
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7477 ;;      Params:         0       0       0       0       0       0       0       0
  7478 ;;      Locals:         0       0       0       0       0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0       0
  7480 ;;      Totals:         0       0       0       0       0       0       0       0
  7481 ;;Total ram usage:        0 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    4
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_Sensor_Acq_ExecutePacket
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           
  7492                           ;psect for function _TMR2_StopTimer
  7493  0938                     _TMR2_StopTimer:	
  7494  0938                     l4297:	
  7495                           ;incstack = 0
  7496                           ; Regs used in _TMR2_StopTimer: []
  7497                           
  7498                           
  7499                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  7500  0938  0020               	movlb	0	; select bank0
  7501  0939  111C               	bcf	28,2	;volatile
  7502  093A                     l899:	
  7503  093A  0008               	return
  7504  093B                     __end_of_TMR2_StopTimer:	
  7505                           
  7506                           	psect	text39
  7507  0935                     __ptext39:	
  7508 ;; *************** function _TMR2_StartTimer *****************
  7509 ;; Defined at:
  7510 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;		None
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      void 
  7517 ;; Registers used:
  7518 ;;		None
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7524 ;;      Params:         0       0       0       0       0       0       0       0
  7525 ;;      Locals:         0       0       0       0       0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0
  7527 ;;      Totals:         0       0       0       0       0       0       0       0
  7528 ;;Total ram usage:        0 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    4
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_Sensor_Acq_ExecutePacket
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           
  7539                           ;psect for function _TMR2_StartTimer
  7540  0935                     _TMR2_StartTimer:	
  7541  0935                     l4295:	
  7542                           ;incstack = 0
  7543                           ; Regs used in _TMR2_StartTimer: []
  7544                           
  7545                           
  7546                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  7547  0935  0020               	movlb	0	; select bank0
  7548  0936  151C               	bsf	28,2	;volatile
  7549  0937                     l896:	
  7550  0937  0008               	return
  7551  0938                     __end_of_TMR2_StartTimer:	
  7552                           
  7553                           	psect	text40
  7554  094F                     __ptext40:	
  7555 ;; *************** function _TMR2_LoadPeriodRegister *****************
  7556 ;; Defined at:
  7557 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  periodVal       1    wreg     unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  periodVal       1    2[COMMON] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      void 
  7564 ;; Registers used:
  7565 ;;		wreg
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7571 ;;      Params:         0       0       0       0       0       0       0       0
  7572 ;;      Locals:         1       0       0       0       0       0       0       0
  7573 ;;      Temps:          0       0       0       0       0       0       0       0
  7574 ;;      Totals:         1       0       0       0       0       0       0       0
  7575 ;;Total ram usage:        1 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    4
  7578 ;; This function calls:
  7579 ;;		Nothing
  7580 ;; This function is called by:
  7581 ;;		_Sensor_Acq_ExecutePacket
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           
  7586                           ;psect for function _TMR2_LoadPeriodRegister
  7587  094F                     _TMR2_LoadPeriodRegister:	
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  7591                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  7592  094F  00F2               	movwf	TMR2_LoadPeriodRegister@periodVal
  7593  0950                     l4293:	
  7594                           
  7595                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  7596  0950  0872               	movf	TMR2_LoadPeriodRegister@periodVal,w
  7597  0951  0020               	movlb	0	; select bank0
  7598  0952  009B               	movwf	27	;volatile
  7599  0953                     l908:	
  7600  0953  0008               	return
  7601  0954                     __end_of_TMR2_LoadPeriodRegister:	
  7602                           
  7603                           	psect	text41
  7604  0293                     __ptext41:	
  7605 ;; *************** function _Sensor_loadADCSettings *****************
  7606 ;; Defined at:
  7607 ;;		line 420 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  sensor          1    wreg     PTR struct .
  7610 ;;		 -> NULL(0), mtouch_sensor(9), 
  7611 ;;  adc_index       1    3[COMMON] unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  sensor          1    3[BANK0 ] PTR struct .
  7614 ;;		 -> NULL(0), mtouch_sensor(9), 
  7615 ;;  addressOffse    1    2[BANK0 ] unsigned char 
  7616 ;; Return value:  Size  Location     Type
  7617 ;;                  1    wreg      void 
  7618 ;; Registers used:
  7619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7625 ;;      Params:         1       0       0       0       0       0       0       0
  7626 ;;      Locals:         0       4       0       0       0       0       0       0
  7627 ;;      Temps:          3       0       0       0       0       0       0       0
  7628 ;;      Totals:         4       4       0       0       0       0       0       0
  7629 ;;Total ram usage:        8 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:    5
  7632 ;; This function calls:
  7633 ;;		_Sensor_isCalibrated
  7634 ;;		_Sensor_isCalibratingAcqTime
  7635 ;; This function is called by:
  7636 ;;		_Sensor_Acq_ExecutePacket
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function _Sensor_loadADCSettings
  7642  0293                     _Sensor_loadADCSettings:	
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7646                           ;Sensor_loadADCSettings@sensor stored from wreg
  7647  0293  0020               	movlb	0	; select bank0
  7648  0294  00A3               	movwf	Sensor_loadADCSettings@sensor
  7649  0295                     l4263:	
  7650                           
  7651                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 421
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 422:     if (sensor == ((void*)0))
  7652  0295  0823               	movf	Sensor_loadADCSettings@sensor,w
  7653  0296  1D03               	btfss	3,2
  7654  0297  2A99               	goto	u3801
  7655  0298  2A9A               	goto	u3800
  7656  0299                     u3801:	
  7657  0299  2A9B               	goto	l4267
  7658  029A                     u3800:	
  7659  029A  2B5E               	goto	l207
  7660  029B                     l4267:	
  7661                           
  7662                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  7663  029B  0873               	movf	Sensor_loadADCSettings@adc_index,w
  7664  029C  1D03               	btfss	3,2
  7665  029D  2A9F               	goto	u3811
  7666  029E  2AA0               	goto	u3810
  7667  029F                     u3811:	
  7668  029F  2AA3               	goto	l4271
  7669  02A0                     u3810:	
  7670  02A0                     l4269:	
  7671  02A0  01A0               	clrf	_Sensor_loadADCSettings$507
  7672  02A1  01A1               	clrf	_Sensor_loadADCSettings$507+1
  7673  02A2  2AA7               	goto	l211
  7674  02A3                     l4271:	
  7675  02A3  3080               	movlw	128
  7676  02A4  00A0               	movwf	_Sensor_loadADCSettings$507
  7677  02A5  3000               	movlw	0
  7678  02A6  00A1               	movwf	_Sensor_loadADCSettings$507+1
  7679  02A7                     l211:	
  7680  02A7  0820               	movf	_Sensor_loadADCSettings$507,w
  7681  02A8  00F4               	movwf	??_Sensor_loadADCSettings
  7682  02A9  0874               	movf	??_Sensor_loadADCSettings,w
  7683  02AA  00A2               	movwf	Sensor_loadADCSettings@addressOffset
  7684  02AB                     l4273:	
  7685                           
  7686                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 427:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  7687  02AB  0A23               	incf	Sensor_loadADCSettings@sensor,w
  7688  02AC  0086               	movwf	6
  7689  02AD  0187               	clrf	7
  7690  02AE  0801               	movf	1,w
  7691  02AF  00F4               	movwf	??_Sensor_loadADCSettings
  7692  02B0  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7693  02B1  3E11               	addlw	17
  7694  02B2  00F5               	movwf	??_Sensor_loadADCSettings+1
  7695  02B3  01F6               	clrf	??_Sensor_loadADCSettings+2
  7696  02B4  3007               	movlw	7
  7697  02B5  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
  7698  02B6  0875               	movf	??_Sensor_loadADCSettings+1,w
  7699  02B7  0086               	movwf	6
  7700  02B8  0876               	movf	??_Sensor_loadADCSettings+2,w
  7701  02B9  0087               	movwf	7
  7702  02BA  0874               	movf	??_Sensor_loadADCSettings,w
  7703  02BB  0081               	movwf	1
  7704  02BC                     l4275:	
  7705                           
  7706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  7707  02BC  0823               	movf	Sensor_loadADCSettings@sensor,w
  7708  02BD  3E05               	addlw	5
  7709  02BE  0086               	movwf	6
  7710  02BF  0187               	clrf	7
  7711  02C0  0801               	movf	1,w
  7712  02C1  00F4               	movwf	??_Sensor_loadADCSettings
  7713  02C2  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7714  02C3  3E19               	addlw	25
  7715  02C4  00F5               	movwf	??_Sensor_loadADCSettings+1
  7716  02C5  01F6               	clrf	??_Sensor_loadADCSettings+2
  7717  02C6  3007               	movlw	7
  7718  02C7  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
  7719  02C8  0875               	movf	??_Sensor_loadADCSettings+1,w
  7720  02C9  0086               	movwf	6
  7721  02CA  0876               	movf	??_Sensor_loadADCSettings+2,w
  7722  02CB  0087               	movwf	7
  7723  02CC  0874               	movf	??_Sensor_loadADCSettings,w
  7724  02CD  0081               	movwf	1
  7725  02CE                     l4277:	
  7726                           
  7727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  7728  02CE  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7729  02CF  3E13               	addlw	19
  7730  02D0  00F4               	movwf	??_Sensor_loadADCSettings
  7731  02D1  01F5               	clrf	??_Sensor_loadADCSettings+1
  7732  02D2  3007               	movlw	7
  7733  02D3  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
  7734  02D4  0874               	movf	??_Sensor_loadADCSettings,w
  7735  02D5  0086               	movwf	6
  7736  02D6  0875               	movf	??_Sensor_loadADCSettings+1,w
  7737  02D7  0087               	movwf	7
  7738  02D8  3050               	movlw	80
  7739  02D9  0081               	movwf	1
  7740  02DA                     l4279:	
  7741                           
  7742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 430:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  7743  02DA  30FE               	movlw	254
  7744  02DB  00F4               	movwf	??_Sensor_loadADCSettings
  7745  02DC  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7746  02DD  3E18               	addlw	24
  7747  02DE  0086               	movwf	6
  7748  02DF  0187               	clrf	7
  7749  02E0  3007               	movlw	7
  7750  02E1  3D87               	addwfc	7,f
  7751  02E2  0874               	movf	??_Sensor_loadADCSettings,w
  7752  02E3  0581               	andwf	1,f
  7753  02E4                     l4281:	
  7754                           
  7755                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 432:     if (Sensor_isCalibrated(sensor))
  7756  02E4  0823               	movf	Sensor_loadADCSettings@sensor,w
  7757  02E5  3189  21C4  3182   	fcall	_Sensor_isCalibrated
  7758  02E8  3A00               	xorlw	0
  7759  02E9  1903               	skipnz
  7760  02EA  2AEC               	goto	u3821
  7761  02EB  2AED               	goto	u3820
  7762  02EC                     u3821:	
  7763  02EC  2B13               	goto	l4285
  7764  02ED                     u3820:	
  7765  02ED                     l4283:	
  7766                           
  7767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 434:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  7768  02ED  0020               	movlb	0	; select bank0
  7769  02EE  0823               	movf	Sensor_loadADCSettings@sensor,w
  7770  02EF  3E02               	addlw	2
  7771  02F0  0086               	movwf	6
  7772  02F1  0187               	clrf	7
  7773  02F2  0801               	movf	1,w
  7774  02F3  00F4               	movwf	??_Sensor_loadADCSettings
  7775  02F4  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7776  02F5  3E16               	addlw	22
  7777  02F6  00F5               	movwf	??_Sensor_loadADCSettings+1
  7778  02F7  01F6               	clrf	??_Sensor_loadADCSettings+2
  7779  02F8  3007               	movlw	7
  7780  02F9  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
  7781  02FA  0875               	movf	??_Sensor_loadADCSettings+1,w
  7782  02FB  0086               	movwf	6
  7783  02FC  0876               	movf	??_Sensor_loadADCSettings+2,w
  7784  02FD  0087               	movwf	7
  7785  02FE  0874               	movf	??_Sensor_loadADCSettings,w
  7786  02FF  0081               	movwf	1
  7787                           
  7788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 435:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  7789  0300  0823               	movf	Sensor_loadADCSettings@sensor,w
  7790  0301  3E03               	addlw	3
  7791  0302  0086               	movwf	6
  7792  0303  0187               	clrf	7
  7793  0304  0801               	movf	1,w
  7794  0305  00F4               	movwf	??_Sensor_loadADCSettings
  7795  0306  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7796  0307  3E17               	addlw	23
  7797  0308  00F5               	movwf	??_Sensor_loadADCSettings+1
  7798  0309  01F6               	clrf	??_Sensor_loadADCSettings+2
  7799  030A  3007               	movlw	7
  7800  030B  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
  7801  030C  0875               	movf	??_Sensor_loadADCSettings+1,w
  7802  030D  0086               	movwf	6
  7803  030E  0876               	movf	??_Sensor_loadADCSettings+2,w
  7804  030F  0087               	movwf	7
  7805  0310  0874               	movf	??_Sensor_loadADCSettings,w
  7806  0311  0081               	movwf	1
  7807                           
  7808                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:     }
  7809  0312  2B4A               	goto	l213
  7810  0313                     l4285:	
  7811                           
  7812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 438:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 439:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  7813  0313  0020               	movlb	0	; select bank0
  7814  0314  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7815  0315  3E16               	addlw	22
  7816  0316  00F4               	movwf	??_Sensor_loadADCSettings
  7817  0317  01F5               	clrf	??_Sensor_loadADCSettings+1
  7818  0318  3007               	movlw	7
  7819  0319  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
  7820  031A  0874               	movf	??_Sensor_loadADCSettings,w
  7821  031B  0086               	movwf	6
  7822  031C  0875               	movf	??_Sensor_loadADCSettings+1,w
  7823  031D  0087               	movwf	7
  7824  031E  3020               	movlw	32
  7825  031F  0081               	movwf	1
  7826  0320                     l4287:	
  7827                           
  7828                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 440:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  7829  0320  0823               	movf	Sensor_loadADCSettings@sensor,w
  7830  0321  3189  21AB  3182   	fcall	_Sensor_isCalibratingAcqTime
  7831  0324  3A00               	xorlw	0
  7832  0325  1903               	skipnz
  7833  0326  2B28               	goto	u3831
  7834  0327  2B29               	goto	u3830
  7835  0328                     u3831:	
  7836  0328  2B3D               	goto	l4291
  7837  0329                     u3830:	
  7838  0329                     l4289:	
  7839                           
  7840                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 441:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  7841  0329  0020               	movlb	0	; select bank0
  7842  032A  0823               	movf	Sensor_loadADCSettings@sensor,w
  7843  032B  3E03               	addlw	3
  7844  032C  0086               	movwf	6
  7845  032D  0187               	clrf	7
  7846  032E  0801               	movf	1,w
  7847  032F  00F4               	movwf	??_Sensor_loadADCSettings
  7848  0330  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7849  0331  3E17               	addlw	23
  7850  0332  00F5               	movwf	??_Sensor_loadADCSettings+1
  7851  0333  01F6               	clrf	??_Sensor_loadADCSettings+2
  7852  0334  3007               	movlw	7
  7853  0335  3DF6               	addwfc	??_Sensor_loadADCSettings+2,f
  7854  0336  0875               	movf	??_Sensor_loadADCSettings+1,w
  7855  0337  0086               	movwf	6
  7856  0338  0876               	movf	??_Sensor_loadADCSettings+2,w
  7857  0339  0087               	movwf	7
  7858  033A  0874               	movf	??_Sensor_loadADCSettings,w
  7859  033B  0081               	movwf	1
  7860  033C  2B4A               	goto	l213
  7861  033D                     l4291:	
  7862                           
  7863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 443:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  7864  033D  0020               	movlb	0	; select bank0
  7865  033E  0822               	movf	Sensor_loadADCSettings@addressOffset,w
  7866  033F  3E17               	addlw	23
  7867  0340  00F4               	movwf	??_Sensor_loadADCSettings
  7868  0341  01F5               	clrf	??_Sensor_loadADCSettings+1
  7869  0342  3007               	movlw	7
  7870  0343  3DF5               	addwfc	??_Sensor_loadADCSettings+1,f
  7871  0344  0874               	movf	??_Sensor_loadADCSettings,w
  7872  0345  0086               	movwf	6
  7873  0346  0875               	movf	??_Sensor_loadADCSettings+1,w
  7874  0347  0087               	movwf	7
  7875  0348  3020               	movlw	32
  7876  0349  0081               	movwf	1
  7877  034A                     l213:	
  7878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     }
  7879                           
  7880                           
  7881                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  7882  034A  0823               	movf	Sensor_loadADCSettings@sensor,w
  7883  034B  3E04               	addlw	4
  7884  034C  0086               	movwf	6
  7885  034D  0187               	clrf	7
  7886  034E  0801               	movf	1,w
  7887  034F  00F4               	movwf	??_Sensor_loadADCSettings
  7888  0350  01F5               	clrf	??_Sensor_loadADCSettings+1
  7889  0351  3009               	movlw	9
  7890  0352                     u3845:	
  7891  0352  35F4               	lslf	??_Sensor_loadADCSettings,f
  7892  0353  0DF5               	rlf	??_Sensor_loadADCSettings+1,f
  7893  0354  0B89               	decfsz	9,f
  7894  0355  2B52               	goto	u3845
  7895  0356  3573               	lslf	Sensor_loadADCSettings@adc_index,w
  7896  0357  3E4B               	addlw	(low (_packet_sample| 0))& (0+255)
  7897  0358  0086               	movwf	6
  7898  0359  0187               	clrf	7
  7899  035A  0874               	movf	??_Sensor_loadADCSettings,w
  7900  035B  3FC0               	movwi [0]fsr1
  7901  035C  0875               	movf	??_Sensor_loadADCSettings+1,w
  7902  035D  3FC1               	movwi [1]fsr1
  7903  035E                     l207:	
  7904  035E  0008               	return
  7905  035F                     __end_of_Sensor_loadADCSettings:	
  7906                           
  7907                           	psect	text42
  7908  09C4                     __ptext42:	
  7909 ;; *************** function _Sensor_isCalibrated *****************
  7910 ;; Defined at:
  7911 ;;		line 903 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  sensor          1    wreg     PTR struct .
  7914 ;;		 -> NULL(0), mtouch_sensor(9), 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  sensor          1    2[COMMON] PTR struct .
  7917 ;;		 -> NULL(0), mtouch_sensor(9), 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      _Bool 
  7920 ;; Registers used:
  7921 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7927 ;;      Params:         0       0       0       0       0       0       0       0
  7928 ;;      Locals:         1       0       0       0       0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0
  7930 ;;      Totals:         1       0       0       0       0       0       0       0
  7931 ;;Total ram usage:        1 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    4
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		_Sensor_Acquisition
  7938 ;;		_Sensor_loadADCSettings
  7939 ;;		_Sensor_Acq_ExecutePacket
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           
  7944                           ;psect for function _Sensor_isCalibrated
  7945  09C4                     _Sensor_isCalibrated:	
  7946                           
  7947                           ;incstack = 0
  7948                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7949                           ;Sensor_isCalibrated@sensor stored from wreg
  7950  09C4  00F2               	movwf	Sensor_isCalibrated@sensor
  7951  09C5                     l4213:	
  7952                           
  7953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 903: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          904: {;mcc_generated_files/mtouch/mtouch_sensor.c: 905:     return (_Bool)sensor->calibr
      +                          ated;
  7954  09C5  0872               	movf	Sensor_isCalibrated@sensor,w
  7955  09C6  3E08               	addlw	8
  7956  09C7  0086               	movwf	6
  7957  09C8  0187               	clrf	7
  7958  09C9  0C01               	rrf	1,w
  7959  09CA  0C89               	rrf	9,f
  7960  09CB  3901               	andlw	1
  7961  09CC                     l350:	
  7962  09CC  0008               	return
  7963  09CD                     __end_of_Sensor_isCalibrated:	
  7964                           
  7965                           	psect	text43
  7966  0A6D                     __ptext43:	
  7967 ;; *************** function _Sensor_isEnabled *****************
  7968 ;; Defined at:
  7969 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  sensor          1    wreg     PTR struct .
  7972 ;;		 -> NULL(0), mtouch_sensor(9), 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  sensor          1    3[COMMON] PTR struct .
  7975 ;;		 -> NULL(0), mtouch_sensor(9), 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      _Bool 
  7978 ;; Registers used:
  7979 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7985 ;;      Params:         0       0       0       0       0       0       0       0
  7986 ;;      Locals:         1       0       0       0       0       0       0       0
  7987 ;;      Temps:          1       0       0       0       0       0       0       0
  7988 ;;      Totals:         2       0       0       0       0       0       0       0
  7989 ;;Total ram usage:        2 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    4
  7992 ;; This function calls:
  7993 ;;		Nothing
  7994 ;; This function is called by:
  7995 ;;		_Sensor_Service
  7996 ;;		_Sensor_postAcquisitionProcess
  7997 ;;		_Sensor_Acq_ExecutePacket
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           
  8002                           ;psect for function _Sensor_isEnabled
  8003  0A6D                     _Sensor_isEnabled:	
  8004                           
  8005                           ;incstack = 0
  8006                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8007                           ;Sensor_isEnabled@sensor stored from wreg
  8008  0A6D  00F3               	movwf	Sensor_isEnabled@sensor
  8009  0A6E                     l4241:	
  8010                           
  8011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 838: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 839: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 840:     if(sensor!=((void*)0))
  8012  0A6E  0873               	movf	Sensor_isEnabled@sensor,w
  8013  0A6F  1903               	btfsc	3,2
  8014  0A70  2A72               	goto	u3781
  8015  0A71  2A73               	goto	u3780
  8016  0A72                     u3781:	
  8017  0A72  2A7D               	goto	l4249
  8018  0A73                     u3780:	
  8019  0A73                     l4243:	
  8020                           
  8021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841:         return (_Bool)sensor->enabled;
  8022  0A73  0873               	movf	Sensor_isEnabled@sensor,w
  8023  0A74  3E08               	addlw	8
  8024  0A75  0086               	movwf	6
  8025  0A76  0187               	clrf	7
  8026  0A77  0C01               	rrf	1,w
  8027  0A78  00F2               	movwf	??_Sensor_isEnabled
  8028  0A79  0CF2               	rrf	??_Sensor_isEnabled,f
  8029  0A7A  0C72               	rrf	??_Sensor_isEnabled,w
  8030  0A7B  3901               	andlw	1
  8031  0A7C  2A7E               	goto	l323
  8032  0A7D                     l4249:	
  8033                           
  8034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 843:         return 0;
  8035  0A7D  3000               	movlw	0
  8036  0A7E                     l323:	
  8037  0A7E  0008               	return
  8038  0A7F                     __end_of_Sensor_isEnabled:	
  8039                           
  8040                           	psect	text44
  8041  0A0B                     __ptext44:	
  8042 ;; *************** function _Sensor_isActive *****************
  8043 ;; Defined at:
  8044 ;;		line 865 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  sensor          1    wreg     PTR struct .
  8047 ;;		 -> NULL(0), mtouch_sensor(9), 
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  sensor          1    2[COMMON] PTR struct .
  8050 ;;		 -> NULL(0), mtouch_sensor(9), 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      _Bool 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8060 ;;      Params:         0       0       0       0       0       0       0       0
  8061 ;;      Locals:         1       0       0       0       0       0       0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0       0
  8063 ;;      Totals:         1       0       0       0       0       0       0       0
  8064 ;;Total ram usage:        1 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    4
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_Sensor_Acquisition
  8071 ;;		_Sensor_Acq_ExecutePacket
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           
  8076                           ;psect for function _Sensor_isActive
  8077  0A0B                     _Sensor_isActive:	
  8078                           
  8079                           ;incstack = 0
  8080                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8081                           ;Sensor_isActive@sensor stored from wreg
  8082  0A0B  00F2               	movwf	Sensor_isActive@sensor
  8083  0A0C                     l4253:	
  8084                           
  8085                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 865: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 866:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 867:     if(sensor == ((void*)0))
  8086  0A0C  0872               	movf	Sensor_isActive@sensor,w
  8087  0A0D  1D03               	btfss	3,2
  8088  0A0E  2A10               	goto	u3791
  8089  0A0F  2A11               	goto	u3790
  8090  0A10                     u3791:	
  8091  0A10  2A13               	goto	l4259
  8092  0A11                     u3790:	
  8093  0A11                     l4255:	
  8094                           
  8095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  8096  0A11  3000               	movlw	0
  8097  0A12  2A19               	goto	l334
  8098  0A13                     l4259:	
  8099                           
  8100                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 870:     return (_Bool)sensor->active;
  8101  0A13  0872               	movf	Sensor_isActive@sensor,w
  8102  0A14  3E08               	addlw	8
  8103  0A15  0086               	movwf	6
  8104  0A16  0187               	clrf	7
  8105  0A17  0C01               	rrf	1,w
  8106  0A18  3901               	andlw	1
  8107  0A19                     l334:	
  8108  0A19  0008               	return
  8109  0A1A                     __end_of_Sensor_isActive:	
  8110                           
  8111                           	psect	text45
  8112  035F                     __ptext45:	
  8113 ;; *************** function _Sensor_autoCalibration *****************
  8114 ;; Defined at:
  8115 ;;		line 671 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  sensor          1    wreg     PTR struct .
  8118 ;;		 -> NULL(0), mtouch_sensor(9), 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  sensor          1    1[BANK0 ] PTR struct .
  8121 ;;		 -> NULL(0), mtouch_sensor(9), 
  8122 ;;  adcIndex        1    0[BANK0 ] unsigned char 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  1    wreg      void 
  8125 ;; Registers used:
  8126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8132 ;;      Params:         0       0       0       0       0       0       0       0
  8133 ;;      Locals:         0       2       0       0       0       0       0       0
  8134 ;;      Temps:          4       0       0       0       0       0       0       0
  8135 ;;      Totals:         4       2       0       0       0       0       0       0
  8136 ;;Total ram usage:        6 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    5
  8139 ;; This function calls:
  8140 ;;		_Sensor_getScanGroupIndex
  8141 ;;		_Sensor_isCalibratingAcqTime
  8142 ;;		_Sensor_setCalibratAcqTime
  8143 ;;		_Sensor_setCalibrated
  8144 ;;		_abs
  8145 ;; This function is called by:
  8146 ;;		_Sensor_Acq_ExecutePacket
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _Sensor_autoCalibration
  8152  035F                     _Sensor_autoCalibration:	
  8153                           
  8154                           ;incstack = 0
  8155                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8156                           ;Sensor_autoCalibration@sensor stored from wreg
  8157  035F  0020               	movlb	0	; select bank0
  8158  0360  00A1               	movwf	Sensor_autoCalibration@sensor
  8159  0361                     l4299:	
  8160                           
  8161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 672: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 673:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8162  0361  0821               	movf	Sensor_autoCalibration@sensor,w
  8163  0362  318D  2576  3183   	fcall	_Sensor_getScanGroupIndex
  8164  0365  00F6               	movwf	??_Sensor_autoCalibration
  8165  0366  0876               	movf	??_Sensor_autoCalibration,w
  8166  0367  0020               	movlb	0	; select bank0
  8167  0368  00A0               	movwf	Sensor_autoCalibration@adcIndex
  8168  0369                     l4301:	
  8169                           
  8170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8171  0369  0821               	movf	Sensor_autoCalibration@sensor,w
  8172  036A  3189  21AB  3183   	fcall	_Sensor_isCalibratingAcqTime
  8173  036D  3A00               	xorlw	0
  8174  036E  1D03               	skipz
  8175  036F  2B71               	goto	u3851
  8176  0370  2B72               	goto	u3850
  8177  0371                     u3851:	
  8178  0371  2BA9               	goto	l4311
  8179  0372                     u3850:	
  8180  0372                     l4303:	
  8181                           
  8182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 677:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8183  0372  0020               	movlb	0	; select bank0
  8184  0373  3520               	lslf	Sensor_autoCalibration@adcIndex,w
  8185  0374  3E4B               	addlw	(low (_packet_sample| 0))& (0+255)
  8186  0375  0086               	movwf	6
  8187  0376  0187               	clrf	7
  8188  0377  3F40               	moviw [0]fsr1
  8189  0378  00F6               	movwf	??_Sensor_autoCalibration
  8190  0379  3F41               	moviw [1]fsr1
  8191  037A  00F7               	movwf	??_Sensor_autoCalibration+1
  8192  037B  0821               	movf	Sensor_autoCalibration@sensor,w
  8193  037C  3E04               	addlw	4
  8194  037D  0086               	movwf	6
  8195  037E  0187               	clrf	7
  8196  037F  0801               	movf	1,w
  8197  0380  00F8               	movwf	??_Sensor_autoCalibration+2
  8198  0381  01F9               	clrf	??_Sensor_autoCalibration+3
  8199  0382  3009               	movlw	9
  8200  0383                     u3865:	
  8201  0383  35F8               	lslf	??_Sensor_autoCalibration+2,f
  8202  0384  0DF9               	rlf	??_Sensor_autoCalibration+3,f
  8203  0385  0B89               	decfsz	9,f
  8204  0386  2B83               	goto	u3865
  8205  0387  0877               	movf	??_Sensor_autoCalibration+1,w
  8206  0388  0279               	subwf	??_Sensor_autoCalibration+3,w
  8207  0389  1D03               	skipz
  8208  038A  2B8D               	goto	u3875
  8209  038B  0876               	movf	??_Sensor_autoCalibration,w
  8210  038C  0278               	subwf	??_Sensor_autoCalibration+2,w
  8211  038D                     u3875:	
  8212  038D  1803               	skipnc
  8213  038E  2B90               	goto	u3871
  8214  038F  2B91               	goto	u3870
  8215  0390                     u3871:	
  8216  0390  2BA4               	goto	l4309
  8217  0391                     u3870:	
  8218  0391                     l4305:	
  8219                           
  8220                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 679:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  8221  0391  3001               	movlw	1
  8222  0392  00F6               	movwf	??_Sensor_autoCalibration
  8223  0393  0821               	movf	Sensor_autoCalibration@sensor,w
  8224  0394  3E05               	addlw	5
  8225  0395  0086               	movwf	6
  8226  0396  0187               	clrf	7
  8227  0397  0876               	movf	??_Sensor_autoCalibration,w
  8228  0398  0781               	addwf	1,f
  8229  0399  300F               	movlw	15
  8230  039A  0201               	subwf	1,w
  8231  039B  1C03               	skipc
  8232  039C  2B9E               	goto	u3881
  8233  039D  2B9F               	goto	u3880
  8234  039E                     u3881:	
  8235  039E  2BFC               	goto	l275
  8236  039F                     u3880:	
  8237  039F                     l4307:	
  8238                           
  8239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  8240  039F  0821               	movf	Sensor_autoCalibration@sensor,w
  8241  03A0  3189  21EF  3183   	fcall	_Sensor_setCalibratAcqTime
  8242  03A3  2BFC               	goto	l275
  8243  03A4                     l4309:	
  8244                           
  8245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 684:              Sensor_setCalibratAcqTime(sensor);
  8246  03A4  0821               	movf	Sensor_autoCalibration@sensor,w
  8247  03A5  3189  21EF  3183   	fcall	_Sensor_setCalibratAcqTime
  8248  03A8  2BFC               	goto	l275
  8249  03A9                     l4311:	
  8250                           
  8251                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 689:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  8252  03A9  0020               	movlb	0	; select bank0
  8253  03AA  0821               	movf	Sensor_autoCalibration@sensor,w
  8254  03AB  3E04               	addlw	4
  8255  03AC  0086               	movwf	6
  8256  03AD  0187               	clrf	7
  8257  03AE  0801               	movf	1,w
  8258  03AF  00F6               	movwf	??_Sensor_autoCalibration
  8259  03B0  01F7               	clrf	??_Sensor_autoCalibration+1
  8260  03B1  35F6               	lslf	??_Sensor_autoCalibration,f
  8261  03B2  0DF7               	rlf	??_Sensor_autoCalibration+1,f
  8262  03B3  0821               	movf	Sensor_autoCalibration@sensor,w
  8263  03B4  3E06               	addlw	6
  8264  03B5  0086               	movwf	6
  8265  03B6  0187               	clrf	7
  8266  03B7  3520               	lslf	Sensor_autoCalibration@adcIndex,w
  8267  03B8  3E4B               	addlw	(low (_packet_sample| 0))& (0+255)
  8268  03B9  0084               	movwf	4
  8269  03BA  0185               	clrf	5
  8270  03BB  3F40               	moviw [0]fsr1
  8271  03BC  0200               	subwf	0,w
  8272  03BD  00F2               	movwf	abs@a
  8273  03BE  3101               	addfsr 0,1
  8274  03BF  3F41               	moviw [1]fsr1
  8275  03C0  3B00               	subwfb	0,w
  8276  03C1  00F3               	movwf	abs@a+1
  8277  03C2  318B  238B  3183   	fcall	_abs
  8278  03C5  0877               	movf	??_Sensor_autoCalibration+1,w
  8279  03C6  0273               	subwf	?_abs+1,w
  8280  03C7  1D03               	skipz
  8281  03C8  2BCB               	goto	u3895
  8282  03C9  0876               	movf	??_Sensor_autoCalibration,w
  8283  03CA  0272               	subwf	?_abs,w
  8284  03CB                     u3895:	
  8285  03CB  1803               	skipnc
  8286  03CC  2BCE               	goto	u3891
  8287  03CD  2BCF               	goto	u3890
  8288  03CE                     u3891:	
  8289  03CE  2BDD               	goto	l4317
  8290  03CF                     u3890:	
  8291  03CF                     l4313:	
  8292                           
  8293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 690:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 691:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  8294  03CF  3020               	movlw	32
  8295  03D0  00F6               	movwf	??_Sensor_autoCalibration
  8296  03D1  0020               	movlb	0	; select bank0
  8297  03D2  0821               	movf	Sensor_autoCalibration@sensor,w
  8298  03D3  3E02               	addlw	2
  8299  03D4  0086               	movwf	6
  8300  03D5  0187               	clrf	7
  8301  03D6  0876               	movf	??_Sensor_autoCalibration,w
  8302  03D7  0081               	movwf	1
  8303  03D8                     l4315:	
  8304                           
  8305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:             Sensor_setCalibrated(senso
      +                          r);
  8306  03D8  0821               	movf	Sensor_autoCalibration@sensor,w
  8307  03D9  3189  21E3  3183   	fcall	_Sensor_setCalibrated
  8308                           
  8309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:         }
  8310  03DC  2BFC               	goto	l275
  8311  03DD                     l4317:	
  8312                           
  8313                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 699:             sensor->acquisition_time += (uint8_t)2;
  8314  03DD  3002               	movlw	2
  8315  03DE  00F6               	movwf	??_Sensor_autoCalibration
  8316  03DF  0020               	movlb	0	; select bank0
  8317  03E0  0821               	movf	Sensor_autoCalibration@sensor,w
  8318  03E1  3E03               	addlw	3
  8319  03E2  0086               	movwf	6
  8320  03E3  0187               	clrf	7
  8321  03E4  0876               	movf	??_Sensor_autoCalibration,w
  8322  03E5  0781               	addwf	1,f
  8323                           
  8324                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  8325  03E6  0821               	movf	Sensor_autoCalibration@sensor,w
  8326  03E7  3E03               	addlw	3
  8327  03E8  0086               	movwf	6
  8328  03E9  0187               	clrf	7
  8329  03EA  3020               	movlw	32
  8330  03EB  0201               	subwf	1,w
  8331  03EC  1C03               	skipc
  8332  03ED  2BEF               	goto	u3901
  8333  03EE  2BF0               	goto	u3900
  8334  03EF                     u3901:	
  8335  03EF  2BFC               	goto	l275
  8336  03F0                     u3900:	
  8337  03F0                     l4319:	
  8338                           
  8339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 702:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  8340  03F0  3020               	movlw	32
  8341  03F1  00F6               	movwf	??_Sensor_autoCalibration
  8342  03F2  0821               	movf	Sensor_autoCalibration@sensor,w
  8343  03F3  3E02               	addlw	2
  8344  03F4  0086               	movwf	6
  8345  03F5  0187               	clrf	7
  8346  03F6  0876               	movf	??_Sensor_autoCalibration,w
  8347  03F7  0081               	movwf	1
  8348  03F8                     l4321:	
  8349                           
  8350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:                 Sensor_setCalibrated(s
      +                          ensor);
  8351  03F8  0821               	movf	Sensor_autoCalibration@sensor,w
  8352  03F9  3189  21E3  3183   	fcall	_Sensor_setCalibrated
  8353  03FC                     l275:	
  8354  03FC  0008               	return
  8355  03FD                     __end_of_Sensor_autoCalibration:	
  8356                           
  8357                           	psect	text46
  8358  0B8B                     __ptext46:	
  8359 ;; *************** function _abs *****************
  8360 ;; Defined at:
  8361 ;;		line 1 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/abs.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;  a               2    2[COMMON] int 
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;		None
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  2    2[COMMON] int 
  8368 ;; Registers used:
  8369 ;;		wreg, status,2, status,0
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8375 ;;      Params:         2       0       0       0       0       0       0       0
  8376 ;;      Locals:         0       0       0       0       0       0       0       0
  8377 ;;      Temps:          2       0       0       0       0       0       0       0
  8378 ;;      Totals:         4       0       0       0       0       0       0       0
  8379 ;;Total ram usage:        4 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    4
  8382 ;; This function calls:
  8383 ;;		Nothing
  8384 ;; This function is called by:
  8385 ;;		_Sensor_postAcquisitionProcess
  8386 ;;		_Sensor_Acq_ExecutePacket
  8387 ;;		_Sensor_autoCalibration
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           
  8392                           ;psect for function _abs
  8393  0B8B                     _abs:	
  8394  0B8B                     l4217:	
  8395                           ;incstack = 0
  8396                           ; Regs used in _abs: [wreg+status,2+status,0]
  8397                           
  8398  0B8B  0873               	movf	abs@a+1,w
  8399  0B8C  3A80               	xorlw	128
  8400  0B8D  00F4               	movwf	??_abs
  8401  0B8E  3080               	movlw	128
  8402  0B8F  0274               	subwf	??_abs,w
  8403  0B90  1D03               	skipz
  8404  0B91  2B94               	goto	u3775
  8405  0B92  3001               	movlw	1
  8406  0B93  0272               	subwf	abs@a,w
  8407  0B94                     u3775:	
  8408  0B94  1803               	skipnc
  8409  0B95  2B97               	goto	u3771
  8410  0B96  2B98               	goto	u3770
  8411  0B97                     u3771:	
  8412  0B97  2BA4               	goto	l1564
  8413  0B98                     u3770:	
  8414  0B98                     l4219:	
  8415  0B98  0972               	comf	abs@a,w
  8416  0B99  00F4               	movwf	??_abs
  8417  0B9A  0973               	comf	abs@a+1,w
  8418  0B9B  00F5               	movwf	??_abs+1
  8419  0B9C  0AF4               	incf	??_abs,f
  8420  0B9D  1903               	skipnz
  8421  0B9E  0AF5               	incf	??_abs+1,f
  8422  0B9F  0874               	movf	??_abs,w
  8423  0BA0  00F2               	movwf	?_abs
  8424  0BA1  0875               	movf	??_abs+1,w
  8425  0BA2  00F3               	movwf	?_abs+1
  8426  0BA3  2BA4               	goto	l1567
  8427  0BA4                     l1564:	
  8428  0BA4                     l1567:	
  8429  0BA4  0008               	return
  8430  0BA5                     __end_of_abs:	
  8431                           
  8432                           	psect	text47
  8433  09E3                     __ptext47:	
  8434 ;; *************** function _Sensor_setCalibrated *****************
  8435 ;; Defined at:
  8436 ;;		line 908 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;  sensor          1    wreg     PTR struct .
  8439 ;;		 -> NULL(0), mtouch_sensor(9), 
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  sensor          1    2[COMMON] PTR struct .
  8442 ;;		 -> NULL(0), mtouch_sensor(9), 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8452 ;;      Params:         0       0       0       0       0       0       0       0
  8453 ;;      Locals:         1       0       0       0       0       0       0       0
  8454 ;;      Temps:          0       0       0       0       0       0       0       0
  8455 ;;      Totals:         1       0       0       0       0       0       0       0
  8456 ;;Total ram usage:        1 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    4
  8459 ;; This function calls:
  8460 ;;		Nothing
  8461 ;; This function is called by:
  8462 ;;		_Sensor_autoCalibration
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           
  8467                           ;psect for function _Sensor_setCalibrated
  8468  09E3                     _Sensor_setCalibrated:	
  8469                           
  8470                           ;incstack = 0
  8471                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8472                           ;Sensor_setCalibrated@sensor stored from wreg
  8473  09E3  00F2               	movwf	Sensor_setCalibrated@sensor
  8474  09E4                     l4227:	
  8475                           
  8476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 908: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          909: {;mcc_generated_files/mtouch/mtouch_sensor.c: 910:     sensor->calibrated = 1;
  8477  09E4  0872               	movf	Sensor_setCalibrated@sensor,w
  8478  09E5  3E08               	addlw	8
  8479  09E6  0086               	movwf	6
  8480  09E7  0187               	clrf	7
  8481  09E8  1501               	bsf	1,2
  8482                           
  8483                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 911:     sensor->acqTime_cal = 0;
  8484  09E9  0872               	movf	Sensor_setCalibrated@sensor,w
  8485  09EA  3E08               	addlw	8
  8486  09EB  0086               	movwf	6
  8487  09EC  0187               	clrf	7
  8488  09ED  1201               	bcf	1,4
  8489  09EE                     l353:	
  8490  09EE  0008               	return
  8491  09EF                     __end_of_Sensor_setCalibrated:	
  8492                           
  8493                           	psect	text48
  8494  09EF                     __ptext48:	
  8495 ;; *************** function _Sensor_setCalibratAcqTime *****************
  8496 ;; Defined at:
  8497 ;;		line 914 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  sensor          1    wreg     PTR struct .
  8500 ;;		 -> NULL(0), mtouch_sensor(9), 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  sensor          1    2[COMMON] PTR struct .
  8503 ;;		 -> NULL(0), mtouch_sensor(9), 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      void 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8513 ;;      Params:         0       0       0       0       0       0       0       0
  8514 ;;      Locals:         1       0       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0
  8516 ;;      Totals:         1       0       0       0       0       0       0       0
  8517 ;;Total ram usage:        1 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    4
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_Sensor_autoCalibration
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _Sensor_setCalibratAcqTime
  8529  09EF                     _Sensor_setCalibratAcqTime:	
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  8533                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  8534  09EF  00F2               	movwf	Sensor_setCalibratAcqTime@sensor
  8535  09F0                     l4225:	
  8536                           
  8537                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 914: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 915: {;mcc_generated_files/mtouch/mtouch_sensor.c: 916:     sensor->acqTime_cal = 1
      +                          ;
  8538  09F0  0872               	movf	Sensor_setCalibratAcqTime@sensor,w
  8539  09F1  3E08               	addlw	8
  8540  09F2  0086               	movwf	6
  8541  09F3  0187               	clrf	7
  8542  09F4  1601               	bsf	1,4
  8543                           
  8544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  8545  09F5  0872               	movf	Sensor_setCalibratAcqTime@sensor,w
  8546  09F6  3E03               	addlw	3
  8547  09F7  0086               	movwf	6
  8548  09F8  0187               	clrf	7
  8549  09F9  0181               	clrf	1
  8550  09FA  0A81               	incf	1,f
  8551  09FB                     l356:	
  8552  09FB  0008               	return
  8553  09FC                     __end_of_Sensor_setCalibratAcqTime:	
  8554                           
  8555                           	psect	text49
  8556  09AB                     __ptext49:	
  8557 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  8558 ;; Defined at:
  8559 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  sensor          1    wreg     PTR struct .
  8562 ;;		 -> NULL(0), mtouch_sensor(9), 
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  sensor          1    2[COMMON] PTR struct .
  8565 ;;		 -> NULL(0), mtouch_sensor(9), 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      _Bool 
  8568 ;; Registers used:
  8569 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8575 ;;      Params:         0       0       0       0       0       0       0       0
  8576 ;;      Locals:         1       0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0
  8578 ;;      Totals:         1       0       0       0       0       0       0       0
  8579 ;;Total ram usage:        1 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    4
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_Sensor_loadADCSettings
  8586 ;;		_Sensor_autoCalibration
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _Sensor_isCalibratingAcqTime
  8592  09AB                     _Sensor_isCalibratingAcqTime:	
  8593                           
  8594                           ;incstack = 0
  8595                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  8596                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  8597  09AB  00F2               	movwf	Sensor_isCalibratingAcqTime@sensor
  8598  09AC                     l4221:	
  8599                           
  8600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor
      +                          ->acqTime_cal;
  8601  09AC  0872               	movf	Sensor_isCalibratingAcqTime@sensor,w
  8602  09AD  3E08               	addlw	8
  8603  09AE  0086               	movwf	6
  8604  09AF  0187               	clrf	7
  8605  09B0  0E01               	swapf	1,w
  8606  09B1  3901               	andlw	1
  8607  09B2                     l359:	
  8608  09B2  0008               	return
  8609  09B3                     __end_of_Sensor_isCalibratingAcqTime:	
  8610                           
  8611                           	psect	text50
  8612  0D76                     __ptext50:	
  8613 ;; *************** function _Sensor_getScanGroupIndex *****************
  8614 ;; Defined at:
  8615 ;;		line 337 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  sensor          1    wreg     PTR struct .
  8618 ;;		 -> NULL(0), mtouch_sensor(9), 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  sensor          1    4[COMMON] PTR struct .
  8621 ;;		 -> NULL(0), mtouch_sensor(9), 
  8622 ;;  sensorGroup     1    5[COMMON] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      unsigned char 
  8625 ;; Registers used:
  8626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8632 ;;      Params:         0       0       0       0       0       0       0       0
  8633 ;;      Locals:         2       0       0       0       0       0       0       0
  8634 ;;      Temps:          2       0       0       0       0       0       0       0
  8635 ;;      Totals:         4       0       0       0       0       0       0       0
  8636 ;;Total ram usage:        4 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    4
  8639 ;; This function calls:
  8640 ;;		Nothing
  8641 ;; This function is called by:
  8642 ;;		_Sensor_postAcquisitionProcess
  8643 ;;		_Sensor_autoCalibration
  8644 ;;		_Sensor_RawSample_Update
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           
  8649                           ;psect for function _Sensor_getScanGroupIndex
  8650  0D76                     _Sensor_getScanGroupIndex:	
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  8654                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  8655  0D76  00F4               	movwf	Sensor_getScanGroupIndex@sensor
  8656  0D77                     l4189:	
  8657                           
  8658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 338: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 339:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 340:     for(sensorGroup = 0; sensorGroup < 1u; sensorGroup++)
  8659  0D77  01F5               	clrf	Sensor_getScanGroupIndex@sensorGroup
  8660  0D78                     l4195:	
  8661                           
  8662                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 341:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 342:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  8663  0D78  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8664  0D79  00F2               	movwf	??_Sensor_getScanGroupIndex
  8665  0D7A  01F3               	clrf	??_Sensor_getScanGroupIndex+1
  8666  0D7B  35F2               	lslf	??_Sensor_getScanGroupIndex,f
  8667  0D7C  0DF3               	rlf	??_Sensor_getScanGroupIndex+1,f
  8668  0D7D  3015               	movlw	low (_sensor_scan_group| (0+32768))
  8669  0D7E  0772               	addwf	??_Sensor_getScanGroupIndex,w
  8670  0D7F  0084               	movwf	4
  8671  0D80  3090               	movlw	high (_sensor_scan_group| (0+32768))
  8672  0D81  3D73               	addwfc	??_Sensor_getScanGroupIndex+1,w
  8673  0D82  0085               	movwf	5
  8674  0D83  0800               	movf	0,w	;code access
  8675  0D84  0674               	xorwf	Sensor_getScanGroupIndex@sensor,w
  8676  0D85  1D03               	skipz
  8677  0D86  2D88               	goto	u3741
  8678  0D87  2D89               	goto	u3740
  8679  0D88                     u3741:	
  8680  0D88  2D8B               	goto	l4201
  8681  0D89                     u3740:	
  8682  0D89                     l4197:	
  8683                           
  8684                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 343:             return 0;
  8685  0D89  3000               	movlw	0
  8686  0D8A  2DA8               	goto	l177
  8687  0D8B                     l4201:	
  8688                           
  8689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 344:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  8690  0D8B  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8691  0D8C  00F2               	movwf	??_Sensor_getScanGroupIndex
  8692  0D8D  01F3               	clrf	??_Sensor_getScanGroupIndex+1
  8693  0D8E  35F2               	lslf	??_Sensor_getScanGroupIndex,f
  8694  0D8F  0DF3               	rlf	??_Sensor_getScanGroupIndex+1,f
  8695  0D90  3016               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  8696  0D91  0772               	addwf	??_Sensor_getScanGroupIndex,w
  8697  0D92  0084               	movwf	4
  8698  0D93  3090               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  8699  0D94  3D73               	addwfc	??_Sensor_getScanGroupIndex+1,w
  8700  0D95  0085               	movwf	5
  8701  0D96  0800               	movf	0,w	;code access
  8702  0D97  0674               	xorwf	Sensor_getScanGroupIndex@sensor,w
  8703  0D98  1D03               	skipz
  8704  0D99  2D9B               	goto	u3751
  8705  0D9A  2D9C               	goto	u3750
  8706  0D9B                     u3751:	
  8707  0D9B  2D9E               	goto	l4207
  8708  0D9C                     u3750:	
  8709  0D9C                     l4203:	
  8710                           
  8711                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:             return 1;
  8712  0D9C  3001               	movlw	1
  8713  0D9D  2DA8               	goto	l177
  8714  0D9E                     l4207:	
  8715                           
  8716                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:     }
  8717  0D9E  3001               	movlw	1
  8718  0D9F  00F2               	movwf	??_Sensor_getScanGroupIndex
  8719  0DA0  0872               	movf	??_Sensor_getScanGroupIndex,w
  8720  0DA1  07F5               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  8721  0DA2  0875               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8722  0DA3  1903               	btfsc	3,2
  8723  0DA4  2DA6               	goto	u3761
  8724  0DA5  2DA7               	goto	u3760
  8725  0DA6                     u3761:	
  8726  0DA6  2D78               	goto	l4195
  8727  0DA7                     u3760:	
  8728  0DA7  2D89               	goto	l4197
  8729  0DA8                     l177:	
  8730  0DA8  0008               	return
  8731  0DA9                     __end_of_Sensor_getScanGroupIndex:	
  8732                           
  8733                           	psect	text51
  8734  0A29                     __ptext51:	
  8735 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  8736 ;; Defined at:
  8737 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;		None
  8740 ;; Auto vars:     Size  Location     Type
  8741 ;;		None
  8742 ;; Return value:  Size  Location     Type
  8743 ;;                  1    wreg      void 
  8744 ;; Registers used:
  8745 ;;		wreg, status,2, status,0
  8746 ;; Tracked objects:
  8747 ;;		On entry : 0/0
  8748 ;;		On exit  : 0/0
  8749 ;;		Unchanged: 0/0
  8750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8751 ;;      Params:         0       0       0       0       0       0       0       0
  8752 ;;      Locals:         0       0       0       0       0       0       0       0
  8753 ;;      Temps:          0       0       0       0       0       0       0       0
  8754 ;;      Totals:         0       0       0       0       0       0       0       0
  8755 ;;Total ram usage:        0 bytes
  8756 ;; Hardware stack levels used:    1
  8757 ;; Hardware stack levels required when called:    4
  8758 ;; This function calls:
  8759 ;;		Nothing
  8760 ;; This function is called by:
  8761 ;;		_Sensor_Acq_ExecutePacket
  8762 ;;		_MTOUCH_Initialize
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           
  8767                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  8768  0A29                     _MTOUCH_Sensor_Scan_Initialize:	
  8769  0A29                     l4229:	
  8770                           ;incstack = 0
  8771                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  8772                           
  8773                           
  8774                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 224:     T2CONbits.T2CKPS = 0x0;
  8775  0A29  30FC               	movlw	-4
  8776  0A2A  0020               	movlb	0	; select bank0
  8777  0A2B  059C               	andwf	28,f	;volatile
  8778  0A2C                     l4231:	
  8779                           
  8780                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 226:     AD1CON0 = (uint8_t)0;
  8781  0A2C  002E               	movlb	14	; select bank14
  8782  0A2D  0191               	clrf	17	;volatile
  8783  0A2E                     l4233:	
  8784                           
  8785                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 227:     AD2CON0 = (uint8_t)0;
  8786  0A2E  002F               	movlb	15	; select bank15
  8787  0A2F  0191               	clrf	17	;volatile
  8788  0A30                     l4235:	
  8789                           
  8790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x0
      +                          <<4 | 0x0 );
  8791  0A30  3080               	movlw	128
  8792  0A31  002E               	movlb	14	; select bank14
  8793  0A32  0092               	movwf	18	;volatile
  8794  0A33                     l4237:	
  8795                           
  8796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 229:     AD1CON3 = (uint8_t)0b01000000;
  8797  0A33  3040               	movlw	64
  8798  0A34  0094               	movwf	20	;volatile
  8799  0A35                     l4239:	
  8800                           
  8801                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     AD2CON3 = (uint8_t)0b01000000;
  8802  0A35  3040               	movlw	64
  8803  0A36  002F               	movlb	15	; select bank15
  8804  0A37  0094               	movwf	20	;volatile
  8805  0A38                     l137:	
  8806  0A38  0008               	return
  8807  0A39                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  8808                           
  8809                           	psect	text52
  8810  0A4A                     __ptext52:	
  8811 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  8812 ;; Defined at:
  8813 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  button          1   15[BANK0 ] enum E3067
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      void 
  8820 ;; Registers used:
  8821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8827 ;;      Params:         0       0       0       0       0       0       0       0
  8828 ;;      Locals:         0       1       0       0       0       0       0       0
  8829 ;;      Temps:          0       1       0       0       0       0       0       0
  8830 ;;      Totals:         0       2       0       0       0       0       0       0
  8831 ;;Total ram usage:        2 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    9
  8834 ;; This function calls:
  8835 ;;		_Button_Service
  8836 ;; This function is called by:
  8837 ;;		_MTOUCH_Service_Mainloop
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           
  8842                           ;psect for function _MTOUCH_Button_ServiceAll
  8843  0A4A                     _MTOUCH_Button_ServiceAll:	
  8844  0A4A                     l4913:	
  8845                           ;incstack = 0
  8846                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8847                           
  8848                           
  8849                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 176:     for (button = 0; button < 1u; button
      +                          ++)
  8850  0A4A  0020               	movlb	0	; select bank0
  8851  0A4B  01AF               	clrf	MTOUCH_Button_ServiceAll@button
  8852  0A4C                     l4919:	
  8853                           
  8854                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 178:         Button_Service(button);
  8855  0A4C  082F               	movf	MTOUCH_Button_ServiceAll@button,w
  8856  0A4D  318F  274C  318A   	fcall	_Button_Service
  8857  0A50                     l4921:	
  8858                           
  8859                           ;mcc_generated_files/mtouch/mtouch_button.c: 179:     }
  8860  0A50  3001               	movlw	1
  8861  0A51  0020               	movlb	0	; select bank0
  8862  0A52  00AE               	movwf	??_MTOUCH_Button_ServiceAll
  8863  0A53  082E               	movf	??_MTOUCH_Button_ServiceAll,w
  8864  0A54  07AF               	addwf	MTOUCH_Button_ServiceAll@button,f
  8865  0A55                     l4923:	
  8866  0A55  082F               	movf	MTOUCH_Button_ServiceAll@button,w
  8867  0A56  1903               	btfsc	3,2
  8868  0A57  2A59               	goto	u4851
  8869  0A58  2A5A               	goto	u4850
  8870  0A59                     u4851:	
  8871  0A59  2A4C               	goto	l4919
  8872  0A5A                     u4850:	
  8873  0A5A                     l505:	
  8874  0A5A  0008               	return
  8875  0A5B                     __end_of_MTOUCH_Button_ServiceAll:	
  8876                           
  8877                           	psect	text53
  8878  0F4C                     __ptext53:	
  8879 ;; *************** function _Button_Service *****************
  8880 ;; Defined at:
  8881 ;;		line 182 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  name            1    wreg     enum E3067
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  name            1   12[BANK0 ] enum E3067
  8886 ;;  button          1   13[BANK0 ] PTR struct .
  8887 ;;		 -> mtouch_button(16), 
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  1    wreg      void 
  8890 ;; Registers used:
  8891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8897 ;;      Params:         0       0       0       0       0       0       0       0
  8898 ;;      Locals:         0       2       0       0       0       0       0       0
  8899 ;;      Temps:          0       2       0       0       0       0       0       0
  8900 ;;      Totals:         0       4       0       0       0       0       0       0
  8901 ;;Total ram usage:        4 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    8
  8904 ;; This function calls:
  8905 ;;		_Button_Deviation_Update
  8906 ;;		_Button_Reading_Update
  8907 ;;		_Button_State_Initializing
  8908 ;;		_Button_State_NotPressed
  8909 ;;		_Button_State_PressDebounce
  8910 ;;		_Button_State_Pressed
  8911 ;;		_Button_State_ReleaseDebounce
  8912 ;;		_MTOUCH_Button_Initialize
  8913 ;;		_MTOUCH_Sensor_isCalibrated
  8914 ;;		_MTOUCH_Sensor_wasSampled
  8915 ;; This function is called by:
  8916 ;;		_MTOUCH_Button_ServiceAll
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _Button_Service
  8922  0F4C                     _Button_Service:	
  8923                           
  8924                           ;incstack = 0
  8925                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8926                           ;Button_Service@name stored from wreg
  8927  0F4C  0020               	movlb	0	; select bank0
  8928  0F4D  00AC               	movwf	Button_Service@name
  8929  0F4E                     l4871:	
  8930                           
  8931                           ;mcc_generated_files/mtouch/mtouch_button.c: 182: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 183: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 184:     mtouch_button_t* button = &mtouch_button[name];
  8932  0F4E  082C               	movf	Button_Service@name,w
  8933  0F4F  00AA               	movwf	??_Button_Service
  8934  0F50  3003               	movlw	3
  8935  0F51                     u4795:	
  8936  0F51  35AA               	lslf	??_Button_Service,f
  8937  0F52  3EFF               	addlw	-1
  8938  0F53  1D03               	skipz
  8939  0F54  2F51               	goto	u4795
  8940  0F55  352A               	lslf	??_Button_Service,w
  8941  0F56  3EB8               	addlw	(low (_mtouch_button| 0))& (0+255)
  8942  0F57  00AB               	movwf	??_Button_Service+1
  8943  0F58  082B               	movf	??_Button_Service+1,w
  8944  0F59  00AD               	movwf	Button_Service@button
  8945  0F5A                     l4873:	
  8946                           
  8947                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  8948  0F5A  0A2D               	incf	Button_Service@button,w
  8949  0F5B  0086               	movwf	6
  8950  0F5C  0187               	clrf	7
  8951  0F5D  0801               	movf	1,w
  8952  0F5E  3189  21FC  318F   	fcall	_MTOUCH_Sensor_wasSampled
  8953  0F61  3A00               	xorlw	0
  8954  0F62  1903               	skipnz
  8955  0F63  2F65               	goto	u4801
  8956  0F64  2F66               	goto	u4800
  8957  0F65                     u4801:	
  8958  0F65  2FA1               	goto	l510
  8959  0F66                     u4800:	
  8960  0F66                     l4875:	
  8961  0F66  0020               	movlb	0	; select bank0
  8962  0F67  0A2D               	incf	Button_Service@button,w
  8963  0F68  0086               	movwf	6
  8964  0F69  0187               	clrf	7
  8965  0F6A  0801               	movf	1,w
  8966  0F6B  318B  2310  318F   	fcall	_MTOUCH_Sensor_isCalibrated
  8967  0F6E  3A00               	xorlw	0
  8968  0F6F  1903               	skipnz
  8969  0F70  2F72               	goto	u4811
  8970  0F71  2F73               	goto	u4810
  8971  0F72                     u4811:	
  8972  0F72  2FA1               	goto	l510
  8973  0F73                     u4810:	
  8974  0F73                     l4877:	
  8975                           
  8976                           ;mcc_generated_files/mtouch/mtouch_button.c: 187:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 188:         Button_Reading_Update(button);
  8977  0F73  0020               	movlb	0	; select bank0
  8978  0F74  082D               	movf	Button_Service@button,w
  8979  0F75  318A  225B  318F   	fcall	_Button_Reading_Update
  8980                           
  8981                           ;mcc_generated_files/mtouch/mtouch_button.c: 189:         Button_Deviation_Update(button
      +                          );
  8982  0F78  0020               	movlb	0	; select bank0
  8983  0F79  082D               	movf	Button_Service@button,w
  8984  0F7A  3185  25B2  318F   	fcall	_Button_Deviation_Update
  8985  0F7D                     l4879:	
  8986                           
  8987                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  8988  0F7D  0020               	movlb	0	; select bank0
  8989  0F7E  082D               	movf	Button_Service@button,w
  8990  0F7F  3E02               	addlw	2
  8991  0F80  0086               	movwf	6
  8992  0F81  0187               	clrf	7
  8993  0F82  3005               	movlw	5
  8994  0F83  0201               	subwf	1,w
  8995  0F84  1C03               	skipc
  8996  0F85  2F87               	goto	u4821
  8997  0F86  2F88               	goto	u4820
  8998  0F87                     u4821:	
  8999  0F87  2F8F               	goto	l4883
  9000  0F88                     u4820:	
  9001  0F88                     l4881:	
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_button.c: 192:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 193:             MTOUCH_Button_Initialize(button->name);
  9004  0F88  082D               	movf	Button_Service@button,w
  9005  0F89  0086               	movwf	6
  9006  0F8A  0187               	clrf	7
  9007  0F8B  0801               	movf	1,w
  9008  0F8C  318D  2543  318F   	fcall	_MTOUCH_Button_Initialize
  9009  0F8F                     l4883:	
  9010                           
  9011                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  9012  0F8F  0020               	movlb	0	; select bank0
  9013  0F90  082D               	movf	Button_Service@button,w
  9014  0F91  00AA               	movwf	??_Button_Service
  9015  0F92  082A               	movf	??_Button_Service,w
  9016  0F93  00A5               	movwf	Button_State_ReleaseDebounce@button
  9017  0F94  082D               	movf	Button_Service@button,w
  9018  0F95  3E02               	addlw	2
  9019  0F96  0086               	movwf	6
  9020  0F97  0187               	clrf	7
  9021  0F98  3501               	lslf	1,w
  9022  0F99  3EC8               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  9023  0F9A  0086               	movwf	6
  9024  0F9B  0187               	clrf	7
  9025  0F9C  3F41               	moviw [1]fsr1
  9026  0F9D  008A               	movwf	10
  9027  0F9E  3F40               	moviw [0]fsr1
  9028  0F9F  000A               	callw
  9029  0FA0  318F               	pagesel	$
  9030  0FA1                     l510:	
  9031  0FA1  0008               	return
  9032  0FA2                     __end_of_Button_Service:	
  9033                           
  9034                           	psect	text54
  9035  09FC                     __ptext54:	
  9036 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9037 ;; Defined at:
  9038 ;;		line 942 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  sensor          1    wreg     enum E2871
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;  sensor          1    7[COMMON] enum E2871
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  1    wreg      _Bool 
  9045 ;; Registers used:
  9046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9052 ;;      Params:         0       0       0       0       0       0       0       0
  9053 ;;      Locals:         1       0       0       0       0       0       0       0
  9054 ;;      Temps:          1       0       0       0       0       0       0       0
  9055 ;;      Totals:         2       0       0       0       0       0       0       0
  9056 ;;Total ram usage:        2 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    5
  9059 ;; This function calls:
  9060 ;;		___bmul
  9061 ;; This function is called by:
  9062 ;;		_Button_Service
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           
  9067                           ;psect for function _MTOUCH_Sensor_wasSampled
  9068  09FC                     _MTOUCH_Sensor_wasSampled:	
  9069                           
  9070                           ;incstack = 0
  9071                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9072                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9073  09FC  00F7               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9074  09FD                     l4719:	
  9075                           
  9076                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 943: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 944:     return (_Bool)mtouch_sensor[sensor].sampled;
  9077  09FD  3009               	movlw	9
  9078  09FE  00F6               	movwf	??_MTOUCH_Sensor_wasSampled
  9079  09FF  0876               	movf	??_MTOUCH_Sensor_wasSampled,w
  9080  0A00  00F2               	movwf	___bmul@multiplicand
  9081  0A01  0877               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9082  0A02  318A  22B9  3189   	fcall	___bmul
  9083  0A05  3E68               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  9084  0A06  0086               	movwf	6
  9085  0A07  0187               	clrf	7
  9086  0A08  0801               	movf	1,w
  9087  0A09  3901               	andlw	1
  9088  0A0A                     l367:	
  9089  0A0A  0008               	return
  9090  0A0B                     __end_of_MTOUCH_Sensor_wasSampled:	
  9091                           
  9092                           	psect	text55
  9093  0B10                     __ptext55:	
  9094 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9095 ;; Defined at:
  9096 ;;		line 895 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  sensor          1    wreg     enum E2871
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  sensor          1    7[COMMON] enum E2871
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  1    wreg      _Bool 
  9103 ;; Registers used:
  9104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9110 ;;      Params:         0       0       0       0       0       0       0       0
  9111 ;;      Locals:         1       0       0       0       0       0       0       0
  9112 ;;      Temps:          1       0       0       0       0       0       0       0
  9113 ;;      Totals:         2       0       0       0       0       0       0       0
  9114 ;;Total ram usage:        2 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    5
  9117 ;; This function calls:
  9118 ;;		___bmul
  9119 ;; This function is called by:
  9120 ;;		_Button_Service
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9126  0B10                     _MTOUCH_Sensor_isCalibrated:	
  9127                           
  9128                           ;incstack = 0
  9129                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9130                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9131  0B10  00F7               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9132  0B11                     l4707:	
  9133                           
  9134                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 896: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 897:     if(sensor < 1u)
  9135  0B11  0877               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9136  0B12  1D03               	btfss	3,2
  9137  0B13  2B15               	goto	u4541
  9138  0B14  2B16               	goto	u4540
  9139  0B15                     u4541:	
  9140  0B15  2B25               	goto	l4715
  9141  0B16                     u4540:	
  9142  0B16                     l4709:	
  9143                           
  9144                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 898:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9145  0B16  3009               	movlw	9
  9146  0B17  00F6               	movwf	??_MTOUCH_Sensor_isCalibrated
  9147  0B18  0876               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9148  0B19  00F2               	movwf	___bmul@multiplicand
  9149  0B1A  0877               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9150  0B1B  318A  22B9  318B   	fcall	___bmul
  9151  0B1E  3E68               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  9152  0B1F  0086               	movwf	6
  9153  0B20  0187               	clrf	7
  9154  0B21  0C01               	rrf	1,w
  9155  0B22  0C89               	rrf	9,f
  9156  0B23  3901               	andlw	1
  9157  0B24  2B26               	goto	l346
  9158  0B25                     l4715:	
  9159                           
  9160                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 900:         return 0;
  9161  0B25  3000               	movlw	0
  9162  0B26                     l346:	
  9163  0B26  0008               	return
  9164  0B27                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9165                           
  9166                           	psect	text56
  9167  0E63                     __ptext56:	
  9168 ;; *************** function _Button_State_Pressed *****************
  9169 ;; Defined at:
  9170 ;;		line 254 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;  button          1    5[BANK0 ] PTR struct .
  9173 ;;		 -> mtouch_button(16), 
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;		None
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  1    wreg      void 
  9178 ;; Registers used:
  9179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9185 ;;      Params:         0       1       0       0       0       0       0       0
  9186 ;;      Locals:         0       0       0       0       0       0       0       0
  9187 ;;      Temps:          0       2       0       0       0       0       0       0
  9188 ;;      Totals:         0       3       0       0       0       0       0       0
  9189 ;;Total ram usage:        3 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    7
  9192 ;; This function calls:
  9193 ;;		_MTOUCH_Button_Initialize
  9194 ;; This function is called by:
  9195 ;;		_Button_Service
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _Button_State_Pressed
  9201  0E63                     _Button_State_Pressed:	
  9202  0E63                     l4787:	
  9203                           ;incstack = 0
  9204                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9205                           
  9206                           
  9207                           ;mcc_generated_files/mtouch/mtouch_button.c: 254: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 255: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 257:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)6000u))
  9208  0E63  0020               	movlb	0	; select bank0
  9209  0E64  0825               	movf	Button_State_Pressed@button,w
  9210  0E65  3E0A               	addlw	10
  9211  0E66  0086               	movwf	6
  9212  0E67  0187               	clrf	7
  9213  0E68  3F40               	moviw [0]fsr1
  9214  0E69  00A6               	movwf	??_Button_State_Pressed
  9215  0E6A  3F41               	moviw [1]fsr1
  9216  0E6B  00A7               	movwf	??_Button_State_Pressed+1
  9217  0E6C  3017               	movlw	23
  9218  0E6D  0227               	subwf	??_Button_State_Pressed+1,w
  9219  0E6E  3070               	movlw	112
  9220  0E6F  1903               	skipnz
  9221  0E70  0226               	subwf	??_Button_State_Pressed,w
  9222  0E71  1C03               	skipc
  9223  0E72  2E74               	goto	u4681
  9224  0E73  2E75               	goto	u4680
  9225  0E74                     u4681:	
  9226  0E74  2E7D               	goto	l4791
  9227  0E75                     u4680:	
  9228  0E75                     l4789:	
  9229                           
  9230                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 259:         MTOUCH_Button_Initialize(button->name);
  9231  0E75  0825               	movf	Button_State_Pressed@button,w
  9232  0E76  0086               	movwf	6
  9233  0E77  0187               	clrf	7
  9234  0E78  0801               	movf	1,w
  9235  0E79  318D  2543  318E   	fcall	_MTOUCH_Button_Initialize
  9236                           
  9237                           ;mcc_generated_files/mtouch/mtouch_button.c: 260:     }
  9238  0E7C  2EA9               	goto	l531
  9239  0E7D                     l4791:	
  9240  0E7D  0825               	movf	Button_State_Pressed@button,w
  9241  0E7E  3E09               	addlw	9
  9242  0E7F  0086               	movwf	6
  9243  0E80  0187               	clrf	7
  9244  0E81  0801               	movf	1,w
  9245  0E82  3A80               	xorlw	128
  9246  0E83  00A6               	movwf	??_Button_State_Pressed
  9247  0E84  0825               	movf	Button_State_Pressed@button,w
  9248  0E85  3E0E               	addlw	14
  9249  0E86  0086               	movwf	6
  9250  0E87  0187               	clrf	7
  9251  0E88  0825               	movf	Button_State_Pressed@button,w
  9252  0E89  3E0E               	addlw	14
  9253  0E8A  0084               	movwf	4
  9254  0E8B  0185               	clrf	5
  9255  0E8C  0800               	movf	0,w
  9256  0E8D  00A7               	movwf	??_Button_State_Pressed+1
  9257  0E8E  3004               	movlw	4
  9258  0E8F                     u4695:	
  9259  0E8F  36A7               	lsrf	??_Button_State_Pressed+1,f
  9260  0E90  0B89               	decfsz	9,f
  9261  0E91  2E8F               	goto	u4695
  9262  0E92  0827               	movf	??_Button_State_Pressed+1,w
  9263  0E93  0201               	subwf	1,w
  9264  0E94  3A80               	xorlw	128
  9265  0E95  02A6               	subwf	??_Button_State_Pressed,f
  9266  0E96  1803               	skipnc
  9267  0E97  2E99               	goto	u4701
  9268  0E98  2E9A               	goto	u4700
  9269  0E99                     u4701:	
  9270  0E99  2EA9               	goto	l531
  9271  0E9A                     u4700:	
  9272  0E9A                     l4793:	
  9273                           
  9274                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 265:         button->state = MTOUCH_BUTTON_STATE_releaseDebounce;
  9275  0E9A  3004               	movlw	4
  9276  0E9B  00A6               	movwf	??_Button_State_Pressed
  9277  0E9C  0825               	movf	Button_State_Pressed@button,w
  9278  0E9D  3E02               	addlw	2
  9279  0E9E  0086               	movwf	6
  9280  0E9F  0187               	clrf	7
  9281  0EA0  0826               	movf	??_Button_State_Pressed,w
  9282  0EA1  0081               	movwf	1
  9283                           
  9284                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9285  0EA2  0825               	movf	Button_State_Pressed@button,w
  9286  0EA3  3E0A               	addlw	10
  9287  0EA4  0086               	movwf	6
  9288  0EA5  0187               	clrf	7
  9289  0EA6  3000               	movlw	0
  9290  0EA7  3FC0               	movwi [0]fsr1
  9291  0EA8  3FC1               	movwi [1]fsr1
  9292  0EA9                     l531:	
  9293  0EA9  0008               	return
  9294  0EAA                     __end_of_Button_State_Pressed:	
  9295                           
  9296                           	psect	text57
  9297  0EF9                     __ptext57:	
  9298 ;; *************** function _Button_State_PressDebounce *****************
  9299 ;; Defined at:
  9300 ;;		line 270 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;  button          1    5[BANK0 ] PTR struct .
  9303 ;;		 -> mtouch_button(16), 
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;		None
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  1    wreg      void 
  9308 ;; Registers used:
  9309 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9315 ;;      Params:         0       1       0       0       0       0       0       0
  9316 ;;      Locals:         0       0       0       0       0       0       0       0
  9317 ;;      Temps:          0       2       0       0       0       0       0       0
  9318 ;;      Totals:         0       3       0       0       0       0       0       0
  9319 ;;Total ram usage:        3 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    4
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		_Button_Service
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           
  9330                           ;psect for function _Button_State_PressDebounce
  9331  0EF9                     _Button_State_PressDebounce:	
  9332  0EF9                     l3535:	
  9333                           ;incstack = 0
  9334                           ; Regs used in _Button_State_PressDebounce: [wreg+fsr1l+fsr1h+status,2+status,0]
  9335                           
  9336                           
  9337                           ;mcc_generated_files/mtouch/mtouch_button.c: 270: static void Button_State_PressDebounce
      +                           (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 271: {;mcc_genera
      +                          ted_files/mtouch/mtouch_button.c: 273:     if((button->deviation) > (button->threshold))
  9338  0EF9  0020               	movlb	0	; select bank0
  9339  0EFA  0825               	movf	Button_State_PressDebounce@button,w
  9340  0EFB  3E09               	addlw	9
  9341  0EFC  0086               	movwf	6
  9342  0EFD  0187               	clrf	7
  9343  0EFE  0801               	movf	1,w
  9344  0EFF  00A6               	movwf	??_Button_State_PressDebounce
  9345  0F00  01A7               	clrf	??_Button_State_PressDebounce+1
  9346  0F01  1BA6               	btfsc	??_Button_State_PressDebounce,7
  9347  0F02  03A7               	decf	??_Button_State_PressDebounce+1,f
  9348  0F03  0825               	movf	Button_State_PressDebounce@button,w
  9349  0F04  3E0E               	addlw	14
  9350  0F05  0086               	movwf	6
  9351  0F06  0187               	clrf	7
  9352  0F07  0827               	movf	??_Button_State_PressDebounce+1,w
  9353  0F08  3A80               	xorlw	128
  9354  0F09  3C80               	sublw	128
  9355  0F0A  1D03               	skipz
  9356  0F0B  2F0E               	goto	u2885
  9357  0F0C  0826               	movf	??_Button_State_PressDebounce,w
  9358  0F0D  0201               	subwf	1,w
  9359  0F0E                     u2885:	
  9360  0F0E  1803               	skipnc
  9361  0F0F  2F11               	goto	u2881
  9362  0F10  2F12               	goto	u2880
  9363  0F11                     u2881:	
  9364  0F11  2F3D               	goto	l3541
  9365  0F12                     u2880:	
  9366  0F12                     l3537:	
  9367                           
  9368                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 275:         (button->counter)++;
  9369  0F12  0020               	movlb	0	; select bank0
  9370  0F13  0825               	movf	Button_State_PressDebounce@button,w
  9371  0F14  3E0A               	addlw	10
  9372  0F15  0086               	movwf	6
  9373  0F16  0187               	clrf	7
  9374  0F17  3001               	movlw	1
  9375  0F18  0781               	addwf	1,f
  9376  0F19  3141               	addfsr 1,1
  9377  0F1A  1803               	skipnc
  9378  0F1B  0A81               	incf	1,f
  9379                           
  9380                           ;mcc_generated_files/mtouch/mtouch_button.c: 276:         if ((button->counter) >= (10u)
      +                          )
  9381  0F1C  0825               	movf	Button_State_PressDebounce@button,w
  9382  0F1D  3E0A               	addlw	10
  9383  0F1E  0086               	movwf	6
  9384  0F1F  0187               	clrf	7
  9385  0F20  3F40               	moviw [0]fsr1
  9386  0F21  00A6               	movwf	??_Button_State_PressDebounce
  9387  0F22  3F41               	moviw [1]fsr1
  9388  0F23  00A7               	movwf	??_Button_State_PressDebounce+1
  9389  0F24  3000               	movlw	0
  9390  0F25  0227               	subwf	??_Button_State_PressDebounce+1,w
  9391  0F26  300A               	movlw	10
  9392  0F27  1903               	skipnz
  9393  0F28  0226               	subwf	??_Button_State_PressDebounce,w
  9394  0F29  1C03               	skipc
  9395  0F2A  2F2C               	goto	u2891
  9396  0F2B  2F2D               	goto	u2890
  9397  0F2C                     u2891:	
  9398  0F2C  2F4B               	goto	l537
  9399  0F2D                     u2890:	
  9400  0F2D                     l3539:	
  9401                           
  9402                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 278:             button->state = MTOUCH_BUTTON_STATE_pressed;
  9403  0F2D  3003               	movlw	3
  9404  0F2E  00A6               	movwf	??_Button_State_PressDebounce
  9405  0F2F  0825               	movf	Button_State_PressDebounce@button,w
  9406  0F30  3E02               	addlw	2
  9407  0F31  0086               	movwf	6
  9408  0F32  0187               	clrf	7
  9409  0F33  0826               	movf	??_Button_State_PressDebounce,w
  9410  0F34  0081               	movwf	1
  9411                           
  9412                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:             button->counter = (mtouch_
      +                          button_statecounter_t)0;
  9413  0F35  0825               	movf	Button_State_PressDebounce@button,w
  9414  0F36  3E0A               	addlw	10
  9415  0F37  0086               	movwf	6
  9416  0F38  0187               	clrf	7
  9417  0F39  3000               	movlw	0
  9418  0F3A  3FC0               	movwi [0]fsr1
  9419  0F3B  3FC1               	movwi [1]fsr1
  9420  0F3C  2F4B               	goto	l537
  9421  0F3D                     l3541:	
  9422                           
  9423                           ;mcc_generated_files/mtouch/mtouch_button.c: 283:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 284:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  9424  0F3D  0020               	movlb	0	; select bank0
  9425  0F3E  0825               	movf	Button_State_PressDebounce@button,w
  9426  0F3F  3E02               	addlw	2
  9427  0F40  0086               	movwf	6
  9428  0F41  0187               	clrf	7
  9429  0F42  0181               	clrf	1
  9430  0F43  0A81               	incf	1,f
  9431                           
  9432                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9433  0F44  0825               	movf	Button_State_PressDebounce@button,w
  9434  0F45  3E0A               	addlw	10
  9435  0F46  0086               	movwf	6
  9436  0F47  0187               	clrf	7
  9437  0F48  3000               	movlw	0
  9438  0F49  3FC0               	movwi [0]fsr1
  9439  0F4A  3FC1               	movwi [1]fsr1
  9440  0F4B                     l537:	
  9441  0F4B  0008               	return
  9442  0F4C                     __end_of_Button_State_PressDebounce:	
  9443                           
  9444                           	psect	text58
  9445  0498                     __ptext58:	
  9446 ;; *************** function _Button_State_NotPressed *****************
  9447 ;; Defined at:
  9448 ;;		line 219 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  button          1    5[BANK0 ] PTR struct .
  9451 ;;		 -> mtouch_button(16), 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;		None
  9454 ;; Return value:  Size  Location     Type
  9455 ;;                  1    wreg      void 
  9456 ;; Registers used:
  9457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9463 ;;      Params:         0       1       0       0       0       0       0       0
  9464 ;;      Locals:         0       0       0       0       0       0       0       0
  9465 ;;      Temps:          0       2       0       0       0       0       0       0
  9466 ;;      Totals:         0       3       0       0       0       0       0       0
  9467 ;;Total ram usage:        3 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    7
  9470 ;; This function calls:
  9471 ;;		_Button_Baseline_Update
  9472 ;;		_MTOUCH_Button_Initialize
  9473 ;; This function is called by:
  9474 ;;		_Button_Service
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           
  9479                           ;psect for function _Button_State_NotPressed
  9480  0498                     _Button_State_NotPressed:	
  9481  0498                     l4769:	
  9482                           ;incstack = 0
  9483                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9484                           
  9485                           
  9486                           ;mcc_generated_files/mtouch/mtouch_button.c: 219: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 220: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 222:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  9487  0498  0020               	movlb	0	; select bank0
  9488  0499  0825               	movf	Button_State_NotPressed@button,w
  9489  049A  3E09               	addlw	9
  9490  049B  0086               	movwf	6
  9491  049C  0187               	clrf	7
  9492  049D  0801               	movf	1,w
  9493  049E  3A80               	xorlw	128
  9494  049F  00A6               	movwf	??_Button_State_NotPressed
  9495  04A0  0825               	movf	Button_State_NotPressed@button,w
  9496  04A1  3E0E               	addlw	14
  9497  04A2  0086               	movwf	6
  9498  04A3  0187               	clrf	7
  9499  04A4  0301               	decf	1,w
  9500  04A5  3AFF               	xorlw	255
  9501  04A6  3A80               	xorlw	128
  9502  04A7  02A6               	subwf	??_Button_State_NotPressed,f
  9503  04A8  1803               	skipnc
  9504  04A9  2CAB               	goto	u4641
  9505  04AA  2CAC               	goto	u4640
  9506  04AB                     u4641:	
  9507  04AB  2CD5               	goto	l4777
  9508  04AC                     u4640:	
  9509  04AC                     l4771:	
  9510                           
  9511                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 224:         (button->counter)++;
  9512  04AC  0825               	movf	Button_State_NotPressed@button,w
  9513  04AD  3E0A               	addlw	10
  9514  04AE  0086               	movwf	6
  9515  04AF  0187               	clrf	7
  9516  04B0  3001               	movlw	1
  9517  04B1  0781               	addwf	1,f
  9518  04B2  3141               	addfsr 1,1
  9519  04B3  1803               	skipnc
  9520  04B4  0A81               	incf	1,f
  9521                           
  9522                           ;mcc_generated_files/mtouch/mtouch_button.c: 225:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  9523  04B5  0825               	movf	Button_State_NotPressed@button,w
  9524  04B6  3E0A               	addlw	10
  9525  04B7  0086               	movwf	6
  9526  04B8  0187               	clrf	7
  9527  04B9  3F40               	moviw [0]fsr1
  9528  04BA  00A6               	movwf	??_Button_State_NotPressed
  9529  04BB  3F41               	moviw [1]fsr1
  9530  04BC  00A7               	movwf	??_Button_State_NotPressed+1
  9531  04BD  3000               	movlw	0
  9532  04BE  0227               	subwf	??_Button_State_NotPressed+1,w
  9533  04BF  3041               	movlw	65
  9534  04C0  1903               	skipnz
  9535  04C1  0226               	subwf	??_Button_State_NotPressed,w
  9536  04C2  1C03               	skipc
  9537  04C3  2CC5               	goto	u4651
  9538  04C4  2CC6               	goto	u4650
  9539  04C5                     u4651:	
  9540  04C5  2D06               	goto	l521
  9541  04C6                     u4650:	
  9542  04C6                     l4773:	
  9543                           
  9544                           ;mcc_generated_files/mtouch/mtouch_button.c: 226:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 227:             button->counter = (mtouch_button_statecounter_t)0;
  9545  04C6  0825               	movf	Button_State_NotPressed@button,w
  9546  04C7  3E0A               	addlw	10
  9547  04C8  0086               	movwf	6
  9548  04C9  0187               	clrf	7
  9549  04CA  3000               	movlw	0
  9550  04CB  3FC0               	movwi [0]fsr1
  9551  04CC  3FC1               	movwi [1]fsr1
  9552  04CD                     l4775:	
  9553                           
  9554                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  9555  04CD  0825               	movf	Button_State_NotPressed@button,w
  9556  04CE  0086               	movwf	6
  9557  04CF  0187               	clrf	7
  9558  04D0  0801               	movf	1,w
  9559  04D1  318D  2543  3184   	fcall	_MTOUCH_Button_Initialize
  9560  04D4  2D06               	goto	l521
  9561  04D5                     l4777:	
  9562  04D5  0825               	movf	Button_State_NotPressed@button,w
  9563  04D6  3E09               	addlw	9
  9564  04D7  0086               	movwf	6
  9565  04D8  0187               	clrf	7
  9566  04D9  0801               	movf	1,w
  9567  04DA  00A6               	movwf	??_Button_State_NotPressed
  9568  04DB  01A7               	clrf	??_Button_State_NotPressed+1
  9569  04DC  1BA6               	btfsc	??_Button_State_NotPressed,7
  9570  04DD  03A7               	decf	??_Button_State_NotPressed+1,f
  9571  04DE  0825               	movf	Button_State_NotPressed@button,w
  9572  04DF  3E0E               	addlw	14
  9573  04E0  0086               	movwf	6
  9574  04E1  0187               	clrf	7
  9575  04E2  0827               	movf	??_Button_State_NotPressed+1,w
  9576  04E3  3A80               	xorlw	128
  9577  04E4  3C80               	sublw	128
  9578  04E5  1D03               	skipz
  9579  04E6  2CE9               	goto	u4665
  9580  04E7  0826               	movf	??_Button_State_NotPressed,w
  9581  04E8  0201               	subwf	1,w
  9582  04E9                     u4665:	
  9583  04E9  1803               	skipnc
  9584  04EA  2CEC               	goto	u4661
  9585  04EB  2CED               	goto	u4660
  9586  04EC                     u4661:	
  9587  04EC  2CFE               	goto	l4781
  9588  04ED                     u4660:	
  9589  04ED                     l4779:	
  9590                           
  9591                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 235:         button->state = MTOUCH_BUTTON_STATE_pressDebounce;
  9592  04ED  3002               	movlw	2
  9593  04EE  0020               	movlb	0	; select bank0
  9594  04EF  00A6               	movwf	??_Button_State_NotPressed
  9595  04F0  0825               	movf	Button_State_NotPressed@button,w
  9596  04F1  3E02               	addlw	2
  9597  04F2  0086               	movwf	6
  9598  04F3  0187               	clrf	7
  9599  04F4  0826               	movf	??_Button_State_NotPressed,w
  9600  04F5  0081               	movwf	1
  9601                           
  9602                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9603  04F6  0825               	movf	Button_State_NotPressed@button,w
  9604  04F7  3E0A               	addlw	10
  9605  04F8  0086               	movwf	6
  9606  04F9  0187               	clrf	7
  9607  04FA  3000               	movlw	0
  9608  04FB  3FC0               	movwi [0]fsr1
  9609  04FC  3FC1               	movwi [1]fsr1
  9610                           
  9611                           ;mcc_generated_files/mtouch/mtouch_button.c: 237:     }
  9612  04FD  2D06               	goto	l521
  9613  04FE                     l4781:	
  9614                           
  9615                           ;mcc_generated_files/mtouch/mtouch_button.c: 239:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 241:         button->counter = (mtouch_button_statecounter_t)0;
  9616  04FE  0020               	movlb	0	; select bank0
  9617  04FF  0825               	movf	Button_State_NotPressed@button,w
  9618  0500  3E0A               	addlw	10
  9619  0501  0086               	movwf	6
  9620  0502  0187               	clrf	7
  9621  0503  3000               	movlw	0
  9622  0504  3FC0               	movwi [0]fsr1
  9623  0505  3FC1               	movwi [1]fsr1
  9624  0506                     l521:	
  9625                           
  9626                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:     (button->baseline_count)++;
  9627  0506  0020               	movlb	0	; select bank0
  9628  0507  0825               	movf	Button_State_NotPressed@button,w
  9629  0508  3E0C               	addlw	12
  9630  0509  0086               	movwf	6
  9631  050A  0187               	clrf	7
  9632  050B  3001               	movlw	1
  9633  050C  0781               	addwf	1,f
  9634  050D  3141               	addfsr 1,1
  9635  050E  1803               	skipnc
  9636  050F  0A81               	incf	1,f
  9637                           
  9638                           ;mcc_generated_files/mtouch/mtouch_button.c: 247:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)128u))
  9639  0510  0825               	movf	Button_State_NotPressed@button,w
  9640  0511  3E0C               	addlw	12
  9641  0512  0086               	movwf	6
  9642  0513  0187               	clrf	7
  9643  0514  0016               	moviw fsr1++
  9644  0515  3A80               	xorlw	128
  9645  0516  00A6               	movwf	??_Button_State_NotPressed
  9646  0517  0016               	moviw fsr1++
  9647  0518  04A6               	iorwf	??_Button_State_NotPressed,f
  9648  0519  1D03               	btfss	3,2
  9649  051A  2D1C               	goto	u4671
  9650  051B  2D1D               	goto	u4670
  9651  051C                     u4671:	
  9652  051C  2D28               	goto	l525
  9653  051D                     u4670:	
  9654  051D                     l4783:	
  9655                           
  9656                           ;mcc_generated_files/mtouch/mtouch_button.c: 248:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 249:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9657  051D  0825               	movf	Button_State_NotPressed@button,w
  9658  051E  3E0C               	addlw	12
  9659  051F  0086               	movwf	6
  9660  0520  0187               	clrf	7
  9661  0521  3000               	movlw	0
  9662  0522  3FC0               	movwi [0]fsr1
  9663  0523  3FC1               	movwi [1]fsr1
  9664  0524                     l4785:	
  9665                           
  9666                           ;mcc_generated_files/mtouch/mtouch_button.c: 250:         Button_Baseline_Update(button)
      +                          ;
  9667  0524  0825               	movf	Button_State_NotPressed@button,w
  9668  0525  3185  2529  3184   	fcall	_Button_Baseline_Update
  9669  0528                     l525:	
  9670  0528  0008               	return
  9671  0529                     __end_of_Button_State_NotPressed:	
  9672                           
  9673                           	psect	text59
  9674  0790                     __ptext59:	
  9675 ;; *************** function _Button_State_Initializing *****************
  9676 ;; Defined at:
  9677 ;;		line 199 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;  button          1    5[BANK0 ] PTR struct .
  9680 ;;		 -> mtouch_button(16), 
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;		None
  9683 ;; Return value:  Size  Location     Type
  9684 ;;                  1    wreg      void 
  9685 ;; Registers used:
  9686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9692 ;;      Params:         0       1       0       0       0       0       0       0
  9693 ;;      Locals:         0       0       0       0       0       0       0       0
  9694 ;;      Temps:          0       4       0       0       0       0       0       0
  9695 ;;      Totals:         0       5       0       0       0       0       0       0
  9696 ;;Total ram usage:        5 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    7
  9699 ;; This function calls:
  9700 ;;		_Button_Baseline_Initialize
  9701 ;;		_Button_Baseline_Update
  9702 ;; This function is called by:
  9703 ;;		_Button_Service
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           
  9708                           ;psect for function _Button_State_Initializing
  9709  0790                     _Button_State_Initializing:	
  9710  0790                     l4757:	
  9711                           ;incstack = 0
  9712                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9713                           
  9714                           
  9715                           ;mcc_generated_files/mtouch/mtouch_button.c: 199: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 200: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 202:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  9716  0790  0020               	movlb	0	; select bank0
  9717  0791  0825               	movf	Button_State_Initializing@button,w
  9718  0792  3E0A               	addlw	10
  9719  0793  0086               	movwf	6
  9720  0794  0187               	clrf	7
  9721  0795  3F40               	moviw [0]fsr1
  9722  0796  00A6               	movwf	??_Button_State_Initializing
  9723  0797  3F41               	moviw [1]fsr1
  9724  0798  00A7               	movwf	??_Button_State_Initializing+1
  9725  0799  3000               	movlw	0
  9726  079A  0227               	subwf	??_Button_State_Initializing+1,w
  9727  079B  3009               	movlw	9
  9728  079C  1903               	skipnz
  9729  079D  0226               	subwf	??_Button_State_Initializing,w
  9730  079E  1803               	skipnc
  9731  079F  2FA1               	goto	u4611
  9732  07A0  2FA2               	goto	u4610
  9733  07A1                     u4611:	
  9734  07A1  2FA7               	goto	l4761
  9735  07A2                     u4610:	
  9736  07A2                     l4759:	
  9737                           
  9738                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 204:         Button_Baseline_Initialize(button);
  9739  07A2  0825               	movf	Button_State_Initializing@button,w
  9740  07A3  318C  24B9  3187   	fcall	_Button_Baseline_Initialize
  9741                           
  9742                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     } else {
  9743  07A6  2FAB               	goto	l4763
  9744  07A7                     l4761:	
  9745                           
  9746                           ;mcc_generated_files/mtouch/mtouch_button.c: 206:         Button_Baseline_Update(button)
      +                          ;
  9747  07A7  0825               	movf	Button_State_Initializing@button,w
  9748  07A8  3185  2529  3187   	fcall	_Button_Baseline_Update
  9749  07AB                     l4763:	
  9750                           
  9751                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:     (button->counter)++;
  9752  07AB  0020               	movlb	0	; select bank0
  9753  07AC  0825               	movf	Button_State_Initializing@button,w
  9754  07AD  3E0A               	addlw	10
  9755  07AE  0086               	movwf	6
  9756  07AF  0187               	clrf	7
  9757  07B0  3001               	movlw	1
  9758  07B1  0781               	addwf	1,f
  9759  07B2  3141               	addfsr 1,1
  9760  07B3  1803               	skipnc
  9761  07B4  0A81               	incf	1,f
  9762  07B5                     l4765:	
  9763                           
  9764                           ;mcc_generated_files/mtouch/mtouch_button.c: 211:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  9765  07B5  0825               	movf	Button_State_Initializing@button,w
  9766  07B6  3E0A               	addlw	10
  9767  07B7  0086               	movwf	6
  9768  07B8  0187               	clrf	7
  9769  07B9  3F40               	moviw [0]fsr1
  9770  07BA  00A6               	movwf	??_Button_State_Initializing
  9771  07BB  3F41               	moviw [1]fsr1
  9772  07BC  00A7               	movwf	??_Button_State_Initializing+1
  9773  07BD  3000               	movlw	0
  9774  07BE  0227               	subwf	??_Button_State_Initializing+1,w
  9775  07BF  3010               	movlw	16
  9776  07C0  1903               	skipnz
  9777  07C1  0226               	subwf	??_Button_State_Initializing,w
  9778  07C2  1C03               	skipc
  9779  07C3  2FC5               	goto	u4621
  9780  07C4  2FC6               	goto	u4620
  9781  07C5                     u4621:	
  9782  07C5  2FEE               	goto	l516
  9783  07C6                     u4620:	
  9784  07C6                     l4767:	
  9785                           
  9786                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 213:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  9787  07C6  0825               	movf	Button_State_Initializing@button,w
  9788  07C7  3E05               	addlw	5
  9789  07C8  0086               	movwf	6
  9790  07C9  0187               	clrf	7
  9791  07CA  3F40               	moviw [0]fsr1
  9792  07CB  00A6               	movwf	??_Button_State_Initializing
  9793  07CC  3F41               	moviw [1]fsr1
  9794  07CD  00A7               	movwf	??_Button_State_Initializing+1
  9795  07CE  3F42               	moviw [2]fsr1
  9796  07CF  00A8               	movwf	??_Button_State_Initializing+2
  9797  07D0  3F43               	moviw [3]fsr1
  9798  07D1  00A9               	movwf	??_Button_State_Initializing+3
  9799  07D2  3004               	movlw	4
  9800  07D3                     u4635:	
  9801  07D3  36A9               	lsrf	??_Button_State_Initializing+3,f
  9802  07D4  0CA8               	rrf	??_Button_State_Initializing+2,f
  9803  07D5  0CA7               	rrf	??_Button_State_Initializing+1,f
  9804  07D6  0CA6               	rrf	??_Button_State_Initializing,f
  9805  07D7                     u4630:	
  9806  07D7  0B89               	decfsz	9,f
  9807  07D8  2FD3               	goto	u4635
  9808  07D9  0825               	movf	Button_State_Initializing@button,w
  9809  07DA  3E03               	addlw	3
  9810  07DB  0086               	movwf	6
  9811  07DC  0187               	clrf	7
  9812  07DD  0826               	movf	??_Button_State_Initializing,w
  9813  07DE  3FC0               	movwi [0]fsr1
  9814  07DF  0827               	movf	??_Button_State_Initializing+1,w
  9815  07E0  3FC1               	movwi [1]fsr1
  9816                           
  9817                           ;mcc_generated_files/mtouch/mtouch_button.c: 214:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  9818  07E1  0825               	movf	Button_State_Initializing@button,w
  9819  07E2  3E02               	addlw	2
  9820  07E3  0086               	movwf	6
  9821  07E4  0187               	clrf	7
  9822  07E5  0181               	clrf	1
  9823  07E6  0A81               	incf	1,f
  9824                           
  9825                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9826  07E7  0825               	movf	Button_State_Initializing@button,w
  9827  07E8  3E0A               	addlw	10
  9828  07E9  0086               	movwf	6
  9829  07EA  0187               	clrf	7
  9830  07EB  3000               	movlw	0
  9831  07EC  3FC0               	movwi [0]fsr1
  9832  07ED  3FC1               	movwi [1]fsr1
  9833  07EE                     l516:	
  9834  07EE  0008               	return
  9835  07EF                     __end_of_Button_State_Initializing:	
  9836                           
  9837                           	psect	text60
  9838  0FA2                     __ptext60:	
  9839 ;; *************** function _Button_State_ReleaseDebounce *****************
  9840 ;; Defined at:
  9841 ;;		line 289 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;  button          1    5[BANK0 ] PTR struct .
  9844 ;;		 -> mtouch_button(16), 
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      void 
  9849 ;; Registers used:
  9850 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9856 ;;      Params:         0       1       0       0       0       0       0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0
  9858 ;;      Temps:          0       2       0       0       0       0       0       0
  9859 ;;      Totals:         0       3       0       0       0       0       0       0
  9860 ;;Total ram usage:        3 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    4
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		_Button_Service
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _Button_State_ReleaseDebounce
  9872  0FA2                     _Button_State_ReleaseDebounce:	
  9873  0FA2                     l3543:	
  9874                           ;incstack = 0
  9875                           ; Regs used in _Button_State_ReleaseDebounce: [wreg-fsr1h+status,2+status,0]
  9876                           
  9877                           
  9878                           ;mcc_generated_files/mtouch/mtouch_button.c: 289: static void Button_State_ReleaseDeboun
      +                          ce(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 290: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 291:     if ((button->deviation) < (mtouch_button_dev
      +                          iation_t)((button->threshold)-((button->threshold) >> HYST_6_25_PERCENT)))
  9879  0FA2  0020               	movlb	0	; select bank0
  9880  0FA3  0825               	movf	Button_State_ReleaseDebounce@button,w
  9881  0FA4  3E09               	addlw	9
  9882  0FA5  0086               	movwf	6
  9883  0FA6  0187               	clrf	7
  9884  0FA7  0801               	movf	1,w
  9885  0FA8  3A80               	xorlw	128
  9886  0FA9  00A6               	movwf	??_Button_State_ReleaseDebounce
  9887  0FAA  0825               	movf	Button_State_ReleaseDebounce@button,w
  9888  0FAB  3E0E               	addlw	14
  9889  0FAC  0086               	movwf	6
  9890  0FAD  0187               	clrf	7
  9891  0FAE  0825               	movf	Button_State_ReleaseDebounce@button,w
  9892  0FAF  3E0E               	addlw	14
  9893  0FB0  0084               	movwf	4
  9894  0FB1  0185               	clrf	5
  9895  0FB2  0800               	movf	0,w
  9896  0FB3  00A7               	movwf	??_Button_State_ReleaseDebounce+1
  9897  0FB4  3004               	movlw	4
  9898  0FB5                     u2905:	
  9899  0FB5  36A7               	lsrf	??_Button_State_ReleaseDebounce+1,f
  9900  0FB6  0B89               	decfsz	9,f
  9901  0FB7  2FB5               	goto	u2905
  9902  0FB8  0827               	movf	??_Button_State_ReleaseDebounce+1,w
  9903  0FB9  0201               	subwf	1,w
  9904  0FBA  3A80               	xorlw	128
  9905  0FBB  02A6               	subwf	??_Button_State_ReleaseDebounce,f
  9906  0FBC  1803               	skipnc
  9907  0FBD  2FBF               	goto	u2911
  9908  0FBE  2FC0               	goto	u2910
  9909  0FBF                     u2911:	
  9910  0FBF  2FF0               	goto	l3549
  9911  0FC0                     u2910:	
  9912  0FC0                     l3545:	
  9913                           
  9914                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 293:         (button->counter)++;
  9915  0FC0  0825               	movf	Button_State_ReleaseDebounce@button,w
  9916  0FC1  3E0A               	addlw	10
  9917  0FC2  0086               	movwf	6
  9918  0FC3  0187               	clrf	7
  9919  0FC4  3001               	movlw	1
  9920  0FC5  0781               	addwf	1,f
  9921  0FC6  3141               	addfsr 1,1
  9922  0FC7  1803               	skipnc
  9923  0FC8  0A81               	incf	1,f
  9924                           
  9925                           ;mcc_generated_files/mtouch/mtouch_button.c: 294:         if ((button->counter) >= (10u)
      +                          )
  9926  0FC9  0825               	movf	Button_State_ReleaseDebounce@button,w
  9927  0FCA  3E0A               	addlw	10
  9928  0FCB  0086               	movwf	6
  9929  0FCC  0187               	clrf	7
  9930  0FCD  3F40               	moviw [0]fsr1
  9931  0FCE  00A6               	movwf	??_Button_State_ReleaseDebounce
  9932  0FCF  3F41               	moviw [1]fsr1
  9933  0FD0  00A7               	movwf	??_Button_State_ReleaseDebounce+1
  9934  0FD1  3000               	movlw	0
  9935  0FD2  0227               	subwf	??_Button_State_ReleaseDebounce+1,w
  9936  0FD3  300A               	movlw	10
  9937  0FD4  1903               	skipnz
  9938  0FD5  0226               	subwf	??_Button_State_ReleaseDebounce,w
  9939  0FD6  1C03               	skipc
  9940  0FD7  2FD9               	goto	u2921
  9941  0FD8  2FDA               	goto	u2920
  9942  0FD9                     u2921:	
  9943  0FD9  2FFF               	goto	l543
  9944  0FDA                     u2920:	
  9945  0FDA                     l3547:	
  9946                           
  9947                           ;mcc_generated_files/mtouch/mtouch_button.c: 295:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 296:             button->state = MTOUCH_BUTTON_STATE_notPressed;
  9948  0FDA  0825               	movf	Button_State_ReleaseDebounce@button,w
  9949  0FDB  3E02               	addlw	2
  9950  0FDC  0086               	movwf	6
  9951  0FDD  0187               	clrf	7
  9952  0FDE  0181               	clrf	1
  9953  0FDF  0A81               	incf	1,f
  9954                           
  9955                           ;mcc_generated_files/mtouch/mtouch_button.c: 297:             button->counter = 0;
  9956  0FE0  0825               	movf	Button_State_ReleaseDebounce@button,w
  9957  0FE1  3E0A               	addlw	10
  9958  0FE2  0086               	movwf	6
  9959  0FE3  0187               	clrf	7
  9960  0FE4  3000               	movlw	0
  9961  0FE5  3FC0               	movwi [0]fsr1
  9962  0FE6  3FC1               	movwi [1]fsr1
  9963                           
  9964                           ;mcc_generated_files/mtouch/mtouch_button.c: 298:             button->baseline_count = (
      +                          mtouch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  9965  0FE7  0825               	movf	Button_State_ReleaseDebounce@button,w
  9966  0FE8  3E0C               	addlw	12
  9967  0FE9  0086               	movwf	6
  9968  0FEA  0187               	clrf	7
  9969  0FEB  30FF               	movlw	255
  9970  0FEC  3FC0               	movwi [0]fsr1
  9971  0FED  30FB               	movlw	251
  9972  0FEE  3FC1               	movwi [1]fsr1
  9973  0FEF  2FFF               	goto	l543
  9974  0FF0                     l3549:	
  9975                           
  9976                           ;mcc_generated_files/mtouch/mtouch_button.c: 302:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 303:         button->state = MTOUCH_BUTTON_STATE_pressed;
  9977  0FF0  3003               	movlw	3
  9978  0FF1  00A6               	movwf	??_Button_State_ReleaseDebounce
  9979  0FF2  0825               	movf	Button_State_ReleaseDebounce@button,w
  9980  0FF3  3E02               	addlw	2
  9981  0FF4  0086               	movwf	6
  9982  0FF5  0187               	clrf	7
  9983  0FF6  0826               	movf	??_Button_State_ReleaseDebounce,w
  9984  0FF7  0081               	movwf	1
  9985                           
  9986                           ;mcc_generated_files/mtouch/mtouch_button.c: 304:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9987  0FF8  0825               	movf	Button_State_ReleaseDebounce@button,w
  9988  0FF9  3E0A               	addlw	10
  9989  0FFA  0086               	movwf	6
  9990  0FFB  0187               	clrf	7
  9991  0FFC  3000               	movlw	0
  9992  0FFD  3FC0               	movwi [0]fsr1
  9993  0FFE  3FC1               	movwi [1]fsr1
  9994  0FFF                     l543:	
  9995  0FFF  0008               	return
  9996  1000                     __end_of_Button_State_ReleaseDebounce:	
  9997                           
  9998                           	psect	text61
  9999  0D43                     __ptext61:	
 10000 ;; *************** function _MTOUCH_Button_Initialize *****************
 10001 ;; Defined at:
 10002 ;;		line 141 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;  name            1    wreg     enum E3067
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  name            1    0[BANK0 ] enum E3067
 10007 ;;  button          1    1[BANK0 ] PTR struct .
 10008 ;;		 -> mtouch_button(16), 
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  1    wreg      void 
 10011 ;; Registers used:
 10012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10018 ;;      Params:         0       0       0       0       0       0       0       0
 10019 ;;      Locals:         0       2       0       0       0       0       0       0
 10020 ;;      Temps:          2       0       0       0       0       0       0       0
 10021 ;;      Totals:         2       2       0       0       0       0       0       0
 10022 ;;Total ram usage:        4 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    6
 10025 ;; This function calls:
 10026 ;;		_MTOUCH_Sensor_Calibrate
 10027 ;; This function is called by:
 10028 ;;		_MTOUCH_Button_InitializeAll
 10029 ;;		_Button_Service
 10030 ;;		_Button_State_NotPressed
 10031 ;;		_Button_State_Pressed
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _MTOUCH_Button_Initialize
 10037  0D43                     _MTOUCH_Button_Initialize:	
 10038                           
 10039                           ;incstack = 0
 10040                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10041                           ;MTOUCH_Button_Initialize@name stored from wreg
 10042  0D43  0020               	movlb	0	; select bank0
 10043  0D44  00A0               	movwf	MTOUCH_Button_Initialize@name
 10044  0D45                     l4623:	
 10045                           
 10046                           ;mcc_generated_files/mtouch/mtouch_button.c: 141: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 142: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 143:     mtouch_button_t* button = &mtouch_button[name];
 10047  0D45  0820               	movf	MTOUCH_Button_Initialize@name,w
 10048  0D46  00F8               	movwf	??_MTOUCH_Button_Initialize
 10049  0D47  3003               	movlw	3
 10050  0D48                     u4385:	
 10051  0D48  35F8               	lslf	??_MTOUCH_Button_Initialize,f
 10052  0D49  3EFF               	addlw	-1
 10053  0D4A  1D03               	skipz
 10054  0D4B  2D48               	goto	u4385
 10055  0D4C  3578               	lslf	??_MTOUCH_Button_Initialize,w
 10056  0D4D  3EB8               	addlw	(low (_mtouch_button| 0))& (0+255)
 10057  0D4E  00F9               	movwf	??_MTOUCH_Button_Initialize+1
 10058  0D4F  0879               	movf	??_MTOUCH_Button_Initialize+1,w
 10059  0D50  00A1               	movwf	MTOUCH_Button_Initialize@button
 10060  0D51                     l4625:	
 10061                           
 10062                           ;mcc_generated_files/mtouch/mtouch_button.c: 145:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10063  0D51  0821               	movf	MTOUCH_Button_Initialize@button,w
 10064  0D52  3E02               	addlw	2
 10065  0D53  0086               	movwf	6
 10066  0D54  0187               	clrf	7
 10067  0D55  0181               	clrf	1
 10068  0D56                     l4627:	
 10069                           
 10070                           ;mcc_generated_files/mtouch/mtouch_button.c: 146:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10071  0D56  0821               	movf	MTOUCH_Button_Initialize@button,w
 10072  0D57  3E05               	addlw	5
 10073  0D58  0086               	movwf	6
 10074  0D59  0187               	clrf	7
 10075  0D5A  3000               	movlw	0
 10076  0D5B  3FC0               	movwi [0]fsr1
 10077  0D5C  3000               	movlw	0
 10078  0D5D  3FC1               	movwi [1]fsr1
 10079  0D5E  3FC2               	movwi [2]fsr1
 10080  0D5F  3FC3               	movwi [3]fsr1
 10081  0D60                     l4629:	
 10082                           
 10083                           ;mcc_generated_files/mtouch/mtouch_button.c: 147:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10084  0D60  0821               	movf	MTOUCH_Button_Initialize@button,w
 10085  0D61  3E0A               	addlw	10
 10086  0D62  0086               	movwf	6
 10087  0D63  0187               	clrf	7
 10088  0D64  3000               	movlw	0
 10089  0D65  3FC0               	movwi [0]fsr1
 10090  0D66  3FC1               	movwi [1]fsr1
 10091  0D67                     l4631:	
 10092                           
 10093                           ;mcc_generated_files/mtouch/mtouch_button.c: 148:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10094  0D67  0821               	movf	MTOUCH_Button_Initialize@button,w
 10095  0D68  3E0C               	addlw	12
 10096  0D69  0086               	movwf	6
 10097  0D6A  0187               	clrf	7
 10098  0D6B  3000               	movlw	0
 10099  0D6C  3FC0               	movwi [0]fsr1
 10100  0D6D  3FC1               	movwi [1]fsr1
 10101  0D6E                     l4633:	
 10102                           
 10103                           ;mcc_generated_files/mtouch/mtouch_button.c: 150:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10104  0D6E  0A21               	incf	MTOUCH_Button_Initialize@button,w
 10105  0D6F  0086               	movwf	6
 10106  0D70  0187               	clrf	7
 10107  0D71  0801               	movf	1,w
 10108  0D72  318A  227F  318D   	fcall	_MTOUCH_Sensor_Calibrate
 10109  0D75                     l495:	
 10110  0D75  0008               	return
 10111  0D76                     __end_of_MTOUCH_Button_Initialize:	
 10112                           
 10113                           	psect	text62
 10114  0A7F                     __ptext62:	
 10115 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10116 ;; Defined at:
 10117 ;;		line 887 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;  sensor          1    wreg     enum E2871
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;  sensor          1    7[COMMON] enum E2871
 10122 ;; Return value:  Size  Location     Type
 10123 ;;                  1    wreg      void 
 10124 ;; Registers used:
 10125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10131 ;;      Params:         0       0       0       0       0       0       0       0
 10132 ;;      Locals:         1       0       0       0       0       0       0       0
 10133 ;;      Temps:          1       0       0       0       0       0       0       0
 10134 ;;      Totals:         2       0       0       0       0       0       0       0
 10135 ;;Total ram usage:        2 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    5
 10138 ;; This function calls:
 10139 ;;		___bmul
 10140 ;; This function is called by:
 10141 ;;		_MTOUCH_Sensor_Initialize
 10142 ;;		_MTOUCH_Button_Initialize
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function _MTOUCH_Sensor_Calibrate
 10148  0A7F                     _MTOUCH_Sensor_Calibrate:	
 10149                           
 10150                           ;incstack = 0
 10151                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10152                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10153  0A7F  00F7               	movwf	MTOUCH_Sensor_Calibrate@sensor
 10154  0A80                     l4337:	
 10155                           
 10156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 888: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 889:     if(sensor < 1u)
 10157  0A80  0877               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 10158  0A81  1D03               	btfss	3,2
 10159  0A82  2A84               	goto	u3931
 10160  0A83  2A85               	goto	u3930
 10161  0A84                     u3931:	
 10162  0A84  2A91               	goto	l342
 10163  0A85                     u3930:	
 10164  0A85                     l4339:	
 10165                           
 10166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 891:         mtouch_sensor[sensor].calibrated = 0;
 10167  0A85  3009               	movlw	9
 10168  0A86  00F6               	movwf	??_MTOUCH_Sensor_Calibrate
 10169  0A87  0876               	movf	??_MTOUCH_Sensor_Calibrate,w
 10170  0A88  00F2               	movwf	___bmul@multiplicand
 10171  0A89  0877               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 10172  0A8A  318A  22B9  318A   	fcall	___bmul
 10173  0A8D  3E68               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10174  0A8E  0086               	movwf	6
 10175  0A8F  0187               	clrf	7
 10176  0A90  1101               	bcf	1,2
 10177  0A91                     l342:	
 10178  0A91  0008               	return
 10179  0A92                     __end_of_MTOUCH_Sensor_Calibrate:	
 10180                           
 10181                           	psect	text63
 10182  0529                     __ptext63:	
 10183 ;; *************** function _Button_Baseline_Update *****************
 10184 ;; Defined at:
 10185 ;;		line 492 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;  button          1    wreg     PTR struct .
 10188 ;;		 -> mtouch_button(16), 
 10189 ;; Auto vars:     Size  Location     Type
 10190 ;;  button          1    8[COMMON] PTR struct .
 10191 ;;		 -> mtouch_button(16), 
 10192 ;; Return value:  Size  Location     Type
 10193 ;;                  1    wreg      void 
 10194 ;; Registers used:
 10195 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10201 ;;      Params:         0       0       0       0       0       0       0       0
 10202 ;;      Locals:         1       0       0       0       0       0       0       0
 10203 ;;      Temps:          6       0       0       0       0       0       0       0
 10204 ;;      Totals:         7       0       0       0       0       0       0       0
 10205 ;;Total ram usage:        7 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    4
 10208 ;; This function calls:
 10209 ;;		Nothing
 10210 ;; This function is called by:
 10211 ;;		_Button_State_Initializing
 10212 ;;		_Button_State_NotPressed
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           
 10217                           ;psect for function _Button_Baseline_Update
 10218  0529                     _Button_Baseline_Update:	
 10219                           
 10220                           ;incstack = 0
 10221                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10222                           ;Button_Baseline_Update@button stored from wreg
 10223  0529  00F8               	movwf	Button_Baseline_Update@button
 10224  052A                     l3369:	
 10225                           
 10226                           ;mcc_generated_files/mtouch/mtouch_button.c: 492: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 493: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 494:     if (GIE == (uint8_t)1)
 10227  052A  1F8B               	btfss	11,7	;volatile
 10228  052B  2D2D               	goto	u2541
 10229  052C  2D2E               	goto	u2540
 10230  052D                     u2541:	
 10231  052D  2D71               	goto	l3377
 10232  052E                     u2540:	
 10233  052E                     l3371:	
 10234                           
 10235                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 496:         GIE = (uint8_t)0;
 10236  052E  138B               	bcf	11,7	;volatile
 10237  052F                     l3373:	
 10238                           
 10239                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 10240  052F  0878               	movf	Button_Baseline_Update@button,w
 10241  0530  3E05               	addlw	5
 10242  0531  0086               	movwf	6
 10243  0532  0187               	clrf	7
 10244  0533  3F40               	moviw [0]fsr1
 10245  0534  00F2               	movwf	??_Button_Baseline_Update
 10246  0535  3F41               	moviw [1]fsr1
 10247  0536  00F3               	movwf	??_Button_Baseline_Update+1
 10248  0537  3F42               	moviw [2]fsr1
 10249  0538  00F4               	movwf	??_Button_Baseline_Update+2
 10250  0539  3F43               	moviw [3]fsr1
 10251  053A  00F5               	movwf	??_Button_Baseline_Update+3
 10252  053B  3004               	movlw	4
 10253  053C                     u2555:	
 10254  053C  36F5               	lsrf	??_Button_Baseline_Update+3,f
 10255  053D  0CF4               	rrf	??_Button_Baseline_Update+2,f
 10256  053E  0CF3               	rrf	??_Button_Baseline_Update+1,f
 10257  053F  0CF2               	rrf	??_Button_Baseline_Update,f
 10258  0540                     u2550:	
 10259  0540  0B89               	decfsz	9,f
 10260  0541  2D3C               	goto	u2555
 10261  0542  0878               	movf	Button_Baseline_Update@button,w
 10262  0543  3E05               	addlw	5
 10263  0544  0086               	movwf	6
 10264  0545  0187               	clrf	7
 10265  0546  0872               	movf	??_Button_Baseline_Update,w
 10266  0547  0281               	subwf	1,f
 10267  0548  3141               	addfsr 1,1
 10268  0549  0873               	movf	??_Button_Baseline_Update+1,w
 10269  054A  3B81               	subwfb	1,f
 10270  054B  3141               	addfsr 1,1
 10271  054C  0874               	movf	??_Button_Baseline_Update+2,w
 10272  054D  3B81               	subwfb	1,f
 10273  054E  3141               	addfsr 1,1
 10274  054F  0875               	movf	??_Button_Baseline_Update+3,w
 10275  0550  3B81               	subwfb	1,f
 10276  0551  317D               	addfsr 1,-3
 10277                           
 10278                           ;mcc_generated_files/mtouch/mtouch_button.c: 498:         button->baseline += button->re
      +                          ading;
 10279  0552  0878               	movf	Button_Baseline_Update@button,w
 10280  0553  3E03               	addlw	3
 10281  0554  0086               	movwf	6
 10282  0555  0187               	clrf	7
 10283  0556  3F40               	moviw [0]fsr1
 10284  0557  00F2               	movwf	??_Button_Baseline_Update
 10285  0558  3F41               	moviw [1]fsr1
 10286  0559  00F3               	movwf	??_Button_Baseline_Update+1
 10287  055A  0872               	movf	??_Button_Baseline_Update,w
 10288  055B  00F4               	movwf	??_Button_Baseline_Update+2
 10289  055C  0873               	movf	??_Button_Baseline_Update+1,w
 10290  055D  00F5               	movwf	??_Button_Baseline_Update+3
 10291  055E  01F6               	clrf	??_Button_Baseline_Update+4
 10292  055F  01F7               	clrf	??_Button_Baseline_Update+5
 10293  0560  0878               	movf	Button_Baseline_Update@button,w
 10294  0561  3E05               	addlw	5
 10295  0562  0086               	movwf	6
 10296  0563  0187               	clrf	7
 10297  0564  0874               	movf	??_Button_Baseline_Update+2,w
 10298  0565  0781               	addwf	1,f
 10299  0566  3141               	addfsr 1,1
 10300  0567  0875               	movf	??_Button_Baseline_Update+3,w
 10301  0568  3D81               	addwfc	1,f
 10302  0569  3141               	addfsr 1,1
 10303  056A  0876               	movf	??_Button_Baseline_Update+4,w
 10304  056B  3D81               	addwfc	1,f
 10305  056C  3141               	addfsr 1,1
 10306  056D  0877               	movf	??_Button_Baseline_Update+5,w
 10307  056E  3D81               	addwfc	1,f
 10308  056F                     l3375:	
 10309                           
 10310                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:         GIE = (uint8_t)1;
 10311  056F  178B               	bsf	11,7	;volatile
 10312                           
 10313                           ;mcc_generated_files/mtouch/mtouch_button.c: 500:     }
 10314  0570  2DB1               	goto	l631
 10315  0571                     l3377:	
 10316                           
 10317                           ;mcc_generated_files/mtouch/mtouch_button.c: 502:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 503:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 10318  0571  0878               	movf	Button_Baseline_Update@button,w
 10319  0572  3E05               	addlw	5
 10320  0573  0086               	movwf	6
 10321  0574  0187               	clrf	7
 10322  0575  3F40               	moviw [0]fsr1
 10323  0576  00F2               	movwf	??_Button_Baseline_Update
 10324  0577  3F41               	moviw [1]fsr1
 10325  0578  00F3               	movwf	??_Button_Baseline_Update+1
 10326  0579  3F42               	moviw [2]fsr1
 10327  057A  00F4               	movwf	??_Button_Baseline_Update+2
 10328  057B  3F43               	moviw [3]fsr1
 10329  057C  00F5               	movwf	??_Button_Baseline_Update+3
 10330  057D  3004               	movlw	4
 10331  057E                     u2565:	
 10332  057E  36F5               	lsrf	??_Button_Baseline_Update+3,f
 10333  057F  0CF4               	rrf	??_Button_Baseline_Update+2,f
 10334  0580  0CF3               	rrf	??_Button_Baseline_Update+1,f
 10335  0581  0CF2               	rrf	??_Button_Baseline_Update,f
 10336  0582                     u2560:	
 10337  0582  0B89               	decfsz	9,f
 10338  0583  2D7E               	goto	u2565
 10339  0584  0878               	movf	Button_Baseline_Update@button,w
 10340  0585  3E05               	addlw	5
 10341  0586  0086               	movwf	6
 10342  0587  0187               	clrf	7
 10343  0588  0872               	movf	??_Button_Baseline_Update,w
 10344  0589  0281               	subwf	1,f
 10345  058A  3141               	addfsr 1,1
 10346  058B  0873               	movf	??_Button_Baseline_Update+1,w
 10347  058C  3B81               	subwfb	1,f
 10348  058D  3141               	addfsr 1,1
 10349  058E  0874               	movf	??_Button_Baseline_Update+2,w
 10350  058F  3B81               	subwfb	1,f
 10351  0590  3141               	addfsr 1,1
 10352  0591  0875               	movf	??_Button_Baseline_Update+3,w
 10353  0592  3B81               	subwfb	1,f
 10354  0593  317D               	addfsr 1,-3
 10355                           
 10356                           ;mcc_generated_files/mtouch/mtouch_button.c: 504:         button->baseline += button->re
      +                          ading;
 10357  0594  0878               	movf	Button_Baseline_Update@button,w
 10358  0595  3E03               	addlw	3
 10359  0596  0086               	movwf	6
 10360  0597  0187               	clrf	7
 10361  0598  3F40               	moviw [0]fsr1
 10362  0599  00F2               	movwf	??_Button_Baseline_Update
 10363  059A  3F41               	moviw [1]fsr1
 10364  059B  00F3               	movwf	??_Button_Baseline_Update+1
 10365  059C  0872               	movf	??_Button_Baseline_Update,w
 10366  059D  00F4               	movwf	??_Button_Baseline_Update+2
 10367  059E  0873               	movf	??_Button_Baseline_Update+1,w
 10368  059F  00F5               	movwf	??_Button_Baseline_Update+3
 10369  05A0  01F6               	clrf	??_Button_Baseline_Update+4
 10370  05A1  01F7               	clrf	??_Button_Baseline_Update+5
 10371  05A2  0878               	movf	Button_Baseline_Update@button,w
 10372  05A3  3E05               	addlw	5
 10373  05A4  0086               	movwf	6
 10374  05A5  0187               	clrf	7
 10375  05A6  0874               	movf	??_Button_Baseline_Update+2,w
 10376  05A7  0781               	addwf	1,f
 10377  05A8  3141               	addfsr 1,1
 10378  05A9  0875               	movf	??_Button_Baseline_Update+3,w
 10379  05AA  3D81               	addwfc	1,f
 10380  05AB  3141               	addfsr 1,1
 10381  05AC  0876               	movf	??_Button_Baseline_Update+4,w
 10382  05AD  3D81               	addwfc	1,f
 10383  05AE  3141               	addfsr 1,1
 10384  05AF  0877               	movf	??_Button_Baseline_Update+5,w
 10385  05B0  3D81               	addwfc	1,f
 10386  05B1                     l631:	
 10387  05B1  0008               	return
 10388  05B2                     __end_of_Button_Baseline_Update:	
 10389                           
 10390                           	psect	text64
 10391  0CB9                     __ptext64:	
 10392 ;; *************** function _Button_Baseline_Initialize *****************
 10393 ;; Defined at:
 10394 ;;		line 486 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;  button          1    wreg     PTR struct .
 10397 ;;		 -> mtouch_button(16), 
 10398 ;; Auto vars:     Size  Location     Type
 10399 ;;  button          1    4[BANK0 ] PTR struct .
 10400 ;;		 -> mtouch_button(16), 
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10410 ;;      Params:         0       0       0       0       0       0       0       0
 10411 ;;      Locals:         0       1       0       0       0       0       0       0
 10412 ;;      Temps:          0       4       0       0       0       0       0       0
 10413 ;;      Totals:         0       5       0       0       0       0       0       0
 10414 ;;Total ram usage:        5 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    6
 10417 ;; This function calls:
 10418 ;;		_MTOUCH_Sensor_RawSample_Get
 10419 ;; This function is called by:
 10420 ;;		_Button_State_Initializing
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           
 10425                           ;psect for function _Button_Baseline_Initialize
 10426  0CB9                     _Button_Baseline_Initialize:	
 10427                           
 10428                           ;incstack = 0
 10429                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10430                           ;Button_Baseline_Initialize@button stored from wreg
 10431  0CB9  0020               	movlb	0	; select bank0
 10432  0CBA  00A4               	movwf	Button_Baseline_Initialize@button
 10433  0CBB                     l4635:	
 10434                           
 10435                           ;mcc_generated_files/mtouch/mtouch_button.c: 486: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 487: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 488:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 10436  0CBB  0A24               	incf	Button_Baseline_Initialize@button,w
 10437  0CBC  0086               	movwf	6
 10438  0CBD  0187               	clrf	7
 10439  0CBE  0801               	movf	1,w
 10440  0CBF  318B  233F  318C   	fcall	_MTOUCH_Sensor_RawSample_Get
 10441  0CC2  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10442  0CC3  0020               	movlb	0	; select bank0
 10443  0CC4  00A0               	movwf	??_Button_Baseline_Initialize
 10444  0CC5  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10445  0CC6  00A1               	movwf	??_Button_Baseline_Initialize+1
 10446  0CC7  01A2               	clrf	??_Button_Baseline_Initialize+2
 10447  0CC8  01A3               	clrf	??_Button_Baseline_Initialize+3
 10448  0CC9  0824               	movf	Button_Baseline_Initialize@button,w
 10449  0CCA  3E05               	addlw	5
 10450  0CCB  0086               	movwf	6
 10451  0CCC  0187               	clrf	7
 10452  0CCD  0820               	movf	??_Button_Baseline_Initialize,w
 10453  0CCE  3FC0               	movwi [0]fsr1
 10454  0CCF  0821               	movf	??_Button_Baseline_Initialize+1,w
 10455  0CD0  3FC1               	movwi [1]fsr1
 10456  0CD1  0822               	movf	??_Button_Baseline_Initialize+2,w
 10457  0CD2  3FC2               	movwi [2]fsr1
 10458  0CD3  0823               	movf	??_Button_Baseline_Initialize+3,w
 10459  0CD4  3FC3               	movwi [3]fsr1
 10460  0CD5                     l4637:	
 10461                           
 10462                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 10463  0CD5  0824               	movf	Button_Baseline_Initialize@button,w
 10464  0CD6  3E05               	addlw	5
 10465  0CD7  0086               	movwf	6
 10466  0CD8  0187               	clrf	7
 10467  0CD9  3004               	movlw	4
 10468  0CDA                     u4395:	
 10469  0CDA  3581               	lslf	1,f
 10470  0CDB  3141               	addfsr 1,1
 10471  0CDC  0D81               	rlf	1,f
 10472  0CDD  3141               	addfsr 1,1
 10473  0CDE  0D81               	rlf	1,f
 10474  0CDF  3141               	addfsr 1,1
 10475  0CE0  0D81               	rlf	1,f
 10476  0CE1  317D               	addfsr 1,-3
 10477  0CE2  0B89               	decfsz	9,f
 10478  0CE3  2CDA               	goto	u4395
 10479  0CE4                     l626:	
 10480  0CE4  0008               	return
 10481  0CE5                     __end_of_Button_Baseline_Initialize:	
 10482                           
 10483                           	psect	text65
 10484  0A5B                     __ptext65:	
 10485 ;; *************** function _Button_Reading_Update *****************
 10486 ;; Defined at:
 10487 ;;		line 459 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;  button          1    wreg     PTR struct .
 10490 ;;		 -> mtouch_button(16), 
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  button          1    3[BANK0 ] PTR struct .
 10493 ;;		 -> mtouch_button(16), 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  1    wreg      void 
 10496 ;; Registers used:
 10497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10503 ;;      Params:         0       0       0       0       0       0       0       0
 10504 ;;      Locals:         0       1       0       0       0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0       0
 10506 ;;      Totals:         0       1       0       0       0       0       0       0
 10507 ;;Total ram usage:        1 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    7
 10510 ;; This function calls:
 10511 ;;		_Button_Reading_Update_Helper
 10512 ;; This function is called by:
 10513 ;;		_Button_Service
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           
 10518                           ;psect for function _Button_Reading_Update
 10519  0A5B                     _Button_Reading_Update:	
 10520                           
 10521                           ;incstack = 0
 10522                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10523                           ;Button_Reading_Update@button stored from wreg
 10524  0A5B  0020               	movlb	0	; select bank0
 10525  0A5C  00A3               	movwf	Button_Reading_Update@button
 10526  0A5D                     l4735:	
 10527                           
 10528                           ;mcc_generated_files/mtouch/mtouch_button.c: 459: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 460: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 461:     if (GIE == (uint8_t) 1)
 10529  0A5D  1F8B               	btfss	11,7	;volatile
 10530  0A5E  2A60               	goto	u4561
 10531  0A5F  2A61               	goto	u4560
 10532  0A60                     u4561:	
 10533  0A60  2A68               	goto	l4743
 10534  0A61                     u4560:	
 10535  0A61                     l4737:	
 10536                           
 10537                           ;mcc_generated_files/mtouch/mtouch_button.c: 462:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 463:         GIE = (uint8_t) 0;
 10538  0A61  138B               	bcf	11,7	;volatile
 10539  0A62                     l4739:	
 10540                           
 10541                           ;mcc_generated_files/mtouch/mtouch_button.c: 464:         Button_Reading_Update_Helper(b
      +                          utton);
 10542  0A62  0823               	movf	Button_Reading_Update@button,w
 10543  0A63  318E  26AA  318A   	fcall	_Button_Reading_Update_Helper
 10544  0A66                     l4741:	
 10545                           
 10546                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:         GIE = (uint8_t) 1;
 10547  0A66  178B               	bsf	11,7	;volatile
 10548                           
 10549                           ;mcc_generated_files/mtouch/mtouch_button.c: 466:     }
 10550  0A67  2A6C               	goto	l618
 10551  0A68                     l4743:	
 10552                           
 10553                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 469:         Button_Reading_Update_Helper(button);
 10554  0A68  0823               	movf	Button_Reading_Update@button,w
 10555  0A69  318E  26AA  318A   	fcall	_Button_Reading_Update_Helper
 10556  0A6C                     l618:	
 10557  0A6C  0008               	return
 10558  0A6D                     __end_of_Button_Reading_Update:	
 10559                           
 10560                           	psect	text66
 10561  0EAA                     __ptext66:	
 10562 ;; *************** function _Button_Reading_Update_Helper *****************
 10563 ;; Defined at:
 10564 ;;		line 473 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;  button          1    wreg     PTR struct .
 10567 ;;		 -> mtouch_button(16), 
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;  button          1    2[BANK0 ] PTR struct .
 10570 ;;		 -> mtouch_button(16), 
 10571 ;; Return value:  Size  Location     Type
 10572 ;;                  1    wreg      void 
 10573 ;; Registers used:
 10574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10575 ;; Tracked objects:
 10576 ;;		On entry : 0/0
 10577 ;;		On exit  : 0/0
 10578 ;;		Unchanged: 0/0
 10579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10580 ;;      Params:         0       0       0       0       0       0       0       0
 10581 ;;      Locals:         0       1       0       0       0       0       0       0
 10582 ;;      Temps:          0       2       0       0       0       0       0       0
 10583 ;;      Totals:         0       3       0       0       0       0       0       0
 10584 ;;Total ram usage:        3 bytes
 10585 ;; Hardware stack levels used:    1
 10586 ;; Hardware stack levels required when called:    6
 10587 ;; This function calls:
 10588 ;;		_MTOUCH_Sensor_RawSample_Get
 10589 ;; This function is called by:
 10590 ;;		_Button_Reading_Update
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function _Button_Reading_Update_Helper
 10596  0EAA                     _Button_Reading_Update_Helper:	
 10597                           
 10598                           ;incstack = 0
 10599                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10600                           ;Button_Reading_Update_Helper@button stored from wreg
 10601  0EAA  0020               	movlb	0	; select bank0
 10602  0EAB  00A2               	movwf	Button_Reading_Update_Helper@button
 10603  0EAC                     l4639:	
 10604                           
 10605                           ;mcc_generated_files/mtouch/mtouch_button.c: 473: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 474: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 475:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 10606  0EAC  0822               	movf	Button_Reading_Update_Helper@button,w
 10607  0EAD  3E02               	addlw	2
 10608  0EAE  0086               	movwf	6
 10609  0EAF  0187               	clrf	7
 10610  0EB0  0801               	movf	1,w
 10611  0EB1  1903               	btfsc	3,2
 10612  0EB2  2EB4               	goto	u4401
 10613  0EB3  2EB5               	goto	u4400
 10614  0EB4                     u4401:	
 10615  0EB4  2EE8               	goto	l4645
 10616  0EB5                     u4400:	
 10617  0EB5                     l4641:	
 10618                           
 10619                           ;mcc_generated_files/mtouch/mtouch_button.c: 476:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 477:         button->reading -= button->reading>>((uint8_t)4u);
 10620  0EB5  0822               	movf	Button_Reading_Update_Helper@button,w
 10621  0EB6  3E03               	addlw	3
 10622  0EB7  0086               	movwf	6
 10623  0EB8  0187               	clrf	7
 10624  0EB9  3F40               	moviw [0]fsr1
 10625  0EBA  00A0               	movwf	??_Button_Reading_Update_Helper
 10626  0EBB  3F41               	moviw [1]fsr1
 10627  0EBC  00A1               	movwf	??_Button_Reading_Update_Helper+1
 10628  0EBD  3004               	movlw	4
 10629  0EBE                     u4415:	
 10630  0EBE  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 10631  0EBF  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 10632  0EC0  0B89               	decfsz	9,f
 10633  0EC1  2EBE               	goto	u4415
 10634  0EC2  0822               	movf	Button_Reading_Update_Helper@button,w
 10635  0EC3  3E03               	addlw	3
 10636  0EC4  0086               	movwf	6
 10637  0EC5  0187               	clrf	7
 10638  0EC6  0820               	movf	??_Button_Reading_Update_Helper,w
 10639  0EC7  0281               	subwf	1,f
 10640  0EC8  3141               	addfsr 1,1
 10641  0EC9  0821               	movf	??_Button_Reading_Update_Helper+1,w
 10642  0ECA  3B81               	subwfb	1,f
 10643  0ECB  317F               	addfsr 1,-1
 10644  0ECC                     l4643:	
 10645                           
 10646                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)4u);
 10647  0ECC  0A22               	incf	Button_Reading_Update_Helper@button,w
 10648  0ECD  0086               	movwf	6
 10649  0ECE  0187               	clrf	7
 10650  0ECF  0801               	movf	1,w
 10651  0ED0  318B  233F  318E   	fcall	_MTOUCH_Sensor_RawSample_Get
 10652  0ED3  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10653  0ED4  0020               	movlb	0	; select bank0
 10654  0ED5  00A0               	movwf	??_Button_Reading_Update_Helper
 10655  0ED6  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10656  0ED7  00A1               	movwf	??_Button_Reading_Update_Helper+1
 10657  0ED8  3004               	movlw	4
 10658  0ED9                     u4425:	
 10659  0ED9  36A1               	lsrf	??_Button_Reading_Update_Helper+1,f
 10660  0EDA  0CA0               	rrf	??_Button_Reading_Update_Helper,f
 10661  0EDB  0B89               	decfsz	9,f
 10662  0EDC  2ED9               	goto	u4425
 10663  0EDD  0822               	movf	Button_Reading_Update_Helper@button,w
 10664  0EDE  3E03               	addlw	3
 10665  0EDF  0086               	movwf	6
 10666  0EE0  0187               	clrf	7
 10667  0EE1  0820               	movf	??_Button_Reading_Update_Helper,w
 10668  0EE2  0781               	addwf	1,f
 10669  0EE3  3141               	addfsr 1,1
 10670  0EE4  0821               	movf	??_Button_Reading_Update_Helper+1,w
 10671  0EE5  3D81               	addwfc	1,f
 10672  0EE6  317F               	addfsr 1,-1
 10673                           
 10674                           ;mcc_generated_files/mtouch/mtouch_button.c: 479:     }
 10675  0EE7  2EF8               	goto	l623
 10676  0EE8                     l4645:	
 10677                           
 10678                           ;mcc_generated_files/mtouch/mtouch_button.c: 481:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 482:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 10679  0EE8  0A22               	incf	Button_Reading_Update_Helper@button,w
 10680  0EE9  0086               	movwf	6
 10681  0EEA  0187               	clrf	7
 10682  0EEB  0801               	movf	1,w
 10683  0EEC  318B  233F  318E   	fcall	_MTOUCH_Sensor_RawSample_Get
 10684  0EEF  0020               	movlb	0	; select bank0
 10685  0EF0  0822               	movf	Button_Reading_Update_Helper@button,w
 10686  0EF1  3E03               	addlw	3
 10687  0EF2  0086               	movwf	6
 10688  0EF3  0187               	clrf	7
 10689  0EF4  0876               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10690  0EF5  3FC0               	movwi [0]fsr1
 10691  0EF6  0877               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10692  0EF7  3FC1               	movwi [1]fsr1
 10693  0EF8                     l623:	
 10694  0EF8  0008               	return
 10695  0EF9                     __end_of_Button_Reading_Update_Helper:	
 10696                           
 10697                           	psect	text67
 10698  0B3F                     __ptext67:	
 10699 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 10700 ;; Defined at:
 10701 ;;		line 775 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;  name            1    wreg     enum E2871
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;  name            1    9[COMMON] enum E2871
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  2    6[COMMON] unsigned short 
 10708 ;; Registers used:
 10709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10715 ;;      Params:         2       0       0       0       0       0       0       0
 10716 ;;      Locals:         1       0       0       0       0       0       0       0
 10717 ;;      Temps:          1       0       0       0       0       0       0       0
 10718 ;;      Totals:         4       0       0       0       0       0       0       0
 10719 ;;Total ram usage:        4 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    5
 10722 ;; This function calls:
 10723 ;;		___bmul
 10724 ;; This function is called by:
 10725 ;;		_Button_Reading_Update_Helper
 10726 ;;		_Button_Baseline_Initialize
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           
 10731                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 10732  0B3F                     _MTOUCH_Sensor_RawSample_Get:	
 10733                           
 10734                           ;incstack = 0
 10735                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10736                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 10737  0B3F  00F9               	movwf	MTOUCH_Sensor_RawSample_Get@name
 10738  0B40                     l4547:	
 10739                           
 10740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          776: {;mcc_generated_files/mtouch/mtouch_sensor.c: 777:     if (name < 1u)
 10741  0B40  0879               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 10742  0B41  1D03               	btfss	3,2
 10743  0B42  2B44               	goto	u4291
 10744  0B43  2B45               	goto	u4290
 10745  0B44                     u4291:	
 10746  0B44  2B55               	goto	l4555
 10747  0B45                     u4290:	
 10748  0B45                     l4549:	
 10749                           
 10750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 779:         return mtouch_sensor[name].rawSample;
 10751  0B45  3009               	movlw	9
 10752  0B46  00F8               	movwf	??_MTOUCH_Sensor_RawSample_Get
 10753  0B47  0878               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 10754  0B48  00F2               	movwf	___bmul@multiplicand
 10755  0B49  0879               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 10756  0B4A  318A  22B9  318B   	fcall	___bmul
 10757  0B4D  3E66               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 10758  0B4E  0086               	movwf	6
 10759  0B4F  0187               	clrf	7
 10760  0B50  3F40               	moviw [0]fsr1
 10761  0B51  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get
 10762  0B52  3F41               	moviw [1]fsr1
 10763  0B53  00F7               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 10764  0B54  2B57               	goto	l294
 10765  0B55                     l4555:	
 10766                           
 10767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:         return (mtouch_sensor_sample_t
      +                          )0;
 10768  0B55  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get
 10769  0B56  01F7               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 10770  0B57                     l294:	
 10771  0B57  0008               	return
 10772  0B58                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 10773                           
 10774                           	psect	text68
 10775  0AB9                     __ptext68:	
 10776 ;; *************** function ___bmul *****************
 10777 ;; Defined at:
 10778 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul8.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  multiplier      1    wreg     unsigned char 
 10781 ;;  multiplicand    1    2[COMMON] unsigned char 
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  multiplier      1    5[COMMON] unsigned char 
 10784 ;;  product         1    4[COMMON] unsigned char 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  1    wreg      unsigned char 
 10787 ;; Registers used:
 10788 ;;		wreg, status,2, status,0
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10794 ;;      Params:         1       0       0       0       0       0       0       0
 10795 ;;      Locals:         2       0       0       0       0       0       0       0
 10796 ;;      Temps:          1       0       0       0       0       0       0       0
 10797 ;;      Totals:         4       0       0       0       0       0       0       0
 10798 ;;Total ram usage:        4 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    4
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_MTOUCH_Sensor_Initialize
 10805 ;;		_MTOUCH_Sensor_RawSample_Get
 10806 ;;		_MTOUCH_Sensor_Enable
 10807 ;;		_MTOUCH_Sensor_Calibrate
 10808 ;;		_MTOUCH_Sensor_isCalibrated
 10809 ;;		_MTOUCH_Sensor_wasSampled
 10810 ;;		_MTOUCH_Sensor_isAnySensorActive
 10811 ;;		_MTOUCH_Sensor_Disable
 10812 ;;		_MTOUCH_Sensor_isEnabled
 10813 ;;		_MTOUCH_Sensor_isActive
 10814 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 10815 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 10816 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 10817 ;;		_MTOUCH_Sensor_Oversampling_Get
 10818 ;;		_MTOUCH_Sensor_Oversampling_Set
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           
 10823                           ;psect for function ___bmul
 10824  0AB9                     ___bmul:	
 10825                           
 10826                           ;incstack = 0
 10827                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10828                           ;___bmul@multiplier stored from wreg
 10829  0AB9  00F5               	movwf	___bmul@multiplier
 10830  0ABA                     l4323:	
 10831  0ABA  01F4               	clrf	___bmul@product
 10832  0ABB                     l4325:	
 10833  0ABB  1C75               	btfss	___bmul@multiplier,0
 10834  0ABC  2ABE               	goto	u3911
 10835  0ABD  2ABF               	goto	u3910
 10836  0ABE                     u3911:	
 10837  0ABE  2AC3               	goto	l4329
 10838  0ABF                     u3910:	
 10839  0ABF                     l4327:	
 10840  0ABF  0872               	movf	___bmul@multiplicand,w
 10841  0AC0  00F3               	movwf	??___bmul
 10842  0AC1  0873               	movf	??___bmul,w
 10843  0AC2  07F4               	addwf	___bmul@product,f
 10844  0AC3                     l4329:	
 10845  0AC3  1003               	clrc
 10846  0AC4  0DF2               	rlf	___bmul@multiplicand,f
 10847  0AC5                     l4331:	
 10848  0AC5  1003               	clrc
 10849  0AC6  0CF5               	rrf	___bmul@multiplier,f
 10850  0AC7  0875               	movf	___bmul@multiplier,w
 10851  0AC8  1D03               	btfss	3,2
 10852  0AC9  2ACB               	goto	u3921
 10853  0ACA  2ACC               	goto	u3920
 10854  0ACB                     u3921:	
 10855  0ACB  2ABB               	goto	l4325
 10856  0ACC                     u3920:	
 10857  0ACC                     l4333:	
 10858  0ACC  0874               	movf	___bmul@product,w
 10859  0ACD                     l1136:	
 10860  0ACD  0008               	return
 10861  0ACE                     __end_of___bmul:	
 10862                           
 10863                           	psect	text69
 10864  05B2                     __ptext69:	
 10865 ;; *************** function _Button_Deviation_Update *****************
 10866 ;; Defined at:
 10867 ;;		line 410 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  button          1    wreg     PTR struct .
 10870 ;;		 -> mtouch_button(16), 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;  button          1    2[COMMON] PTR struct .
 10873 ;;		 -> mtouch_button(16), 
 10874 ;;  deviation       4    3[COMMON] long 
 10875 ;; Return value:  Size  Location     Type
 10876 ;;                  1    wreg      void 
 10877 ;; Registers used:
 10878 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10879 ;; Tracked objects:
 10880 ;;		On entry : 0/0
 10881 ;;		On exit  : 0/0
 10882 ;;		Unchanged: 0/0
 10883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10884 ;;      Params:         0       0       0       0       0       0       0       0
 10885 ;;      Locals:         5       0       0       0       0       0       0       0
 10886 ;;      Temps:          0      10       0       0       0       0       0       0
 10887 ;;      Totals:         5      10       0       0       0       0       0       0
 10888 ;;Total ram usage:       15 bytes
 10889 ;; Hardware stack levels used:    1
 10890 ;; Hardware stack levels required when called:    4
 10891 ;; This function calls:
 10892 ;;		Nothing
 10893 ;; This function is called by:
 10894 ;;		_Button_Service
 10895 ;; This function uses a non-reentrant model
 10896 ;;
 10897                           
 10898                           
 10899                           ;psect for function _Button_Deviation_Update
 10900  05B2                     _Button_Deviation_Update:	
 10901                           
 10902                           ;incstack = 0
 10903                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10904                           ;Button_Deviation_Update@button stored from wreg
 10905  05B2  00F2               	movwf	Button_Deviation_Update@button
 10906  05B3                     l4745:	
 10907                           
 10908                           ;mcc_generated_files/mtouch/mtouch_button.c: 410: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 411: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 412:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 414:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 10909  05B3  0872               	movf	Button_Deviation_Update@button,w
 10910  05B4  3E05               	addlw	5
 10911  05B5  0086               	movwf	6
 10912  05B6  0187               	clrf	7
 10913  05B7  3F40               	moviw [0]fsr1
 10914  05B8  0020               	movlb	0	; select bank0
 10915  05B9  00A0               	movwf	??_Button_Deviation_Update
 10916  05BA  3F41               	moviw [1]fsr1
 10917  05BB  00A1               	movwf	??_Button_Deviation_Update+1
 10918  05BC  3F42               	moviw [2]fsr1
 10919  05BD  00A2               	movwf	??_Button_Deviation_Update+2
 10920  05BE  3F43               	moviw [3]fsr1
 10921  05BF  00A3               	movwf	??_Button_Deviation_Update+3
 10922  05C0  3004               	movlw	4
 10923  05C1                     u4575:	
 10924  05C1  36A3               	lsrf	??_Button_Deviation_Update+3,f
 10925  05C2  0CA2               	rrf	??_Button_Deviation_Update+2,f
 10926  05C3  0CA1               	rrf	??_Button_Deviation_Update+1,f
 10927  05C4  0CA0               	rrf	??_Button_Deviation_Update,f
 10928  05C5                     u4570:	
 10929  05C5  0B89               	decfsz	9,f
 10930  05C6  2DC1               	goto	u4575
 10931  05C7  0872               	movf	Button_Deviation_Update@button,w
 10932  05C8  3E03               	addlw	3
 10933  05C9  0086               	movwf	6
 10934  05CA  0187               	clrf	7
 10935  05CB  3F40               	moviw [0]fsr1
 10936  05CC  00A4               	movwf	??_Button_Deviation_Update+4
 10937  05CD  3F41               	moviw [1]fsr1
 10938  05CE  00A5               	movwf	??_Button_Deviation_Update+5
 10939  05CF  0824               	movf	??_Button_Deviation_Update+4,w
 10940  05D0  00A6               	movwf	??_Button_Deviation_Update+6
 10941  05D1  0825               	movf	??_Button_Deviation_Update+5,w
 10942  05D2  00A7               	movwf	??_Button_Deviation_Update+7
 10943  05D3  01A8               	clrf	??_Button_Deviation_Update+8
 10944  05D4  01A9               	clrf	??_Button_Deviation_Update+9
 10945  05D5  0820               	movf	??_Button_Deviation_Update,w
 10946  05D6  02A6               	subwf	??_Button_Deviation_Update+6,f
 10947  05D7  0821               	movf	??_Button_Deviation_Update+1,w
 10948  05D8  3BA7               	subwfb	??_Button_Deviation_Update+7,f
 10949  05D9  0822               	movf	??_Button_Deviation_Update+2,w
 10950  05DA  3BA8               	subwfb	??_Button_Deviation_Update+8,f
 10951  05DB  0823               	movf	??_Button_Deviation_Update+3,w
 10952  05DC  3BA9               	subwfb	??_Button_Deviation_Update+9,f
 10953  05DD  0829               	movf	??_Button_Deviation_Update+9,w
 10954  05DE  00F6               	movwf	Button_Deviation_Update@deviation+3
 10955  05DF  0828               	movf	??_Button_Deviation_Update+8,w
 10956  05E0  00F5               	movwf	Button_Deviation_Update@deviation+2
 10957  05E1  0827               	movf	??_Button_Deviation_Update+7,w
 10958  05E2  00F4               	movwf	Button_Deviation_Update@deviation+1
 10959  05E3  0826               	movf	??_Button_Deviation_Update+6,w
 10960  05E4  00F3               	movwf	Button_Deviation_Update@deviation
 10961                           
 10962                           ;mcc_generated_files/mtouch/mtouch_button.c: 417:     deviation = deviation >> (button->
      +                          scaling);
 10963  05E5  0873               	movf	Button_Deviation_Update@deviation,w
 10964  05E6  00A0               	movwf	??_Button_Deviation_Update
 10965  05E7  0874               	movf	Button_Deviation_Update@deviation+1,w
 10966  05E8  00A1               	movwf	??_Button_Deviation_Update+1
 10967  05E9  0875               	movf	Button_Deviation_Update@deviation+2,w
 10968  05EA  00A2               	movwf	??_Button_Deviation_Update+2
 10969  05EB  0876               	movf	Button_Deviation_Update@deviation+3,w
 10970  05EC  00A3               	movwf	??_Button_Deviation_Update+3
 10971  05ED  0872               	movf	Button_Deviation_Update@button,w
 10972  05EE  3E0F               	addlw	15
 10973  05EF  0086               	movwf	6
 10974  05F0  0187               	clrf	7
 10975  05F1  0A01               	incf	1,w
 10976  05F2  2DF7               	goto	u4580
 10977  05F3                     u4585:	
 10978  05F3  37A3               	asrf	??_Button_Deviation_Update+3,f
 10979  05F4  0CA2               	rrf	??_Button_Deviation_Update+2,f
 10980  05F5  0CA1               	rrf	??_Button_Deviation_Update+1,f
 10981  05F6  0CA0               	rrf	??_Button_Deviation_Update,f
 10982  05F7                     u4580:	
 10983  05F7  0B89               	decfsz	9,f
 10984  05F8  2DF3               	goto	u4585
 10985  05F9  0823               	movf	??_Button_Deviation_Update+3,w
 10986  05FA  00F6               	movwf	Button_Deviation_Update@deviation+3
 10987  05FB  0822               	movf	??_Button_Deviation_Update+2,w
 10988  05FC  00F5               	movwf	Button_Deviation_Update@deviation+2
 10989  05FD  0821               	movf	??_Button_Deviation_Update+1,w
 10990  05FE  00F4               	movwf	Button_Deviation_Update@deviation+1
 10991  05FF  0820               	movf	??_Button_Deviation_Update,w
 10992  0600  00F3               	movwf	Button_Deviation_Update@deviation
 10993  0601                     l4747:	
 10994                           
 10995                           ;mcc_generated_files/mtouch/mtouch_button.c: 420:     if (deviation > ((0x7f)))
 10996  0601  1BF6               	btfsc	Button_Deviation_Update@deviation+3,7
 10997  0602  2E11               	goto	u4591
 10998  0603  0876               	movf	Button_Deviation_Update@deviation+3,w
 10999  0604  1D03               	btfss	3,2
 11000  0605  2E12               	goto	u4590
 11001  0606  0875               	movf	Button_Deviation_Update@deviation+2,w
 11002  0607  1D03               	btfss	3,2
 11003  0608  2E12               	goto	u4590
 11004  0609  0874               	movf	Button_Deviation_Update@deviation+1,w
 11005  060A  1D03               	btfss	3,2
 11006  060B  2E12               	goto	u4590
 11007  060C  3080               	movlw	128
 11008  060D  0273               	subwf	Button_Deviation_Update@deviation,w
 11009  060E  1C03               	btfss	3,0
 11010  060F  2E11               	goto	u4591
 11011  0610  2E12               	goto	u4590
 11012  0611                     u4591:	
 11013  0611  2E1A               	goto	l4751
 11014  0612                     u4590:	
 11015  0612                     l4749:	
 11016                           
 11017                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 422:         deviation = ((0x7f));
 11018  0612  3000               	movlw	0
 11019  0613  00F6               	movwf	Button_Deviation_Update@deviation+3
 11020  0614  3000               	movlw	0
 11021  0615  00F5               	movwf	Button_Deviation_Update@deviation+2
 11022  0616  3000               	movlw	0
 11023  0617  00F4               	movwf	Button_Deviation_Update@deviation+1
 11024  0618  307F               	movlw	127
 11025  0619  00F3               	movwf	Button_Deviation_Update@deviation
 11026  061A                     l4751:	
 11027                           
 11028                           ;mcc_generated_files/mtouch/mtouch_button.c: 424:     if (deviation < ((-1-0x7f)))
 11029  061A  1FF6               	btfss	Button_Deviation_Update@deviation+3,7
 11030  061B  2E27               	goto	u4601
 11031  061C  3080               	movlw	128
 11032  061D  0273               	subwf	Button_Deviation_Update@deviation,w
 11033  061E  30FF               	movlw	255
 11034  061F  3B74               	subwfb	Button_Deviation_Update@deviation+1,w
 11035  0620  30FF               	movlw	255
 11036  0621  3B75               	subwfb	Button_Deviation_Update@deviation+2,w
 11037  0622  30FF               	movlw	255
 11038  0623  3B76               	subwfb	Button_Deviation_Update@deviation+3,w
 11039  0624  1803               	btfsc	3,0
 11040  0625  2E27               	goto	u4601
 11041  0626  2E28               	goto	u4600
 11042  0627                     u4601:	
 11043  0627  2E30               	goto	l4755
 11044  0628                     u4600:	
 11045  0628                     l4753:	
 11046                           
 11047                           ;mcc_generated_files/mtouch/mtouch_button.c: 425:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 426:         deviation = ((-1-0x7f));
 11048  0628  30FF               	movlw	255
 11049  0629  00F6               	movwf	Button_Deviation_Update@deviation+3
 11050  062A  30FF               	movlw	255
 11051  062B  00F5               	movwf	Button_Deviation_Update@deviation+2
 11052  062C  30FF               	movlw	255
 11053  062D  00F4               	movwf	Button_Deviation_Update@deviation+1
 11054  062E  3080               	movlw	128
 11055  062F  00F3               	movwf	Button_Deviation_Update@deviation
 11056  0630                     l4755:	
 11057                           
 11058                           ;mcc_generated_files/mtouch/mtouch_button.c: 429:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 11059  0630  0873               	movf	Button_Deviation_Update@deviation,w
 11060  0631  00A0               	movwf	??_Button_Deviation_Update
 11061  0632  0872               	movf	Button_Deviation_Update@button,w
 11062  0633  3E09               	addlw	9
 11063  0634  0086               	movwf	6
 11064  0635  0187               	clrf	7
 11065  0636  0820               	movf	??_Button_Deviation_Update,w
 11066  0637  0081               	movwf	1
 11067  0638                     l602:	
 11068  0638  0008               	return
 11069  0639                     __end_of_Button_Deviation_Update:	
 11070                           
 11071                           	psect	text70
 11072  0CE5                     __ptext70:	
 11073 ;; *************** function _MTOUCH_Button_isPressed *****************
 11074 ;; Defined at:
 11075 ;;		line 385 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  name            1    wreg     enum E3067
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;  name            1    4[COMMON] enum E3067
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      _Bool 
 11082 ;; Registers used:
 11083 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11089 ;;      Params:         0       0       0       0       0       0       0       0
 11090 ;;      Locals:         2       0       0       0       0       0       0       0
 11091 ;;      Temps:          1       0       0       0       0       0       0       0
 11092 ;;      Totals:         3       0       0       0       0       0       0       0
 11093 ;;Total ram usage:        3 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    4
 11096 ;; This function calls:
 11097 ;;		Nothing
 11098 ;; This function is called by:
 11099 ;;		_main
 11100 ;;		_touch_example
 11101 ;;		_MTOUCH_Button_Buttonmask_Get
 11102 ;; This function uses a non-reentrant model
 11103 ;;
 11104                           
 11105                           
 11106                           ;psect for function _MTOUCH_Button_isPressed
 11107  0CE5                     _MTOUCH_Button_isPressed:	
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11111                           ;MTOUCH_Button_isPressed@name stored from wreg
 11112  0CE5  00F4               	movwf	MTOUCH_Button_isPressed@name
 11113  0CE6                     l3849:	
 11114                           
 11115                           ;mcc_generated_files/mtouch/mtouch_button.c: 385: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 386: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 387:     if(name < 1u)
 11116  0CE6  0874               	movf	MTOUCH_Button_isPressed@name,w
 11117  0CE7  1D03               	btfss	3,2
 11118  0CE8  2CEA               	goto	u3141
 11119  0CE9  2CEB               	goto	u3140
 11120  0CEA                     u3141:	
 11121  0CEA  2D12               	goto	l3865
 11122  0CEB                     u3140:	
 11123  0CEB                     l3851:	
 11124                           
 11125                           ;mcc_generated_files/mtouch/mtouch_button.c: 388:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed || mtouch_button[name].state == MTOUCH_BUTTON
      +                          _STATE_releaseDebounce) ? 1 : 0);
 11126  0CEB  01F3               	clrf	_MTOUCH_Button_isPressed$1119
 11127  0CEC  0AF3               	incf	_MTOUCH_Button_isPressed$1119,f
 11128  0CED                     l3853:	
 11129  0CED  0874               	movf	MTOUCH_Button_isPressed@name,w
 11130  0CEE  00F2               	movwf	??_MTOUCH_Button_isPressed
 11131  0CEF  3003               	movlw	3
 11132  0CF0                     u3155:	
 11133  0CF0  35F2               	lslf	??_MTOUCH_Button_isPressed,f
 11134  0CF1  3EFF               	addlw	-1
 11135  0CF2  1D03               	skipz
 11136  0CF3  2CF0               	goto	u3155
 11137  0CF4  3572               	lslf	??_MTOUCH_Button_isPressed,w
 11138  0CF5  3EBA               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
 11139  0CF6  0086               	movwf	6
 11140  0CF7  0187               	clrf	7
 11141  0CF8  3003               	movlw	3
 11142  0CF9  0601               	xorwf	1,w
 11143  0CFA  1903               	btfsc	3,2
 11144  0CFB  2CFD               	goto	u3161
 11145  0CFC  2CFE               	goto	u3160
 11146  0CFD                     u3161:	
 11147  0CFD  2D10               	goto	l3859
 11148  0CFE                     u3160:	
 11149  0CFE                     l3855:	
 11150  0CFE  0874               	movf	MTOUCH_Button_isPressed@name,w
 11151  0CFF  00F2               	movwf	??_MTOUCH_Button_isPressed
 11152  0D00  3003               	movlw	3
 11153  0D01                     u3175:	
 11154  0D01  35F2               	lslf	??_MTOUCH_Button_isPressed,f
 11155  0D02  3EFF               	addlw	-1
 11156  0D03  1D03               	skipz
 11157  0D04  2D01               	goto	u3175
 11158  0D05  3572               	lslf	??_MTOUCH_Button_isPressed,w
 11159  0D06  3EBA               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
 11160  0D07  0086               	movwf	6
 11161  0D08  0187               	clrf	7
 11162  0D09  3004               	movlw	4
 11163  0D0A  0601               	xorwf	1,w
 11164  0D0B  1903               	btfsc	3,2
 11165  0D0C  2D0E               	goto	u3181
 11166  0D0D  2D0F               	goto	u3180
 11167  0D0E                     u3181:	
 11168  0D0E  2D10               	goto	l3859
 11169  0D0F                     u3180:	
 11170  0D0F                     l3857:	
 11171  0D0F  01F3               	clrf	_MTOUCH_Button_isPressed$1119
 11172  0D10                     l3859:	
 11173  0D10  0873               	movf	_MTOUCH_Button_isPressed$1119,w
 11174  0D11  2D13               	goto	l586
 11175  0D12                     l3865:	
 11176                           
 11177                           ;mcc_generated_files/mtouch/mtouch_button.c: 390:         return 0;
 11178  0D12  3000               	movlw	0
 11179  0D13                     l586:	
 11180  0D13  0008               	return
 11181  0D14                     __end_of_MTOUCH_Button_isPressed:	
 11182                           
 11183                           	psect	text71
 11184  09BB                     __ptext71:	
 11185 ;; *************** function _EUSART_is_tx_ready *****************
 11186 ;; Defined at:
 11187 ;;		line 132 in file "mcc_generated_files/eusart.c"
 11188 ;; Parameters:    Size  Location     Type
 11189 ;;		None
 11190 ;; Auto vars:     Size  Location     Type
 11191 ;;		None
 11192 ;; Return value:  Size  Location     Type
 11193 ;;                  1    wreg      _Bool 
 11194 ;; Registers used:
 11195 ;;		wreg, status,2, status,0
 11196 ;; Tracked objects:
 11197 ;;		On entry : 0/0
 11198 ;;		On exit  : 0/0
 11199 ;;		Unchanged: 0/0
 11200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11201 ;;      Params:         0       0       0       0       0       0       0       0
 11202 ;;      Locals:         0       0       0       0       0       0       0       0
 11203 ;;      Temps:          0       0       0       0       0       0       0       0
 11204 ;;      Totals:         0       0       0       0       0       0       0       0
 11205 ;;Total ram usage:        0 bytes
 11206 ;; Hardware stack levels used:    1
 11207 ;; Hardware stack levels required when called:    4
 11208 ;; This function calls:
 11209 ;;		Nothing
 11210 ;; This function is called by:
 11211 ;;		_main
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           
 11216                           ;psect for function _EUSART_is_tx_ready
 11217  09BB                     _EUSART_is_tx_ready:	
 11218  09BB                     l3885:	
 11219                           ;incstack = 0
 11220                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
 11221                           
 11222                           
 11223                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
 11224  09BB  0020               	movlb	0	; select bank0
 11225  09BC  086F               	movf	_eusartTxBufferRemaining,w	;volatile
 11226  09BD  1D03               	btfss	3,2
 11227  09BE  29C0               	goto	u3211
 11228  09BF  29C2               	goto	u3210
 11229  09C0                     u3211:	
 11230  09C0  3001               	movlw	1
 11231  09C1  29C3               	goto	u3220
 11232  09C2                     u3210:	
 11233  09C2  3000               	movlw	0
 11234  09C3                     u3220:	
 11235  09C3                     l722:	
 11236  09C3  0008               	return
 11237  09C4                     __end_of_EUSART_is_tx_ready:	
 11238                           
 11239                           	psect	text72
 11240  0943                     __ptext72:	
 11241 ;; *************** function _EUSART_is_tx_done *****************
 11242 ;; Defined at:
 11243 ;;		line 142 in file "mcc_generated_files/eusart.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;		None
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;		None
 11248 ;; Return value:  Size  Location     Type
 11249 ;;                  1    wreg      _Bool 
 11250 ;; Registers used:
 11251 ;;		wreg, status,2, status,0
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11257 ;;      Params:         0       0       0       0       0       0       0       0
 11258 ;;      Locals:         0       0       0       0       0       0       0       0
 11259 ;;      Temps:          0       0       0       0       0       0       0       0
 11260 ;;      Totals:         0       0       0       0       0       0       0       0
 11261 ;;Total ram usage:        0 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    4
 11264 ;; This function calls:
 11265 ;;		Nothing
 11266 ;; This function is called by:
 11267 ;;		_main
 11268 ;; This function uses a non-reentrant model
 11269 ;;
 11270                           
 11271                           
 11272                           ;psect for function _EUSART_is_tx_done
 11273  0943                     _EUSART_is_tx_done:	
 11274  0943                     l3889:	
 11275                           ;incstack = 0
 11276                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
 11277                           
 11278                           
 11279                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
 11280  0943  0023               	movlb	3	; select bank3
 11281  0944  0C1E               	rrf	30,w	;volatile
 11282  0945  3901               	andlw	1
 11283  0946                     l728:	
 11284  0946  0008               	return
 11285  0947                     __end_of_EUSART_is_tx_done:	
 11286                           
 11287                           	psect	text73
 11288  0C8F                     __ptext73:	
 11289 ;; *************** function _EUSART_Write *****************
 11290 ;; Defined at:
 11291 ;;		line 173 in file "mcc_generated_files/eusart.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;  txData          1    wreg     unsigned char 
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;  txData          1    3[COMMON] unsigned char 
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11305 ;;      Params:         0       0       0       0       0       0       0       0
 11306 ;;      Locals:         1       0       0       0       0       0       0       0
 11307 ;;      Temps:          1       0       0       0       0       0       0       0
 11308 ;;      Totals:         2       0       0       0       0       0       0       0
 11309 ;;Total ram usage:        2 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    4
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		_main
 11316 ;;		_putch
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           
 11321                           ;psect for function _EUSART_Write
 11322  0C8F                     _EUSART_Write:	
 11323                           
 11324                           ;incstack = 0
 11325                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 11326                           ;EUSART_Write@txData stored from wreg
 11327  0C8F  00F3               	movwf	EUSART_Write@txData
 11328  0C90                     l3915:	
 11329  0C90                     l3917:	
 11330                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
 11331                           
 11332                           
 11333                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
 11334  0C90  0020               	movlb	0	; select bank0
 11335  0C91  086F               	movf	_eusartTxBufferRemaining,w	;volatile
 11336  0C92  1903               	btfsc	3,2
 11337  0C93  2C95               	goto	u3251
 11338  0C94  2C96               	goto	u3250
 11339  0C95                     u3251:	
 11340  0C95  2C90               	goto	l3917
 11341  0C96                     u3250:	
 11342  0C96                     l743:	
 11343                           
 11344                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
 11345  0C96  0021               	movlb	1	; select bank1
 11346  0C97  1A11               	btfsc	17,4	;volatile
 11347  0C98  2C9A               	goto	u3261
 11348  0C99  2C9B               	goto	u3260
 11349  0C9A                     u3261:	
 11350  0C9A  2C9F               	goto	l744
 11351  0C9B                     u3260:	
 11352  0C9B                     l3919:	
 11353                           
 11354                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
 11355  0C9B  0873               	movf	EUSART_Write@txData,w
 11356  0C9C  0023               	movlb	3	; select bank3
 11357  0C9D  009A               	movwf	26	;volatile
 11358                           
 11359                           ;mcc_generated_files/eusart.c: 182:     }
 11360  0C9E  2CB6               	goto	l3931
 11361  0C9F                     l744:	
 11362                           ;mcc_generated_files/eusart.c: 183:     else
 11363                           
 11364                           
 11365                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
 11366  0C9F  1211               	bcf	17,4	;volatile
 11367  0CA0                     l3921:	
 11368                           
 11369                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
 11370  0CA0  0873               	movf	EUSART_Write@txData,w
 11371  0CA1  00F2               	movwf	??_EUSART_Write
 11372  0CA2  0020               	movlb	0	; select bank0
 11373  0CA3  0856               	movf	_eusartTxHead,w
 11374  0CA4  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 11375  0CA5  0086               	movwf	6
 11376  0CA6  0187               	clrf	7
 11377  0CA7  0872               	movf	??_EUSART_Write,w
 11378  0CA8  0081               	movwf	1
 11379  0CA9                     l3923:	
 11380  0CA9  3001               	movlw	1
 11381  0CAA  00F2               	movwf	??_EUSART_Write
 11382  0CAB  0872               	movf	??_EUSART_Write,w
 11383  0CAC  07D6               	addwf	_eusartTxHead,f	;volatile
 11384  0CAD                     l3925:	
 11385                           
 11386                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 11387  0CAD  3008               	movlw	8
 11388  0CAE  0256               	subwf	_eusartTxHead,w	;volatile
 11389  0CAF  1C03               	skipc
 11390  0CB0  2CB2               	goto	u3271
 11391  0CB1  2CB3               	goto	u3270
 11392  0CB2                     u3271:	
 11393  0CB2  2CB4               	goto	l3929
 11394  0CB3                     u3270:	
 11395  0CB3                     l3927:	
 11396                           
 11397                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
 11398  0CB3  01D6               	clrf	_eusartTxHead	;volatile
 11399  0CB4                     l3929:	
 11400                           
 11401                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
 11402  0CB4  3001               	movlw	1
 11403  0CB5  02EF               	subwf	_eusartTxBufferRemaining,f	;volatile
 11404  0CB6                     l3931:	
 11405                           
 11406                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
 11407  0CB6  0021               	movlb	1	; select bank1
 11408  0CB7  1611               	bsf	17,4	;volatile
 11409  0CB8                     l747:	
 11410  0CB8  0008               	return
 11411  0CB9                     __end_of_EUSART_Write:	
 11412                           
 11413                           	psect	intentry
 11414  0004                     __pintentry:	
 11415 ;; *************** function _INTERRUPT_InterruptManager *****************
 11416 ;; Defined at:
 11417 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;		None
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;		None
 11422 ;; Return value:  Size  Location     Type
 11423 ;;                  1    wreg      void 
 11424 ;; Registers used:
 11425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11426 ;; Tracked objects:
 11427 ;;		On entry : 0/0
 11428 ;;		On exit  : 0/0
 11429 ;;		Unchanged: 0/0
 11430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11431 ;;      Params:         0       0       0       0       0       0       0       0
 11432 ;;      Locals:         0       0       0       0       0       0       0       0
 11433 ;;      Temps:          0       0       0       0       0       0       0       0
 11434 ;;      Totals:         0       0       0       0       0       0       0       0
 11435 ;;Total ram usage:        0 bytes
 11436 ;; Hardware stack levels used:    1
 11437 ;; Hardware stack levels required when called:    3
 11438 ;; This function calls:
 11439 ;;		Absolute function
 11440 ;;		_EUSART_Receive_ISR
 11441 ;;		_EUSART_Transmit_ISR
 11442 ;;		_TMR1_ISR
 11443 ;; This function is called by:
 11444 ;;		Interrupt level 1
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448  0004                     _INTERRUPT_InterruptManager:	
 11449                           
 11450                           ;incstack = 0
 11451  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 11452                           
 11453                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11454  0005  3180               	pagesel	$
 11455  0006                     i1l4099:	
 11456                           
 11457                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 11458  0006  1F0B               	btfss	11,6	;volatile
 11459  0007  2809               	goto	u360_21
 11460  0008  280A               	goto	u360_20
 11461  0009                     u360_21:	
 11462  0009  2839               	goto	i1l819
 11463  000A                     u360_20:	
 11464  000A                     i1l4101:	
 11465                           
 11466                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 11467  000A  0021               	movlb	1	; select bank1
 11468  000B  1E11               	btfss	17,4	;volatile
 11469  000C  280E               	goto	u361_21
 11470  000D  280F               	goto	u361_20
 11471  000E                     u361_21:	
 11472  000E  281A               	goto	i1l812
 11473  000F                     u361_20:	
 11474  000F                     i1l4103:	
 11475  000F  0020               	movlb	0	; select bank0
 11476  0010  1E11               	btfss	17,4	;volatile
 11477  0011  2813               	goto	u362_21
 11478  0012  2814               	goto	u362_20
 11479  0013                     u362_21:	
 11480  0013  281A               	goto	i1l812
 11481  0014                     u362_20:	
 11482  0014                     i1l4105:	
 11483                           
 11484                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 11485  0014  086E               	movf	_EUSART_TxDefaultInterruptHandler+1,w
 11486  0015  008A               	movwf	10
 11487  0016  086D               	movf	_EUSART_TxDefaultInterruptHandler,w
 11488  0017  000A               	callw
 11489  0018  3180               	pagesel	$
 11490                           
 11491                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 11492  0019  2839               	goto	i1l819
 11493  001A                     i1l812:	
 11494                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 11495                           
 11496  001A  0021               	movlb	1	; select bank1
 11497  001B  1E91               	btfss	17,5	;volatile
 11498  001C  281E               	goto	u363_21
 11499  001D  281F               	goto	u363_20
 11500  001E                     u363_21:	
 11501  001E  282B               	goto	i1l814
 11502  001F                     u363_20:	
 11503  001F                     i1l4107:	
 11504  001F  0020               	movlb	0	; select bank0
 11505  0020  1E91               	btfss	17,5	;volatile
 11506  0021  2823               	goto	u364_21
 11507  0022  2824               	goto	u364_20
 11508  0023                     u364_21:	
 11509  0023  282B               	goto	i1l814
 11510  0024                     u364_20:	
 11511  0024                     i1l4109:	
 11512                           
 11513                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 11514  0024  0021               	movlb	1	; select bank1
 11515  0025  0859               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 11516  0026  008A               	movwf	10
 11517  0027  0858               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 11518  0028  000A               	callw
 11519  0029  3180               	pagesel	$
 11520                           
 11521                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 11522  002A  2839               	goto	i1l819
 11523  002B                     i1l814:	
 11524                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 11525                           
 11526  002B  0021               	movlb	1	; select bank1
 11527  002C  1C11               	btfss	17,0	;volatile
 11528  002D  282F               	goto	u365_21
 11529  002E  2830               	goto	u365_20
 11530  002F                     u365_21:	
 11531  002F  2839               	goto	i1l813
 11532  0030                     u365_20:	
 11533  0030                     i1l4111:	
 11534  0030  0020               	movlb	0	; select bank0
 11535  0031  1C11               	btfss	17,0	;volatile
 11536  0032  2834               	goto	u366_21
 11537  0033  2835               	goto	u366_20
 11538  0034                     u366_21:	
 11539  0034  2839               	goto	i1l813
 11540  0035                     u366_20:	
 11541  0035                     i1l4113:	
 11542                           
 11543                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR1_ISR();
 11544  0035  318A  22CE  3180   	fcall	_TMR1_ISR
 11545                           
 11546                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 11547  0038  2839               	goto	i1l819
 11548  0039                     i1l813:	
 11549  0039                     i1l819:	
 11550                           ;mcc_generated_files/interrupt_manager.c: 73:     }
 11551                           
 11552  0039  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 11553  003A  0009               	retfie
 11554  003B                     __end_of_INTERRUPT_InterruptManager:	
 11555                           
 11556                           	psect	text75
 11557  0ACE                     __ptext75:	
 11558 ;; *************** function _TMR1_ISR *****************
 11559 ;; Defined at:
 11560 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;		None
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg, status,2, status,0, pclath, cstack
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11574 ;;      Params:         0       0       0       0       0       0       0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0
 11576 ;;      Temps:          0       0       0       0       0       0       0       0
 11577 ;;      Totals:         0       0       0       0       0       0       0       0
 11578 ;;Total ram usage:        0 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    2
 11581 ;; This function calls:
 11582 ;;		Absolute function
 11583 ;;		_MTOUCH_ScanScheduler
 11584 ;;		_TMR1_DefaultInterruptHandler
 11585 ;;		_TMR1_WriteTimer
 11586 ;; This function is called by:
 11587 ;;		_INTERRUPT_InterruptManager
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           
 11592                           ;psect for function _TMR1_ISR
 11593  0ACE                     _TMR1_ISR:	
 11594  0ACE                     i1l3965:	
 11595                           ;incstack = 0
 11596                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 11597                           
 11598                           
 11599                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 11600  0ACE  0020               	movlb	0	; select bank0
 11601  0ACF  1011               	bcf	17,0	;volatile
 11602  0AD0                     i1l3967:	
 11603                           
 11604                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 11605  0AD0  086C               	movf	_timer1ReloadVal+1,w	;volatile
 11606  0AD1  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 11607  0AD2  086B               	movf	_timer1ReloadVal,w	;volatile
 11608  0AD3  00F0               	movwf	TMR1_WriteTimer@timerVal
 11609  0AD4  318A  2239  318A   	fcall	_TMR1_WriteTimer
 11610  0AD7                     i1l3969:	
 11611                           
 11612                           ;mcc_generated_files/tmr1.c: 164:     if(TMR1_InterruptHandler)
 11613  0AD7  0020               	movlb	0	; select bank0
 11614  0AD8  0869               	movf	_TMR1_InterruptHandler,w
 11615  0AD9  046A               	iorwf	_TMR1_InterruptHandler+1,w
 11616  0ADA  1903               	btfsc	3,2
 11617  0ADB  2ADD               	goto	u333_21
 11618  0ADC  2ADE               	goto	u333_20
 11619  0ADD                     u333_21:	
 11620  0ADD  2AE3               	goto	i1l966
 11621  0ADE                     u333_20:	
 11622  0ADE                     i1l3971:	
 11623                           
 11624                           ;mcc_generated_files/tmr1.c: 165:     {;mcc_generated_files/tmr1.c: 166:         TMR1_In
      +                          terruptHandler();
 11625  0ADE  086A               	movf	_TMR1_InterruptHandler+1,w
 11626  0ADF  008A               	movwf	10
 11627  0AE0  0869               	movf	_TMR1_InterruptHandler,w
 11628  0AE1  000A               	callw
 11629  0AE2  318A               	pagesel	$
 11630  0AE3                     i1l966:	
 11631  0AE3  0008               	return
 11632  0AE4                     __end_of_TMR1_ISR:	
 11633                           
 11634                           	psect	text76
 11635  09D7                     __ptext76:	
 11636 ;; *************** function _MTOUCH_ScanScheduler *****************
 11637 ;; Defined at:
 11638 ;;		line 71 in file "mcc_generated_files/mtouch/mtouch.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;		None
 11641 ;; Auto vars:     Size  Location     Type
 11642 ;;		None
 11643 ;; Return value:  Size  Location     Type
 11644 ;;                  1    wreg      void 
 11645 ;; Registers used:
 11646 ;;		wreg, status,2, status,0, pclath, cstack
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11652 ;;      Params:         0       0       0       0       0       0       0       0
 11653 ;;      Locals:         0       0       0       0       0       0       0       0
 11654 ;;      Temps:          0       0       0       0       0       0       0       0
 11655 ;;      Totals:         0       0       0       0       0       0       0       0
 11656 ;;Total ram usage:        0 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:    1
 11659 ;; This function calls:
 11660 ;;		_TMR1_WriteTimer
 11661 ;; This function is called by:
 11662 ;;		_MTOUCH_Initialize
 11663 ;;		_TMR1_ISR
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           
 11668                           ;psect for function _MTOUCH_ScanScheduler
 11669  09D7                     _MTOUCH_ScanScheduler:	
 11670  09D7                     i1l3703:	
 11671                           ;incstack = 0
 11672                           ; Regs used in _MTOUCH_ScanScheduler: [wreg+status,2+status,0+pclath+cstack]
 11673                           
 11674                           
 11675                           ;mcc_generated_files/mtouch/mtouch.c: 75:     TMR1_WriteTimer(mTouchScanReload);
 11676  09D7  0020               	movlb	0	; select bank0
 11677  09D8  085B               	movf	_mTouchScanReload+1,w
 11678  09D9  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 11679  09DA  085A               	movf	_mTouchScanReload,w
 11680  09DB  00F0               	movwf	TMR1_WriteTimer@timerVal
 11681  09DC  318A  2239  3189   	fcall	_TMR1_WriteTimer
 11682  09DF                     i1l3705:	
 11683                           
 11684                           ;mcc_generated_files/mtouch/mtouch.c: 78:     mtouch_time_toScan = 1;
 11685  09DF  0020               	movlb	0	; select bank0
 11686  09E0  01D7               	clrf	_mtouch_time_toScan
 11687  09E1  0AD7               	incf	_mtouch_time_toScan,f
 11688  09E2                     i1l426:	
 11689  09E2  0008               	return
 11690  09E3                     __end_of_MTOUCH_ScanScheduler:	
 11691                           
 11692                           	psect	text77
 11693  0933                     __ptext77:	
 11694 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 11695 ;; Defined at:
 11696 ;;		line 175 in file "mcc_generated_files/tmr1.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;		None
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;		None
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      void 
 11703 ;; Registers used:
 11704 ;;		None
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11710 ;;      Params:         0       0       0       0       0       0       0       0
 11711 ;;      Locals:         0       0       0       0       0       0       0       0
 11712 ;;      Temps:          0       0       0       0       0       0       0       0
 11713 ;;      Totals:         0       0       0       0       0       0       0       0
 11714 ;;Total ram usage:        0 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; This function calls:
 11717 ;;		Nothing
 11718 ;; This function is called by:
 11719 ;;		_TMR1_Initialize
 11720 ;;		_TMR1_ISR
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           
 11725                           ;psect for function _TMR1_DefaultInterruptHandler
 11726  0933                     _TMR1_DefaultInterruptHandler:	
 11727  0933                     i1l972:	
 11728                           ;incstack = 0
 11729                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 11730                           
 11731  0933  0008               	return
 11732  0934                     __end_of_TMR1_DefaultInterruptHandler:	
 11733                           
 11734                           	psect	text78
 11735  0A39                     __ptext78:	
 11736 ;; *************** function _TMR1_WriteTimer *****************
 11737 ;; Defined at:
 11738 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  timerVal        2    0[COMMON] unsigned short 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;		None
 11743 ;; Return value:  Size  Location     Type
 11744 ;;                  1    wreg      void 
 11745 ;; Registers used:
 11746 ;;		wreg, status,2
 11747 ;; Tracked objects:
 11748 ;;		On entry : 0/0
 11749 ;;		On exit  : 0/0
 11750 ;;		Unchanged: 0/0
 11751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11752 ;;      Params:         2       0       0       0       0       0       0       0
 11753 ;;      Locals:         0       0       0       0       0       0       0       0
 11754 ;;      Temps:          0       0       0       0       0       0       0       0
 11755 ;;      Totals:         2       0       0       0       0       0       0       0
 11756 ;;Total ram usage:        2 bytes
 11757 ;; Hardware stack levels used:    1
 11758 ;; This function calls:
 11759 ;;		Nothing
 11760 ;; This function is called by:
 11761 ;;		_MTOUCH_ScanScheduler
 11762 ;;		_TMR1_ISR
 11763 ;;		_TMR1_Reload
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           
 11768                           ;psect for function _TMR1_WriteTimer
 11769  0A39                     _TMR1_WriteTimer:	
 11770  0A39                     i1l3619:	
 11771                           ;incstack = 0
 11772                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 11773                           
 11774                           
 11775                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 11776  0A39  0020               	movlb	0	; select bank0
 11777  0A3A  1D18               	btfss	24,2	;volatile
 11778  0A3B  2A3D               	goto	u302_21
 11779  0A3C  2A3E               	goto	u302_20
 11780  0A3D                     u302_21:	
 11781  0A3D  2A45               	goto	i1l3629
 11782  0A3E                     u302_20:	
 11783  0A3E                     i1l3621:	
 11784                           
 11785                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 11786  0A3E  1018               	bcf	24,0	;volatile
 11787  0A3F                     i1l3623:	
 11788                           
 11789                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 11790  0A3F  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 11791  0A40  0097               	movwf	23	;volatile
 11792  0A41                     i1l3625:	
 11793                           
 11794                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 11795  0A41  0870               	movf	TMR1_WriteTimer@timerVal,w
 11796  0A42  0096               	movwf	22	;volatile
 11797  0A43                     i1l3627:	
 11798                           
 11799                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 11800  0A43  1418               	bsf	24,0	;volatile
 11801                           
 11802                           ;mcc_generated_files/tmr1.c: 133:     }
 11803  0A44  2A49               	goto	i1l953
 11804  0A45                     i1l3629:	
 11805                           
 11806                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 11807  0A45  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 11808  0A46  0097               	movwf	23	;volatile
 11809  0A47                     i1l3631:	
 11810                           
 11811                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 11812  0A47  0870               	movf	TMR1_WriteTimer@timerVal,w
 11813  0A48  0096               	movwf	22	;volatile
 11814  0A49                     i1l953:	
 11815  0A49  0008               	return
 11816  0A4A                     __end_of_TMR1_WriteTimer:	
 11817                           
 11818                           	psect	text79
 11819  0BFB                     __ptext79:	
 11820 ;; *************** function _EUSART_Transmit_ISR *****************
 11821 ;; Defined at:
 11822 ;;		line 206 in file "mcc_generated_files/eusart.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;		None
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;		None
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  1    wreg      void 
 11829 ;; Registers used:
 11830 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11836 ;;      Params:         0       0       0       0       0       0       0       0
 11837 ;;      Locals:         0       0       0       0       0       0       0       0
 11838 ;;      Temps:          1       0       0       0       0       0       0       0
 11839 ;;      Totals:         1       0       0       0       0       0       0       0
 11840 ;;Total ram usage:        1 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_EUSART_Initialize
 11846 ;;		_INTERRUPT_InterruptManager
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           
 11851                           ;psect for function _EUSART_Transmit_ISR
 11852  0BFB                     _EUSART_Transmit_ISR:	
 11853  0BFB                     i1l3933:	
 11854                           ;incstack = 0
 11855                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11856                           
 11857                           
 11858                           ;mcc_generated_files/eusart.c: 210:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 11859  0BFB  3008               	movlw	8
 11860  0BFC  0020               	movlb	0	; select bank0
 11861  0BFD  026F               	subwf	_eusartTxBufferRemaining,w	;volatile
 11862  0BFE  1803               	skipnc
 11863  0BFF  2C01               	goto	u328_21
 11864  0C00  2C02               	goto	u328_20
 11865  0C01                     u328_21:	
 11866  0C01  2C1A               	goto	i1l756
 11867  0C02                     u328_20:	
 11868  0C02                     i1l3935:	
 11869                           
 11870                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 11871  0C02  0855               	movf	_eusartTxTail,w
 11872  0C03  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 11873  0C04  0086               	movwf	6
 11874  0C05  0187               	clrf	7
 11875  0C06  0801               	movf	1,w
 11876  0C07  0023               	movlb	3	; select bank3
 11877  0C08  009A               	movwf	26	;volatile
 11878  0C09                     i1l3937:	
 11879  0C09  3001               	movlw	1
 11880  0C0A  00F0               	movwf	??_EUSART_Transmit_ISR
 11881  0C0B  0870               	movf	??_EUSART_Transmit_ISR,w
 11882  0C0C  0020               	movlb	0	; select bank0
 11883  0C0D  07D5               	addwf	_eusartTxTail,f	;volatile
 11884  0C0E                     i1l3939:	
 11885                           
 11886                           ;mcc_generated_files/eusart.c: 213:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 11887  0C0E  3008               	movlw	8
 11888  0C0F  0255               	subwf	_eusartTxTail,w	;volatile
 11889  0C10  1C03               	skipc
 11890  0C11  2C13               	goto	u329_21
 11891  0C12  2C14               	goto	u329_20
 11892  0C13                     u329_21:	
 11893  0C13  2C15               	goto	i1l3943
 11894  0C14                     u329_20:	
 11895  0C14                     i1l3941:	
 11896                           
 11897                           ;mcc_generated_files/eusart.c: 214:         {;mcc_generated_files/eusart.c: 215:        
      +                               eusartTxTail = 0;
 11898  0C14  01D5               	clrf	_eusartTxTail	;volatile
 11899  0C15                     i1l3943:	
 11900                           
 11901                           ;mcc_generated_files/eusart.c: 217:         eusartTxBufferRemaining++;
 11902  0C15  3001               	movlw	1
 11903  0C16  00F0               	movwf	??_EUSART_Transmit_ISR
 11904  0C17  0870               	movf	??_EUSART_Transmit_ISR,w
 11905  0C18  07EF               	addwf	_eusartTxBufferRemaining,f	;volatile
 11906                           
 11907                           ;mcc_generated_files/eusart.c: 218:     }
 11908  0C19  2C1C               	goto	i1l759
 11909  0C1A                     i1l756:	
 11910                           ;mcc_generated_files/eusart.c: 219:     else
 11911                           
 11912                           
 11913                           ;mcc_generated_files/eusart.c: 220:     {;mcc_generated_files/eusart.c: 221:         PIE
      +                          1bits.TXIE = 0;
 11914  0C1A  0021               	movlb	1	; select bank1
 11915  0C1B  1211               	bcf	17,4	;volatile
 11916  0C1C                     i1l759:	
 11917  0C1C  0008               	return
 11918  0C1D                     __end_of_EUSART_Transmit_ISR:	
 11919                           
 11920                           	psect	text80
 11921  0DA9                     __ptext80:	
 11922 ;; *************** function _EUSART_Receive_ISR *****************
 11923 ;; Defined at:
 11924 ;;		line 225 in file "mcc_generated_files/eusart.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;		None
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;		None
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      void 
 11931 ;; Registers used:
 11932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11938 ;;      Params:         0       0       0       0       0       0       0       0
 11939 ;;      Locals:         0       0       0       0       0       0       0       0
 11940 ;;      Temps:          0       0       0       0       0       0       0       0
 11941 ;;      Totals:         0       0       0       0       0       0       0       0
 11942 ;;Total ram usage:        0 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    2
 11945 ;; This function calls:
 11946 ;;		Absolute function
 11947 ;;		_EUSART_DefaultErrorHandler
 11948 ;;		_EUSART_DefaultFramingErrorHandler
 11949 ;;		_EUSART_DefaultOverrunErrorHandler
 11950 ;;		_EUSART_RxDataHandler
 11951 ;; This function is called by:
 11952 ;;		_EUSART_Initialize
 11953 ;;		_INTERRUPT_InterruptManager
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           
 11958                           ;psect for function _EUSART_Receive_ISR
 11959  0DA9                     _EUSART_Receive_ISR:	
 11960  0DA9                     i1l3945:	
 11961                           ;incstack = 0
 11962                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11963                           
 11964                           
 11965                           ;mcc_generated_files/eusart.c: 228:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 11966  0DA9  087B               	movf	_eusartRxHead,w	;volatile
 11967  0DAA  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11968  0DAB  0086               	movwf	6
 11969  0DAC  0187               	clrf	7
 11970  0DAD  0181               	clrf	1
 11971  0DAE                     i1l3947:	
 11972                           
 11973                           ;mcc_generated_files/eusart.c: 230:     if(RCSTAbits.FERR){
 11974  0DAE  0023               	movlb	3	; select bank3
 11975  0DAF  1D1D               	btfss	29,2	;volatile
 11976  0DB0  2DB2               	goto	u330_21
 11977  0DB1  2DB3               	goto	u330_20
 11978  0DB2                     u330_21:	
 11979  0DB2  2DBE               	goto	i1l3953
 11980  0DB3                     u330_20:	
 11981  0DB3                     i1l3949:	
 11982                           
 11983                           ;mcc_generated_files/eusart.c: 231:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 11984  0DB3  087B               	movf	_eusartRxHead,w	;volatile
 11985  0DB4  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11986  0DB5  0086               	movwf	6
 11987  0DB6  0187               	clrf	7
 11988  0DB7  1481               	bsf	1,1
 11989  0DB8                     i1l3951:	
 11990                           
 11991                           ;mcc_generated_files/eusart.c: 232:         EUSART_FramingErrorHandler();
 11992  0DB8  0021               	movlb	1	; select bank1
 11993  0DB9  0857               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 11994  0DBA  008A               	movwf	10
 11995  0DBB  0856               	movf	_EUSART_FramingErrorHandler^(0+128),w
 11996  0DBC  000A               	callw
 11997  0DBD  318D               	pagesel	$
 11998  0DBE                     i1l3953:	
 11999                           
 12000                           ;mcc_generated_files/eusart.c: 235:     if(RCSTAbits.OERR){
 12001  0DBE  0023               	movlb	3	; select bank3
 12002  0DBF  1C9D               	btfss	29,1	;volatile
 12003  0DC0  2DC2               	goto	u331_21
 12004  0DC1  2DC3               	goto	u331_20
 12005  0DC2                     u331_21:	
 12006  0DC2  2DCE               	goto	i1l3959
 12007  0DC3                     u331_20:	
 12008  0DC3                     i1l3955:	
 12009                           
 12010                           ;mcc_generated_files/eusart.c: 236:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 12011  0DC3  087B               	movf	_eusartRxHead,w	;volatile
 12012  0DC4  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 12013  0DC5  0086               	movwf	6
 12014  0DC6  0187               	clrf	7
 12015  0DC7  1501               	bsf	1,2
 12016  0DC8                     i1l3957:	
 12017                           
 12018                           ;mcc_generated_files/eusart.c: 237:         EUSART_OverrunErrorHandler();
 12019  0DC8  0021               	movlb	1	; select bank1
 12020  0DC9  0855               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 12021  0DCA  008A               	movwf	10
 12022  0DCB  0854               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 12023  0DCC  000A               	callw
 12024  0DCD  318D               	pagesel	$
 12025  0DCE                     i1l3959:	
 12026                           
 12027                           ;mcc_generated_files/eusart.c: 240:     if(eusartRxStatusBuffer[eusartRxHead].status){
 12028  0DCE  087B               	movf	_eusartRxHead,w	;volatile
 12029  0DCF  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 12030  0DD0  0086               	movwf	6
 12031  0DD1  0187               	clrf	7
 12032  0DD2  0801               	movf	1,w
 12033  0DD3  1903               	btfsc	3,2
 12034  0DD4  2DD6               	goto	u332_21
 12035  0DD5  2DD7               	goto	u332_20
 12036  0DD6                     u332_21:	
 12037  0DD6  2DDE               	goto	i1l3963
 12038  0DD7                     u332_20:	
 12039  0DD7                     i1l3961:	
 12040                           
 12041                           ;mcc_generated_files/eusart.c: 241:         EUSART_ErrorHandler();
 12042  0DD7  0021               	movlb	1	; select bank1
 12043  0DD8  0853               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 12044  0DD9  008A               	movwf	10
 12045  0DDA  0852               	movf	_EUSART_ErrorHandler^(0+128),w
 12046  0DDB  000A               	callw
 12047  0DDC  318D               	pagesel	$
 12048                           
 12049                           ;mcc_generated_files/eusart.c: 242:     } else {
 12050  0DDD  2DE1               	goto	i1l766
 12051  0DDE                     i1l3963:	
 12052                           
 12053                           ;mcc_generated_files/eusart.c: 243:         EUSART_RxDataHandler();
 12054  0DDE  318B  2371  318D   	fcall	_EUSART_RxDataHandler
 12055  0DE1                     i1l766:	
 12056  0DE1  0008               	return
 12057  0DE2                     __end_of_EUSART_Receive_ISR:	
 12058                           
 12059                           	psect	text81
 12060  093F                     __ptext81:	
 12061 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 12062 ;; Defined at:
 12063 ;;		line 261 in file "mcc_generated_files/eusart.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;		None
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;		None
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  1    wreg      void 
 12070 ;; Registers used:
 12071 ;;		None
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12077 ;;      Params:         0       0       0       0       0       0       0       0
 12078 ;;      Locals:         0       0       0       0       0       0       0       0
 12079 ;;      Temps:          0       0       0       0       0       0       0       0
 12080 ;;      Totals:         0       0       0       0       0       0       0       0
 12081 ;;Total ram usage:        0 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; This function calls:
 12084 ;;		Nothing
 12085 ;; This function is called by:
 12086 ;;		_EUSART_Initialize
 12087 ;;		_EUSART_Receive_ISR
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           
 12092                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 12093  093F                     _EUSART_DefaultOverrunErrorHandler:	
 12094  093F                     i1l3769:	
 12095                           ;incstack = 0
 12096                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 12097                           
 12098                           
 12099                           ;mcc_generated_files/eusart.c: 264:     RCSTAbits.CREN = 0;
 12100  093F  0023               	movlb	3	; select bank3
 12101  0940  121D               	bcf	29,4	;volatile
 12102                           
 12103                           ;mcc_generated_files/eusart.c: 265:     RCSTAbits.CREN = 1;
 12104  0941  161D               	bsf	29,4	;volatile
 12105  0942                     i1l776:	
 12106  0942  0008               	return
 12107  0943                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 12108                           
 12109                           	psect	text82
 12110  0932                     __ptext82:	
 12111 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 12112 ;; Defined at:
 12113 ;;		line 259 in file "mcc_generated_files/eusart.c"
 12114 ;; Parameters:    Size  Location     Type
 12115 ;;		None
 12116 ;; Auto vars:     Size  Location     Type
 12117 ;;		None
 12118 ;; Return value:  Size  Location     Type
 12119 ;;                  1    wreg      void 
 12120 ;; Registers used:
 12121 ;;		None
 12122 ;; Tracked objects:
 12123 ;;		On entry : 0/0
 12124 ;;		On exit  : 0/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12127 ;;      Params:         0       0       0       0       0       0       0       0
 12128 ;;      Locals:         0       0       0       0       0       0       0       0
 12129 ;;      Temps:          0       0       0       0       0       0       0       0
 12130 ;;      Totals:         0       0       0       0       0       0       0       0
 12131 ;;Total ram usage:        0 bytes
 12132 ;; Hardware stack levels used:    1
 12133 ;; This function calls:
 12134 ;;		Nothing
 12135 ;; This function is called by:
 12136 ;;		_EUSART_Initialize
 12137 ;;		_EUSART_Receive_ISR
 12138 ;; This function uses a non-reentrant model
 12139 ;;
 12140                           
 12141                           
 12142                           ;psect for function _EUSART_DefaultFramingErrorHandler
 12143  0932                     _EUSART_DefaultFramingErrorHandler:	
 12144  0932                     i1l773:	
 12145                           ;incstack = 0
 12146                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 12147                           
 12148  0932  0008               	return
 12149  0933                     __end_of_EUSART_DefaultFramingErrorHandler:	
 12150                           
 12151                           	psect	text83
 12152  093B                     __ptext83:	
 12153 ;; *************** function _EUSART_DefaultErrorHandler *****************
 12154 ;; Defined at:
 12155 ;;		line 269 in file "mcc_generated_files/eusart.c"
 12156 ;; Parameters:    Size  Location     Type
 12157 ;;		None
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;		None
 12160 ;; Return value:  Size  Location     Type
 12161 ;;                  1    wreg      void 
 12162 ;; Registers used:
 12163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12164 ;; Tracked objects:
 12165 ;;		On entry : 0/0
 12166 ;;		On exit  : 0/0
 12167 ;;		Unchanged: 0/0
 12168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12169 ;;      Params:         0       0       0       0       0       0       0       0
 12170 ;;      Locals:         0       0       0       0       0       0       0       0
 12171 ;;      Temps:          0       0       0       0       0       0       0       0
 12172 ;;      Totals:         0       0       0       0       0       0       0       0
 12173 ;;Total ram usage:        0 bytes
 12174 ;; Hardware stack levels used:    1
 12175 ;; Hardware stack levels required when called:    1
 12176 ;; This function calls:
 12177 ;;		_EUSART_RxDataHandler
 12178 ;; This function is called by:
 12179 ;;		_EUSART_Initialize
 12180 ;;		_EUSART_Receive_ISR
 12181 ;; This function uses a non-reentrant model
 12182 ;;
 12183                           
 12184                           
 12185                           ;psect for function _EUSART_DefaultErrorHandler
 12186  093B                     _EUSART_DefaultErrorHandler:	
 12187  093B                     i1l3771:	
 12188                           ;incstack = 0
 12189                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12190                           
 12191                           
 12192                           ;mcc_generated_files/eusart.c: 270:     EUSART_RxDataHandler();
 12193  093B  318B  2371  3189   	fcall	_EUSART_RxDataHandler
 12194  093E                     i1l779:	
 12195  093E  0008               	return
 12196  093F                     __end_of_EUSART_DefaultErrorHandler:	
 12197                           
 12198                           	psect	text84
 12199  0B71                     __ptext84:	
 12200 ;; *************** function _EUSART_RxDataHandler *****************
 12201 ;; Defined at:
 12202 ;;		line 249 in file "mcc_generated_files/eusart.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;		None
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      void 
 12209 ;; Registers used:
 12210 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12216 ;;      Params:         0       0       0       0       0       0       0       0
 12217 ;;      Locals:         0       0       0       0       0       0       0       0
 12218 ;;      Temps:          1       0       0       0       0       0       0       0
 12219 ;;      Totals:         1       0       0       0       0       0       0       0
 12220 ;;Total ram usage:        1 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_EUSART_Receive_ISR
 12226 ;;		_EUSART_DefaultErrorHandler
 12227 ;; This function uses a non-reentrant model
 12228 ;;
 12229                           
 12230                           
 12231                           ;psect for function _EUSART_RxDataHandler
 12232  0B71                     _EUSART_RxDataHandler:	
 12233  0B71                     i1l3675:	
 12234                           ;incstack = 0
 12235                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12236                           
 12237                           
 12238                           ;mcc_generated_files/eusart.c: 251:     eusartRxBuffer[eusartRxHead++] = RCREG;
 12239  0B71  0023               	movlb	3	; select bank3
 12240  0B72  0819               	movf	25,w	;volatile
 12241  0B73  00F0               	movwf	??_EUSART_RxDataHandler
 12242  0B74  087B               	movf	_eusartRxHead,w
 12243  0B75  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 12244  0B76  0086               	movwf	6
 12245  0B77  0187               	clrf	7
 12246  0B78  0870               	movf	??_EUSART_RxDataHandler,w
 12247  0B79  0081               	movwf	1
 12248  0B7A                     i1l3677:	
 12249  0B7A  3001               	movlw	1
 12250  0B7B  00F0               	movwf	??_EUSART_RxDataHandler
 12251  0B7C  0870               	movf	??_EUSART_RxDataHandler,w
 12252  0B7D  07FB               	addwf	_eusartRxHead,f	;volatile
 12253  0B7E                     i1l3679:	
 12254                           
 12255                           ;mcc_generated_files/eusart.c: 252:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 12256  0B7E  3008               	movlw	8
 12257  0B7F  027B               	subwf	_eusartRxHead,w	;volatile
 12258  0B80  1C03               	skipc
 12259  0B81  2B83               	goto	u308_21
 12260  0B82  2B84               	goto	u308_20
 12261  0B83                     u308_21:	
 12262  0B83  2B85               	goto	i1l3683
 12263  0B84                     u308_20:	
 12264  0B84                     i1l3681:	
 12265                           
 12266                           ;mcc_generated_files/eusart.c: 253:     {;mcc_generated_files/eusart.c: 254:         eus
      +                          artRxHead = 0;
 12267  0B84  01FB               	clrf	_eusartRxHead	;volatile
 12268  0B85                     i1l3683:	
 12269                           
 12270                           ;mcc_generated_files/eusart.c: 256:     eusartRxCount++;
 12271  0B85  3001               	movlw	1
 12272  0B86  00F0               	movwf	??_EUSART_RxDataHandler
 12273  0B87  0870               	movf	??_EUSART_RxDataHandler,w
 12274  0B88  0020               	movlb	0	; select bank0
 12275  0B89  07D4               	addwf	_eusartRxCount,f	;volatile
 12276  0B8A                     i1l770:	
 12277  0B8A  0008               	return
 12278  0B8B                     __end_of_EUSART_RxDataHandler:	
 12279  007E                     btemp	set	126	;btemp
 12280  007E                     int$flags	set	126
 12281  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    23
    Data        25
    BSS         57
    Persistent  47
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     43      80
    BANK1            80      3      61
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2481$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service$2481	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_ReleaseDebounce(), Button_State_Pressed(), Button_State_PressDebounce(), Button_State_NotPressed(), 
		 -> Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), MTOUCH_ScanScheduler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), MTOUCH_ScanScheduler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_ReleaseDebounce@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_PressDebounce@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [5] size(2) Largest target is 1
		 -> Button_State_ReleaseDebounce(), Button_State_Pressed(), Button_State_PressDebounce(), Button_State_NotPressed(), 
		 -> Button_State_Initializing(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK0[9]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    S60$sensor_adc2	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S60$sensor_adc1	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    callback_sampled	PTR FTN(enum E2871,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _Button_Service->_MTOUCH_Button_Initialize
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _MTOUCH_ScanScheduler->_TMR1_WriteTimer
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Button_InitializeAll->_memcpy
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_loadADCSettings
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_Deviation_Update
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Reading_Update->_Button_Reading_Update_Helper

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_MTOUCH_Service_Mainloop
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   32331
                       _EUSART_Write
                  _EUSART_is_tx_done
                 _EUSART_is_tx_ready
        _MTOUCH_Button_InitializeAll
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4877
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    4213
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2402
                                              0 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2303
                                              8 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                              5 BANK0      2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              2 COMMON     5     1      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              4 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   25885
                                              2 BANK1      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     121
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   0     0      0     121
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     202
                                              3 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0     103
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   16809
                                              0 BANK1      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   16710
                                             36 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0     103
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              6 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     130
                                              2 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   15262
                                             32 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1607
                                              6 COMMON     1     1      0
                                              0 BANK0      4     4      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6610
                                             19 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    6067
                                              4 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              3 COMMON     4     3      1
                                              0 BANK0      4     4      0
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     170
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1875
                                              6 COMMON     4     4      0
                                              0 BANK0      2     2      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     633
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8730
                                             14 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8631
                                             10 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
         _Button_State_PressDebounce *
               _Button_State_Pressed *
       _Button_State_ReleaseDebounce *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_ReleaseDebounce                         3     2      1     273
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1129
                                              5 BANK0      3     2      1
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_PressDebounce                           3     2      1     176
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1637
                                              5 BANK0      3     2      1
             _Button_Baseline_Update
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              8 COMMON     2     2      0
                                              0 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              6 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              5 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              0 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              3 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              0 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              6 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     296
                                              2 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              3     3      0      90
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     632
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0     632
                   Absolute function *
               _MTOUCH_ScanScheduler *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_ScanScheduler                                0     0      0     316
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (11) _TMR1_WriteTimer                                     2     0      2     316
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Write
   _EUSART_is_tx_done
   _EUSART_is_tx_ready
   _MTOUCH_Button_InitializeAll
     _MTOUCH_Button_Initialize
       _MTOUCH_Sensor_Calibrate
         ___bmul
     _memcpy
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
               ___bmul
         _Button_State_PressDebounce *
         _Button_State_Pressed *
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
               ___bmul
         _Button_State_ReleaseDebounce *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
       _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR1_ISR *
     Absolute function(Fake) *
     _MTOUCH_ScanScheduler *
       _TMR1_WriteTimer
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      99       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      3      3D       8       76.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      99      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Jan 10 08:58:14 2020

                       ?_EUSART_SetRxInterruptHandler 0072                       Sensor_loadADCSettings@adc_index 0073  
                        ?_MTOUCH_Sensor_RawSample_Get 0076                                        ___bmul@product 0074  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 099D                             _Sensor_setCalibratAcqTime 09EF  
                                         __CFG_LVP$ON 0000                                                   l200 0E62  
                                                 l211 02A7                                                   l220 00C0  
                                                 l300 0C8E                                                   l213 034A  
                                                 l134 07FF                                                   l207 035E  
                                                 l303 0934                                                   l143 0B70  
                                                 l240 015D                                                   l224 0292  
                                                 l137 0A38                                                   l129 0AF9  
                                                 l242 0157                                                   l330 099C  
                                                 l314 0AA4                                                   l323 0A7E  
                                                 l171 0497                                                   l244 015B  
                                                 l500 0BDC                                                   l342 0A91  
                                                 l510 0FA1                                                   l334 0A19  
                                                 l350 09CC                                                   l182 072A  
                                                 l247 0162                                                   l327 0995  
                                                 l432 0AB8                                                   l521 0506  
                                                 l505 0A5A                                                   l177 0DA8  
                                                 l353 09EE                                                   l257 021F  
                                                 l249 0166                                                   l441 094A  
                                                 l602 0638                                                   l346 0B26  
                                                 l370 09AA                                                   l531 0EA9  
                                                 l275 03FC                                                   l259 023A  
                                                 l516 07EE                                                   l356 09FB  
                                                 l364 0BFA                                                   l444 0003  
                                                 l525 0528                                                   l373 09A3  
                                                 l437 0C3F                                                   l294 0B57  
                                                 l623 0EF8                                                   l631 05B1  
                                                 l543 0FFF                                                   l367 0A0A  
                                                 l359 09B2                                                   l551 0C66  
                                                 l288 06B9                                                   l537 0F4B  
                                                 l722 09C3                                                   l618 0A6C  
                                                 l626 0CE4                                                   l546 0958  
                                                 l743 0C96                                                   l495 0D75  
                                                 l719 0E20                                                   l744 0C9F  
                                                 l728 0946                                                   l586 0D13  
                                                 l842 0B0F                                                   l747 0CB8  
                                                 l908 0953                                                   l845 0982  
                                                 l782 0964                                                   l791 0976  
                                                 l848 094E                                                   l785 096A  
                                                 l794 0970                                                   l939 0B3E  
                                                 l788 095E                                                   l877 0BBF  
                                                 l893 09BA                                                   l896 0937  
                                                 l969 097C                                                   l899 093A  
                                                 _GIE 005F                                                   _PR2 001B  
                                     _timer1ReloadVal 006B                                                   _abs 0B8B  
                              ??_EUSART_RxDataHandler 0070                        ?_EUSART_SetFramingErrorHandler 0072  
                             ?_Sensor_loadADCSettings 0073                                       _TMR2_Initialize 09B3  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0073                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0019                        Sensor_getScanGroupIndex@sensor 0074  
                   __size_of_MTOUCH_Sensor_Initialize 0016                             ?_MTOUCH_Sensor_Initialize 0070  
                      ??_Button_State_ReleaseDebounce 0026                                                  l1020 0769  
                                                l1031 077F                                                  l1016 0776  
                                                l1033 0781                                                  l1017 075F  
                                                l1009 0733                                                  l1026 077B  
                                                l1035 0782                                                  ?_abs 0072  
                                                l1028 077D                                                  l1038 078B  
                                                l1136 0ACD                                                  l4201 0D8B  
                                                l4203 0D9C                                                  l1564 0BA4  
                                                l4221 09AC                                                  l4301 0369  
                                                l4213 09C5                                                  l1573 0D42  
                                                l4231 0A2C                                                  l4207 0D9E  
                                                l1567 0BA4                                                  l4303 0372  
                                                l4311 03A9                                                  l4233 0A2E  
                                                l4225 09F0                                                  l4217 0B8B  
                                                l4321 03F8                                                  l4313 03CF  
                                                l4305 0391                                                  l4241 0A6E  
                                                l4401 00F3                                                  l4331 0AC5  
                                                l4323 0ABA                                                  l3371 052E  
                                                l4235 0A30                                                  l4227 09E4  
                                                l4219 0B98                                                  l4315 03D8  
                                                l4307 039F                                                  l4243 0A73  
                                                l4411 0118                                                  l4403 0105  
                                                l5115 047F                                                  l5051 0732  
                                                l5043 072B                                                  l4333 0ACC  
                                                l4325 0ABB                                                  l3373 052F  
                                                l3541 0F3D                                                  l4237 0A33  
                                                l4229 0A29                                                  l4317 03DD  
                                                l4309 03A4                                                  l4253 0A0C  
                                                l4421 012B                                                  l4413 011B  
                                                l4405 0108                                                  l4341 006D  
                                                l5117 0484                                                  l5061 0753  
                                                l5053 073B                                                  l5045 072E  
                                                l4327 0ABF                                                  l3375 056F  
                                                l3543 0FA2                                                  l3535 0EF9  
                                                l4239 0A35                                                  l4319 03F0  
                                                l4255 0A11                                                  l4271 02A3  
                                                l4263 0295                                                  l4511 024A  
                                                l4503 023E                                                  l4431 013F  
                                                l4423 012D                                                  l4415 011D  
                                                l4407 010E                                                  l4351 008E  
                                                l4343 0074                                                  l3551 0C41  
                                                l5071 0773                                                  l5055 0741  
                                                l5063 0756                                                  l5047 072F  
                                                l4329 0AC3                                                  l3377 0571  
                                                l3369 052A                                                  l4337 0A80  
                                                l3545 0FC0                                                  l3537 0F12  
                                                l4249 0A7D                                                  l4281 02E4  
                                                l4273 02AB                                                  l4521 026C  
                                                l4513 024F                                                  l4441 014A  
                                                l4433 0141                                                  l4425 0130  
                                                l4409 0117                                                  l4417 0120  
                                                l4361 00AB                                                  l4353 0093  
                                                l4345 0079                                                  l4601 066B  
                                                l3553 0C4B                                                  l3801 09B6  
                                                l5065 0761                                                  l5057 074E  
                                                l5073 0783                                                  l5049 0730  
                                                l4339 0A85                                                  l3547 0FDA  
                                                l3539 0F2D                                                  l4195 0D78  
                                                l4259 0A13                                                  l4291 033D  
                                                l4283 02ED                                                  l4275 02BC  
                                                l4267 029B                                                  l4531 0289  
                                                l4523 0276                                                  l4515 0254  
                                                l4507 0240                                                  l4451 0167  
                                                l4443 014D                                                  l4435 0142  
                                                l4419 0129                                                  l4427 0132  
                                                l4363 00AE                                                  l4355 0096  
                                                l4347 007E                                                  l4611 0687  
                                                l4603 0670                                                  l3555 0C5E  
                                                l3731 0002                                                  l3811 0B2B  
                                                l3803 09B7                                                  l5067 076B  
                                                l5059 0751                                                  l3549 0FF0  
                                                l4197 0D89                                                  l4189 0D77  
                                                l4285 0313                                                  l4277 02CE  
                                                l4269 02A0                                                  l4293 0950  
                                                l4533 028B                                                  l4525 0280  
                                                l4517 025D                                                  l4509 0245  
                                                l4461 01AA                                                  l4453 017E  
                                                l4445 0152                                                  l4437 0143  
                                                l4429 0138                                                  l4365 00B6  
                                                l4357 009E                                                  l4349 0086  
                                                l4373 00C1                                                  l4613 0692  
                                                l4605 0678                                                  l4701 0C80  
                                                l3741 0DEB                                                  l3821 0B3B  
                                                l3813 0B2D                                                  l3805 09B8  
                                                l5069 076F                                                  l4631 0D67  
                                                l4623 0D45                                                  l4287 0320  
                                                l4279 02DA                                                  l4295 0935  
                                                l4535 028D                                                  l4527 0285  
                                                l4519 0267                                                  l4471 01E3  
                                                l4463 01B3                                                  l4455 0183  
                                                l4447 0156                                                  l4439 0147  
                                                l4375 00C6                                                  l4367 00BE  
                                                l4359 00A6                                                  l4615 06A2  
                                                l4543 0990                                                  l4703 0C82  
                                                l3735 0947                                                  l3671 0965  
                                                l3751 0DFD                                                  l3743 0DF4  
                                                l3647 0977                                                  l3815 0B31  
                                                l3807 0B27                                                  l3921 0CA0  
                                                l4641 0EB5                                                  l4633 0D6E  
                                                l4625 0D51                                                  l4289 0329  
                                                l4297 0938                                                  l4537 028F  
                                                l4529 0287                                                  l4481 0216  
                                                l4473 01F5                                                  l4465 01C5  
                                                l4457 0193                                                  l4449 0161  
                                                l4377 00CB                                                  l4385 00D4  
                                                l4617 06A6                                                  l4609 067A  
                                                l4545 0997                                                  l4705 099E  
                                                l3649 0954                                                  l3729 0002  
                                                l3673 0959                                                  l3665 096B  
                                                l3761 0E1B                                                  l3753 0DFE  
                                                l3745 0DF7                                                  l3737 0DE2  
                                                l4561 0A98                                                  l4801 07F1  
                                                l3817 0B32                                                  l3809 0B29  
                                                l3923 0CA9                                                  l3931 0CB6  
                                                l3915 0C90                                                  l3851 0CEB  
                                                l4555 0B55                                                  l4547 0B40  
                                                l4643 0ECC                                                  l4635 0CBB  
                                                l4627 0D56                                                  l4715 0B25  
                                                l4707 0B11                                                  l4299 0361  
                                                l4491 0227                                                  l4483 0217  
                                                l4475 01FE                                                  l4459 0198  
                                                l4467 01CE                                                  l4387 00D9  
                                                l4619 06AC                                                  l4571 0E4D  
                                                l4651 06BC                                                  l4811 042A  
                                                l4563 09A5                                                  l3667 0971  
                                                l3763 0E1C                                                  l3755 0E05  
                                                l3747 0DF9                                                  l3739 0DE4  
                                                l4731 0D32                                                  l4723 0D16  
                                                l4803 07F5                                                  l3819 0B34  
                                                l3925 0CAD                                                  l3917 0C90  
                                                l3853 0CED                                                  l4549 0B45  
                                                l4645 0EE8                                                  l4741 0A66  
                                                l4637 0CD5                                                  l4629 0D60  
                                                l4709 0B16                                                  l4493 022B  
                                                l4485 0219                                                  l4469 01DE  
                                                l4389 00DE                                                  l4397 00E7  
                                                l4581 0649                                                  l4573 0E50  
                                                l4565 0E23                                                  l4661 06CC  
                                                l4653 06C0                                                  l4813 0433  
                                                l4821 044D                                                  l3669 095F  
                                                l3765 0E1D                                                  l3757 0E0C  
                                                l3749 0DFB                                                  l4725 0D1F  
                                                l4733 0D36                                                  l4805 07FA  
                                                l3781 0BB0                                                  l3773 0BA5  
                                                l3927 0CB3                                                  l3919 0C9B  
                                                l3855 0CFE                                                  l4751 061A  
                                                l4639 0EAC                                                  l4743 0A68  
                                                l4735 0A5D                                                  l4719 09FD  
                                                l4495 022F                                                  l4487 021D  
                                                l4479 0211                                                  l4399 00F0  
                                                l4583 064D                                                  l4575 0E59  
                                                l4567 0E2B                                                  l4671 06E9  
                                                l4663 06D4                                                  l4655 06C5  
                                                l4823 0457                                                  l4815 0439  
                                                l4807 03FF                                                  l3767 0E1E  
                                                l3759 0E17                                                  l4727 0D27  
                                                l4559 0A93                                                  l4647 0AE5  
                                                l4911 0AB1                                                  l4903 0AA5  
                                                l3791 0BBD                                                  l3783 0BB3  
                                                l3775 0BA9                                                  l3929 0CB4  
                                                l3857 0D0F                                                  l3865 0D12  
                                                l3849 0CE6                                                  l4753 0628  
                                                l4745 05B3                                                  l4737 0A61  
                                                l4761 07A7                                                  l4921 0A50  
                                                l4913 0A4A                                                  l4497 0233  
                                                l4489 0224                                                  l4593 0656  
                                                l4585 0651                                                  l4577 0E5E  
                                                l4569 0E34                                                  l4681 070B  
                                                l4673 06ED                                                  l4657 06CA  
                                                l4825 045D                                                  l4817 043D  
                                                l4833 0472                                                  l4809 041D  
                                                l4729 0D2B                                                  l4905 0AA8  
                                                l3793 097D                                                  l3785 0BB5  
                                                l3777 0BAC                                                  l3859 0D10  
                                                l4755 0630                                                  l4747 0601  
                                                l4739 0A62                                                  l4763 07AB  
                                                l4771 04AC                                                  l4923 0A55  
                                                l4499 0238                                                  l4587 0655  
                                                l4579 063B                                                  l4683 0715  
                                                l4675 06F3                                                  l4667 06D6  
                                                l4827 0461                                                  l4835 0495  
                                                l4819 0442                                                  l4851 0BEA  
                                                l4907 0AAB                                                  l3795 0980  
                                                l3787 0BB9                                                  l3779 0BAE  
                                                l3885 09BB                                                  l4749 0612  
                                                l4765 07B5                                                  l4757 0790  
                                                l4781 04FE                                                  l4773 04C6  
                                                l4597 0661                                                  l4685 071F  
                                                l4677 06F7                                                  l4669 06E3  
                                                l4693 0C68                                                  l4829 0466  
                                                l4853 0BEE                                                  l4941 0C3E  
                                                l4933 0C2D                                                  l4925 0C1D  
                                                l4909 0AAE                                                  l3789 0BBB  
                                                l3797 094B                                                  l4767 07C6  
                                                l4759 07A2                                                  l4783 051D  
                                                l4775 04CD                                                  l4791 0E7D  
                                                l4871 0F4E                                                  l4919 0A4C  
                                                l4599 0667                                                  l4679 0701  
                                                l4695 0C6F                                                  l4855 0BF2  
                                                l4847 0BDD                                                  l4935 0C30  
                                                l4927 0C23                                                  l3799 09B3  
                                                l3889 0943                                                  l4785 0524  
                                                l4777 04D5                                                  l4769 0498  
                                                l4793 0E9A                                                  l4881 0F88  
                                                l4873 0F5A                                                  l4689 0729  
                                                l4697 0C73                                                  l4937 0C38  
                                                l4929 0C2B                                                  l4865 0BCE  
                                                l4857 0BC0                                                  l4779 04ED  
                                                l4787 0E63                                                  l4883 0F8F  
                                                l4875 0F66                                                  l4699 0C74  
                                                l4891 0B5A                                                  l4939 0C3B  
                                                l4867 0BD2                                                  l4859 0BCC  
                                                l4795 07EF                                                  l4789 0E75  
                                                l4877 0F73                                                  l4893 0B63  
                                                l4885 0B58                                                  l4869 0BD7  
                                                l4879 0F7D                                                  l4967 0AFA  
                                                l4897 0B65                                                  l4969 0B0C  
                                                l4899 0B6F                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u4000 00B6  
                                                u4001 00B5                                                  u3210 09C2  
                                                u4010 00BE                                                  u3211 09C0  
                                                u4011 00BD                                                  u3220 09C3  
                                                u3140 0CEB                                                  u4100 0152  
                                                u4020 00C6                                                  u3141 0CEA  
                                                u4101 0151                                                  u4021 00C5  
                                                u4110 0156                                                  u4030 00CB  
                                                u4111 0155                                                  u4031 00CA  
                                                u3160 0CFE                                                  u4200 0224  
                                                u4120 015B                                                  u4040 00D3  
                                                u3161 0CFD                                                  u4201 0223  
                                                u4121 015A                                                  u4041 00D2  
                                                u3250 0C96                                                  u4210 0238  
                                                u4130 0161                                                  u4050 00D9  
                                                u3251 0C95                                                  u3155 0CF0  
                                                u4211 0237                                                  u4131 0160  
                                                u4051 00D8                                                  u3260 0C9B  
                                                u3180 0D0F                                                  u2540 052E  
                                                u4220 023E                                                  u4140 0166  
                                                u4060 00DE                                                  u4300 0A98  
                                                u3261 0C9A                                                  u3181 0D0E  
                                                u2541 052D                                                  u4221 023D  
                                                u4141 0165                                                  u4061 00DD  
                                                u4301 0A97                                                  u3270 0CB3  
                                                u2550 0540                                                  u4230 0245  
                                                u4150 0183                                                  u4070 00E6  
                                                u4310 0E34                                                  u5030 073B  
                                                u3271 0CB2                                                  u3175 0D01  
                                                u4231 0244                                                  u4151 0182  
                                                u4071 00E5                                                  u4311 0E33  
                                                u5031 073A                                                  u4400 0EB5  
                                                u2560 0582                                                  u4240 024F  
                                                u4160 0198                                                  u4080 00F0  
                                                u4320 0E59                                                  u5040 0741  
                                                u4401 0EB4                                                  u4241 024E  
                                                u4161 0197                                                  u4081 00EF  
                                                u4321 0E58                                                  u5041 0740  
                                                u4250 025D                                                  u4170 01E3  
                                                u4090 010E                                                  u4330 0667  
                                                u5050 074E                                                  u2555 053C  
                                                u4251 025C                                                  u4171 01E2  
                                                u4091 010D                                                  u4331 0666  
                                                u5107 076C                                                  u5051 074D  
                                                u4260 0267                                                  u4180 0216  
                                                u4340 0678                                                  u4500 070B  
                                                u5060 075F                                                  u2565 057E  
                                                u4261 0266                                                  u4181 0215  
                                                u4341 0677                                                  u4501 070A  
                                                u5061 075E                                                  u2910 0FC0  
                                                u4270 0276                                                  u4190 021D  
                                                u4350 0687                                                  u4510 0715  
                                                u4430 06C5                                                  u5070 0769  
                                                u4415 0EBE                                                  u2911 0FBF  
                                                u4271 0275                                                  u4191 021C  
                                                u4351 0686                                                  u4511 0714  
                                                u4431 06C4                                                  u5071 0768  
                                                u4600 0628                                                  u2920 0FDA  
                                                u3800 029A                                                  u4280 0280  
                                                u4360 0692                                                  u4520 071F  
                                                u4440 06CA                                                  u5080 077B  
                                                u4601 0627                                                  u4425 0ED9  
                                                u2921 0FD9                                                  u2905 0FB5  
                                                u3801 0299                                                  u4281 027F  
                                                u4361 0691                                                  u4521 071E  
                                                u4441 06C9                                                  u5081 077A  
                                                u4290 0B45                                                  u4610 07A2  
                                                u3810 02A0                                                  u4370 06AC  
                                                u4450 06D4                                                  u4530 0C73  
                                                u2930 0C4B                                                  u5090 078B  
                                                u4291 0B44                                                  u4611 07A1  
                                                u3811 029F                                                  u4371 06AB  
                                                u4451 06D3                                                  u4531 0C72  
                                                u2931 0C4A                                                  u5091 078A  
                                                u4620 07C6                                                  u4700 0E9A  
                                                u4540 0B16                                                  u3740 0D89  
                                                u3900 03F0                                                  u3820 02ED  
                                                u4460 06E3                                                  u2940 0C5E  
                                                u4621 07C5                                                  u4701 0E99  
                                                u4541 0B15                                                  u3741 0D88  
                                                u3901 03EF                                                  u3821 02EC  
                                                u4365 068E                                                  u4461 06E2  
                                                u2941 0C5D                                                  u3910 0ABF  
                                                u4630 07D7                                                  u3750 0D9C  
                                                u3830 0329                                                  u4470 06E9  
                                                u4550 0D42                                                  u4710 07FF  
                                                u3911 0ABE                                                  u3751 0D9B  
                                                u3831 0328                                                  u4471 06E8  
                                                u4551 0D41                                                  u4711 07FE  
                                                u3920 0ACC                                                  u4560 0A61  
                                                u4640 04AC                                                  u2880 0F12  
                                                u4800 0F66                                                  u3760 0DA7  
                                                u4480 06F3                                                  u4720 0433  
                                                u3921 0ACB                                                  u4561 0A60  
                                                u4385 0D48                                                  u4641 04AB  
                                                u2881 0F11                                                  u4801 0F65  
                                                u3761 0DA6                                                  u4481 06F2  
                                                u4721 0432                                                  u4570 05C5  
                                                u3930 0A85                                                  u4650 04C6  
                                                u2890 0F2D                                                  u4810 0F73  
                                                u3770 0B98                                                  u3850 0372  
                                                u4490 0701                                                  u4730 0439  
                                                u4395 0CDA                                                  u3931 0A84  
                                                u4635 07D3                                                  u4651 04C5  
                                                u2891 0F2C                                                  u4811 0F72  
                                                u3771 0B97                                                  u3851 0371  
                                                u4491 0700                                                  u4731 0438  
                                                u4580 05F7                                                  u4660 04ED  
                                                u4820 0F88                                                  u3780 0A73  
                                                u3940 0079                                                  u4740 0457  
                                                u4661 04EC                                                  u2885 0F0E  
                                                u4821 0F87                                                  u3781 0A72  
                                                u3845 0352                                                  u3941 0078  
                                                u4741 0456                                                  u4590 0612  
                                                u4670 051D                                                  u3870 0391  
                                                u3790 0A11                                                  u3950 007E  
                                                u4750 045D                                                  u4830 0B63  
                                                u4591 0611                                                  u4575 05C1  
                                                u4671 051C                                                  u3775 0B94  
                                                u3871 0390                                                  u3791 0A10  
                                                u3951 007D                                                  u4751 045C  
                                                u4831 0B62                                                  u4680 0E75  
                                                u3880 039F                                                  u3960 0086  
                                                u4840 0B6F                                                  u4760 0BE9  
                                                u4585 05F3                                                  u4665 04E9  
                                                u4681 0E74                                                  u3881 039E  
                                                u3865 0383                                                  u3961 0085  
                                                u4841 0B6E                                                  u4761 0BE8  
                                                u4850 0A5A                                                  u3890 03CF  
                                                u3970 008E                                                  u4770 0BFA  
                                                u4851 0A59                                                  u3891 03CE  
                                                u3875 038D                                                  u3971 008D  
                                                u4771 0BF9                                                  u3980 009E  
                                                u4860 0C23                                                  u4780 0BDC  
                                                u3981 009D                                                  u4861 0C22  
                                                u4781 0BDB                                                  u3990 00A6  
                                                u4870 0C2B                                                  u4695 0E8F  
                                                u3895 03CB                                                  u3991 00A5  
                                                u4871 0C2A                                                  u4795 0F51  
                          Button_State_Pressed@button 0025                                                  _TMR2 001A  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 0228                              _Sensor_getScanGroupIndex 0D76  
                           ?_Sensor_Acq_ExecutePacket 0024                                          __CFG_WRT$OFF 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0072  
                                                _main 072B                  __size_of_MTOUCH_Button_InitializeAll 001D  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                __size_of_MTOUCH_Sensor_InitializeAll 0011                                                  btemp 007E  
                                                start 003B                            ??_TMR1_SetInterruptHandler 0074  
                                   ___bmul@multiplier 0075                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 03FD  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1015          Sensor_Scanfrequency_Evaluation@frequency_hop 1010  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 002F  
                       __size_of_Button_State_Pressed 0047                                                 ??_abs 0074  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0020  
                       ??_MTOUCH_Sensor_RawSample_Get 0078                         Sensor_RawSample_Update@sensor 0078  
                           __size_of_Sensor_isEnabled 0012                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                           ?_Button_State_PressDebounce 0025  
                       __end_of_OSCILLATOR_Initialize 0983     Sensor_Scanfrequency_Evaluation@best_packet_sample 003B  
                 __end_of_Sensor_isCalibratingAcqTime 09B3                           _Sensor_isCalibratingAcqTime 09AB  
                                               ?_main 0070                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 035F                                                 _T1CON 0018  
                                               _T2CON 001C                               __size_of_Button_Service 0056  
                                               i1l426 09E2                                                 i1l812 001A  
                                               i1l813 0039                                                 i1l814 002B  
                                               i1l770 0B8A                                                 i1l819 0039  
                                               i1l756 0C1A                                                 i1l773 0932  
                                               i1l766 0DE1                                                 i1l759 0C1C  
                                               i1l776 0942                                                 i1l953 0A49  
                                               i1l779 093E                                                 i1l972 0933  
                                               i1l966 0AE3                                                 _RCREG 0199  
                                               _RCSTA 019D                                                 _TMR1H 0017  
                                               _TMR1L 0016                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                                ??_MTOUCH_needReburst 0072                                      __end_of_TMR1_ISR 0AE4  
                     __size_of_Sensor_DefaultCallback 0001                               __size_of_Sensor_Service 009B  
               __end_of_MTOUCH_Sensor_Scan_Initialize 0A39                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 0A29                                        _WDT_Initialize 094B  
                             Sensor_setSampled@sensor 0072                      __size_of_Button_State_NotPressed 0091  
                             __end_of_TMR1_Initialize 0B3F                                                 pclath 000A  
                                _Sensor_Sampled_Reset 09A4                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 0935  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0007  
                                     _TMR1_WriteTimer 0A39                                Sensor_isEnabled@sensor 0073  
                                     __initialization 003D                                          __end_of_main 0790  
                                _Sensor_setCalibrated 09E3                                        ??_EUSART_Write 0072  
                             __end_of_TMR2_Initialize 09BB                                        __CFG_LPBOR$OFF 0000  
                         ?_INTERRUPT_InterruptManager 0070                          __end_of_MTOUCH_ScanScheduler 09E3  
                      ??_EUSART_SetRxInterruptHandler 0074                                   __wait_to_initialize 005E  
                    __end_of_MTOUCH_Button_Initialize 0D76                                                ??_main 007A  
                             _MTOUCH_Sensor_Calibrate 0A7F                             Sensor_Service@sensor_adc1 0049  
                           Sensor_Service@sensor_adc2 004A                               ??_Button_Reading_Update 007A  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0074                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 094F                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0078             __end_of_EUSART_DefaultFramingErrorHandler 0933  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 0932  
                          _EUSART_OverrunErrorHandler 00D4                  __size_of_MTOUCH_Sensor_RawSample_Get 0019  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _BORCON 0116                                                _T1GCON 0019  
                             TMR1_WriteTimer@timerVal 0070                                                i1l4101 000A  
                                              i1l4111 0030                                                i1l4103 000F  
                                              i1l4113 0035                                                i1l4105 0014  
                                              i1l4107 001F                                                i1l4109 0024  
                                              i1l3621 0A3E                                                i1l3631 0A47  
                                              i1l3623 0A3F                                                i1l3703 09D7  
                                              i1l3625 0A41                                                i1l3705 09DF  
                                              i1l3627 0A43                                                i1l3619 0A39  
                                              i1l4099 0006                                                i1l3629 0A45  
                                              i1l3681 0B84                                                i1l3683 0B85  
                                              i1l3675 0B71                                                i1l3771 093B  
                                              i1l3677 0B7A                                                i1l3941 0C14  
                                              i1l3933 0BFB                                                i1l3679 0B7E  
                                              i1l3951 0DB8                                                i1l3943 0C15  
                                              i1l3935 0C02                                                i1l3769 093F  
                                              i1l3961 0DD7                                                i1l3953 0DBE  
                                              i1l3945 0DA9                                                i1l3937 0C09  
                                              i1l3963 0DDE                                                i1l3955 0DC3  
                                              i1l3947 0DAE                                                i1l3939 0C0E  
                                              i1l3971 0ADE                                                i1l3957 0DC8  
                                              i1l3949 0DB3                                                i1l3965 0ACE  
                                              i1l3959 0DCE                                                i1l3967 0AD0  
                                              u302_20 0A3E                                                u302_21 0A3D  
                                              i1l3969 0AD7                                 ?_Sensor_Sampled_Reset 0070  
                                              u330_20 0DB3                                                u330_21 0DB2  
                                              u331_20 0DC3                                                u331_21 0DC2  
                                              u308_20 0B84                                                u332_20 0DD7  
                                              u308_21 0B83                                                u332_21 0DD6  
                          __end_of_EUSART_is_tx_ready 09C4                                                u333_20 0ADE  
                                              u333_21 0ADD                                                u328_20 0C02  
                                              u360_20 000A                                                u328_21 0C01  
                                              u360_21 0009                                                u329_20 0C14  
                                              u361_20 000F                                                u329_21 0C13  
                                              u361_21 000E                                                u362_20 0014  
                                              u362_21 0013                                                u363_20 001F  
                                              u363_21 001E                                                u364_20 0024  
                                              u364_21 0023                                                u365_20 0030  
                                              u365_21 002F                                                u366_20 0035  
                                              u366_21 0034                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0026  
                      ??_Button_Reading_Update_Helper 0020                       __end_of_MTOUCH_Service_Mainloop 0C40  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 09C4  
                __end_of_TMR1_DefaultInterruptHandler 0934                 __size_of_TMR1_DefaultInterruptHandler 0001  
                        _TMR1_DefaultInterruptHandler 0933                                _Sensor_DefaultCallback 0934  
                                       _packet_sample 004B                                                ___bmul 0AB9  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0072  
                                      __CFG_STVREN$ON 0000                                   _EUSART_Transmit_ISR 0BFB  
                                              _memcpy 0D14                      __end_of_MTOUCH_Button_ServiceAll 0A5B  
                        Sensor_autoCalibration@sensor 0021                               _MTOUCH_Sensor_SampleAll 0B58  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 072B  
                             ?_Button_Baseline_Update 0070                   Sensor_postAcquisitionProcess@sensor 0023  
                             __end_of_TMR2_StartTimer 0938              TMR1_SetInterruptHandler@InterruptHandler 0072  
                  Button_State_ReleaseDebounce@button 0025                    __size_of_Sensor_setCalibratAcqTime 000D  
                             __end_of_TMR1_WriteTimer 0A4A                              __size_of_Sensor_isActive 000F  
                                ?_EUSART_Transmit_ISR 0070                       MTOUCH_Sensor_RawSample_Get@name 0079  
                                    ?_TMR1_Initialize 0070                   Sensor_getScanGroupIndex@sensorGroup 0075  
                                   _SYSTEM_Initialize 0AFA                               __end_of__initialization 0067  
                 __size_of_Button_Baseline_Initialize 002C                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0076                   __size_of_Button_State_PressDebounce 0053  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 00C8  
                          __end_of_Button_Tick_helper 0C67                         MTOUCH_Sensor_Calibrate@sensor 0077  
                __end_of_EUSART_SetTxInterruptHandler 0977                 __size_of_EUSART_SetTxInterruptHandler 0006  
                        _EUSART_SetTxInterruptHandler 0971           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0029  
                                 ___bmul@multiplicand 0072                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0CE5                                          __pidataBANK0 0A1A  
                                        __pidataBANK1 09CD                                   ??_SYSTEM_Initialize 007A  
                                           ?_TMR1_ISR 0070                         ?_TMR1_DefaultInterruptHandler 0070  
                          __end_of_MTOUCH_Button_Tick 0959                      __end_of_MTOUCH_Sensor_Initialize 0AFA  
                           ??_MTOUCH_Sensor_Calibrate 0076                                      _Sensor_isEnabled 0A6D  
                                    ?_TMR2_Initialize 0070                       __end_of_Button_Deviation_Update 0639  
                            Sensor_setInactive@sensor 0072                                        _Button_Service 0F4C  
                    __end_of_Sensor_Acq_ExecutePacket 0293                            ?_Button_State_Initializing 0025  
                                Button_Service@button 002D                                        _OPTION_REGbits 0095  
                               ??_Sensor_isCalibrated 0072                            ??_Sensor_getScanGroupIndex 0072  
                                _eusartRxStatusBuffer 00A0                        __end_of_Button_Baseline_Update 05B2  
                 Sensor_Acq_ExecutePacket@sensor_adc1 0032                   Sensor_Acq_ExecutePacket@sensor_adc2 0024  
                            _MTOUCH_Button_Initialize 0D43                       ??_EUSART_SetOverrunErrorHandler 0074  
                                      _Sensor_Service 03FD                               _Button_State_NotPressed 0498  
                       __size_of_MTOUCH_Sensor_Enable 0013                                    _Sensor_setInactive 0996  
                                   _sensor_scan_group 1015                             __end_of_SYSTEM_Initialize 0B10  
                                   _lowpowerActivated 0059                                 ??_EUSART_Transmit_ISR 0070  
                    MTOUCH_Sensor_isCalibrated@sensor 0077                                ??_Sensor_Sampled_Reset 0072  
                                          __pbssBANK0 004B                                            __pbssBANK1 00A0  
                                __end_of_EUSART_Write 0CB9                               _TMR2_LoadPeriodRegister 094F  
                                _MTOUCH_ScanScheduler 09D7                          Sensor_loadADCSettings@sensor 0023  
                                    _mTouchScanReload 005A                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 098F                           __size_of_EUSART_Receive_ISR 0039  
                          __end_of_mtouch_button_init 1010           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 002A  
                              ??_Sensor_setCalibrated 0072                                            __pmaintext 072B  
                                             ?___bmul 0072                         ?_EUSART_SetTxInterruptHandler 0072  
                    _EUSART_TxDefaultInterruptHandler 006D                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                                          ??_TMR1_ISR 0072                        MTOUCH_Sensor_wasSampled@sensor 0077  
                                          __pintentry 0004                                __end_of_Button_Service 0FA2  
                                             ?_memcpy 0072                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 0BDD  
                         _MTOUCH_Button_InitializeAll 0BC0                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 0800  
                         _MTOUCH_Sensor_InitializeAll 07EF                             ??_MTOUCH_Sensor_SampleAll 00DA  
                     __end_of_Sensor_RawSample_Update 0C8F                                  ??_Sensor_setInactive 0072  
                   __size_of_MTOUCH_Sensor_wasSampled 000F                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 0054                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0072                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 07EF                                __end_of_Sensor_Service 0498  
                             Sensor_Service@scanGroup 0047                              _MTOUCH_Button_ServiceAll 0A4A  
                           __end_of_sensor_scan_group 1017                         __size_of_EUSART_RxDataHandler 001A  
                    __size_of_MTOUCH_Service_Mainloop 0023                          __end_of_Button_State_Pressed 0EAA  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0074  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0024  
                     Sensor_setCalibratAcqTime@sensor 0072                                      ?_TMR1_WriteTimer 0070  
                                __size_of_MTOUCH_Tick 0004                   Sensor_loadADCSettings@addressOffset 0022  
                __size_of_Sensor_isCalibratingAcqTime 0008                                 ?_MTOUCH_ScanScheduler 0070  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0026                             ??_MTOUCH_Button_isPressed 0072  
                                   ??_Sensor_isActive 0072                   __size_of_EUSART_DefaultErrorHandler 0004  
               __end_of_Sensor_postAcquisitionProcess 0E63                __size_of_Sensor_postAcquisitionProcess 0042  
                       _Sensor_postAcquisitionProcess 0E21                               Sensor_Acquisition@retry 0042  
                                     __size_of___bmul 0015                                           _AD1CON0bits 0711  
                      MTOUCH_Button_Initialize@button 0021                                           _AD2CON0bits 0791  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0036  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0033                                       __size_of_memcpy 002F  
                                             __ptext1 0AFA                                               __ptext2 094B  
                                             __ptext3 09B3                                               __ptext4 0B27  
                                             __ptext5 0BA5                                               __ptext6 097D  
                                             __ptext7 0AA5                                               __ptext8 0977  
                                             __ptext9 07EF                           Button_Reading_Update@button 0023  
                      ??_TMR1_DefaultInterruptHandler 0070                                             _T1CONbits 0018  
                            _MTOUCH_Sensor_Initialize 0AE4                                 _OSCILLATOR_Initialize 097D  
                                           _T2CONbits 001C                                          __size_of_abs 001A  
                           ??_Button_State_NotPressed 0026                                       ?_Sensor_Service 0070  
                   __size_of_TMR1_SetInterruptHandler 0006                              ??_PIN_MANAGER_Initialize 0072  
                           ?_TMR1_SetInterruptHandler 0072                        __size_of_Button_Reading_Update 0012  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 0A6D  
                   MTOUCH_Sensor_InitializeAll@sensor 0021                              _Sensor_Acq_ExecutePacket 006B  
                                    _callback_sampled 005C                             ??_TMR2_LoadPeriodRegister 0072  
                     Sensor_RawSample_Update@adcIndex 0077                            __size_of_SYSTEM_Initialize 0016  
                                             clrloop0 0984                        MTOUCH_Sensor_Initialize@sensor 0079  
                                end_of_initialization 0067                 __end_of_EUSART_SetOverrunErrorHandler 096B  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 0965  
                                             memcpy@d 0024                                               memcpy@n 0074  
                                             memcpy@s 0021                                               init_ram 0989  
                                             initloop 098A                               ?_Sensor_DefaultCallback 0072  
                       Sensor_Acquisition@sensor_adc1 0043                         Sensor_Acquisition@sensor_adc2 0040  
                    __size_of_Button_Deviation_Update 0087                                     _EUSART_Initialize 0DE2  
                        ??_MTOUCH_Sensor_isCalibrated 0076                                    ?_EUSART_Initialize 0070  
                 __end_of_MTOUCH_Sensor_RawSample_Get 0B58                           _MTOUCH_Sensor_RawSample_Get 0B3F  
                                           _RCSTAbits 019D                                    _EUSART_is_tx_ready 09BB  
                                 ??_EUSART_Initialize 0074                                      ??_WDT_Initialize 0072  
                      ??_EUSART_SetTxInterruptHandler 0074                                             _PORTAbits 000C  
                              Sensor_setActive@sensor 0072                                   ?_EUSART_is_tx_ready 0070  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0039  
                       Button_Deviation_Update@button 0072                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0027  
                               __size_of_EUSART_Write 002A                            MTOUCH_Sensor_Enable@sensor 0077  
                        _MTOUCH_Button_isPressed$1119 0073                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0028  
                 __size_of_MTOUCH_Sensor_isCalibrated 0017                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0037                                ??_MTOUCH_ScanScheduler 0072  
                                  _sensor_globalFlags 0058                              __end_of_Sensor_isEnabled 0A7F  
                          Sensor_setCalibrated@sensor 0072                        __end_of_Sensor_DefaultCallback 0935  
                           __end_of_EUSART_Initialize 0E21                                  ??_EUSART_is_tx_ready 0072  
                          _Sensor_loadADCSettings$507 0020                              ??_Sensor_autoCalibration 0076  
                                           _TXSTAbits 019E                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 06BA                              ??_Sensor_loadADCSettings 0074  
                                _Button_State_Pressed 0E63                                        __end_of___bmul 0ACE  
                  __end_of_EUSART_DefaultErrorHandler 093F                            _EUSART_DefaultErrorHandler 093B  
                                 ?_Sensor_Acquisition 0040                            ??_MTOUCH_Button_Initialize 0078  
                     ??_MTOUCH_Sensor_Scan_Initialize 0072                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 0C8F                                     __size_of_TMR1_ISR 0016  
                                  _Button_Tick_helper 0C40                                        __end_of_memcpy 0D43  
                              ?_OSCILLATOR_Initialize 0070                              __end_of_Sensor_setActive 0996  
                    TMR2_LoadPeriodRegister@periodVal 0072                           ??_Button_State_Initializing 0026  
                                 start_initialization 003D                               _MTOUCH_Service_Mainloop 0C1D  
                     __size_of_PIN_MANAGER_Initialize 001B                                    _MTOUCH_Button_Tick 0954  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 0BA5  
                                      _TMR2_StopTimer 0938          EUSART_SetRxInterruptHandler@interruptHandler 0072  
        EUSART_SetTxInterruptHandler@interruptHandler 0072                                  ??_Sensor_Acquisition 0041  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0025  
                      Sensor_autoCalibration@adcIndex 0020                        ?_EUSART_SetOverrunErrorHandler 0072  
                    __end_of_MTOUCH_Sensor_wasSampled 0A0B                                  ??_Button_Tick_helper 0072  
                            __size_of_TMR1_Initialize 0018                          __end_of_MTOUCH_Sensor_Enable 0AA5  
                                        _packet_noise 0051                            _EUSART_FramingErrorHandler 00D6  
                                            ??___bmul 0073                                 ?_Button_State_Pressed 0025  
                              _EUSART_SetErrorHandler 0959                            ??_MTOUCH_Button_ServiceAll 002E  
                                         __pdataBANK0 005A                                           __pdataBANK1 00C8  
                                            ??_memcpy 0076                           __end_of_Sensor_isCalibrated 09CD  
                        ??_Button_Baseline_Initialize 0020                                         _sample_period 005F  
                                ??_MTOUCH_Button_Tick 0075                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0072                          ??_Button_State_PressDebounce 0026  
                        ?_Sensor_isCalibratingAcqTime 0070                           __end_of_EUSART_Transmit_ISR 0C1D  
                              __end_of_TMR2_StopTimer 093B                                           __pbssCOMMON 007A  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00DA                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 0A0B                        MTOUCH_Button_ServiceAll@button 002F  
                                 Sensor_Service@error 0048                            __end_of_EUSART_Receive_ISR 0DE2  
                       __size_of_Sensor_Sampled_Reset 0007                            __size_of_EUSART_Initialize 003F  
                             _Button_Deviation_Update 05B2                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00D8                             _Button_State_Initializing 0790  
                  __end_of_MTOUCH_Sensor_isCalibrated 0B27                            _MTOUCH_Sensor_isCalibrated 0B10  
                                           __pnvBANK0 0069                                             __pnvBANK1 00D2  
                     __size_of_Sensor_autoCalibration 009E                     __size_of_Sensor_getScanGroupIndex 0033  
                                   _Sensor_setSampled 099D                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 0B8B                                _PIN_MANAGER_Initialize 0BA5  
                                    ??_Button_Service 002A                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 0022  
                    __end_of_TMR1_SetInterruptHandler 097D                            ??_MTOUCH_Sensor_Initialize 0078  
                       __size_of_Sensor_setCalibrated 000C                       __size_of_Sensor_loadADCSettings 00CC  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007B                                              _AAD2RES0 079A  
                                        _eusartTxHead 0056                                          _eusartRxTail 007A  
                                        _eusartTxTail 0055                                      ??_Sensor_Service 0044  
                          ??_Sensor_Acq_ExecutePacket 0025                          ??_INTERRUPT_InterruptManager 0072  
                                 ??_Sensor_setSampled 0072                             ??_MTOUCH_Service_Mainloop 00DC  
                                            _ADCOMCON 0712                               _eusartTxBufferRemaining 006F  
                         __size_of_Sensor_setInactive 0007                        Sensor_Acq_ExecutePacket@last_a 002D  
                      Sensor_Acq_ExecutePacket@last_b 002F                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0072                                         ??_MTOUCH_Tick 0075  
                                      _eusartRxBuffer 00A8                                        _eusartTxBuffer 00B0  
                           __end_of_Sensor_setSampled 09A4                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0072                                              _LATCbits 010E  
                             _Sensor_RawSample_Update 0C67                     __end_of_Sensor_setCalibratAcqTime 09FC  
                                           clear_ram0 0983                                              _PIE1bits 0091  
                                   _eusartRxLastError 0053                              __size_of_TMR2_StartTimer 0003  
                            __size_of_TMR1_WriteTimer 0011                   __size_of_INTERRUPT_InterruptManager 0037  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0074  
              Sensor_Acq_ExecutePacket@packet_counter 0031                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 0026                                     _EUSART_is_tx_done 0943  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 0BFB               __size_of_MTOUCH_Sensor_Sampled_ResetAll 001E  
                      _MTOUCH_Sensor_Sampled_ResetAll 0BDD                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 0943            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 093F                                              _TMR1_ISR 0ACE  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 002B                                    ?_EUSART_is_tx_done 0070  
                            _MTOUCH_Sensor_wasSampled 09FC                                    _mtouch_time_toScan 0057  
                            ??_Button_Baseline_Update 0072                                     ??_TMR1_Initialize 0074  
                             __end_of_Sensor_isActive 0A1A                                _Sensor_autoCalibration 035F  
                          __end_of_MTOUCH_needReburst 0004                                   ??_EUSART_is_tx_done 0072  
                              _Sensor_loadADCSettings 0293                                  _MTOUCH_Sensor_Enable 0A92  
                            Button_Tick_helper@button 0074                             ??_Button_Deviation_Update 0020  
                               _Button_Reading_Update 0A5B                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                     ??_TMR2_Initialize 0072  
                                 __end_of_MTOUCH_Tick 094B                                     _MTOUCH_Initialize 0AA5  
                     __end_of_MTOUCH_Sensor_Calibrate 0A92                                    ??_Sensor_isEnabled 0072  
                           __end_of_EUSART_is_tx_done 0947                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 0021                                             memcpy@tmp 0020  
                                          _APFCONbits 011D                               ??_OSCILLATOR_Initialize 0072  
                  __end_of_Button_Baseline_Initialize 0CE5                            _Button_Baseline_Initialize 0CB9  
                                 _EUSART_ErrorHandler 00D2                                   ??_MTOUCH_Initialize 007A  
                         ?_EUSART_DefaultErrorHandler 0070                    __end_of_Button_State_PressDebounce 0F4C  
                          _Button_State_PressDebounce 0EF9                              ?_Button_State_NotPressed 0025  
                __end_of_Button_State_ReleaseDebounce 1000                 __size_of_Button_State_ReleaseDebounce 005E  
                        _Button_State_ReleaseDebounce 0FA2                              _TMR1_SetInterruptHandler 0977  
                                  Button_Service@name 002C                                 _TMR1_InterruptHandler 0069  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0072                  Sensor_Scanfrequency_Evaluation@retry 003A  
                                  ??_Sensor_setActive 0072                                  _EUSART_RxDataHandler 0B71  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 0AE4  
                                            __ptext11 0A92                                              __ptext20 0C1D  
                                            __ptext12 0BC0                                              __ptext21 0002  
                                            __ptext13 0D14                                            _T1GCONbits 0019  
                                            __ptext30 0C67                                              __ptext22 0947  
                                            __ptext14 0DE2                                              __ptext31 0934  
                                            __ptext23 0954                                              __ptext15 0971  
                                            __ptext40 094F                                              __ptext32 06BA  
                                            __ptext24 0C40                                              __ptext16 096B  
                                            __ptext41 0293                                              __ptext33 0E21  
                                            __ptext25 0BDD                                              __ptext17 0965  
                                            __ptext50 0D76                                              __ptext42 09C4  
                                            __ptext34 0996                                              __ptext26 09A4  
                                            __ptext18 095F                                              __ptext51 0A29  
                                            __ptext43 0A6D                                              __ptext35 098F  
                                            __ptext27 0B58                                              __ptext19 0959  
                                            __ptext60 0FA2                                              __ptext52 0A4A  
                                            __ptext44 0A0B                                              __ptext36 0639  
                                            __ptext28 03FD                                              __ptext61 0D43  
                                            __ptext53 0F4C                                              __ptext45 035F  
                                            __ptext37 006B                                              __ptext29 099D  
                                            __ptext70 0CE5                                              __ptext62 0A7F  
                                            __ptext54 09FC                                              __ptext46 0B8B  
                                            __ptext38 0938                                              __ptext71 09BB  
                                            __ptext63 0529                                              __ptext55 0B10  
                                            __ptext47 09E3                                              __ptext39 0935  
                                            __ptext80 0DA9                                              __ptext72 0943  
                                            __ptext64 0CB9                                              __ptext56 0E63  
                                            __ptext48 09EF                                              __ptext81 093F  
                                            __ptext73 0C8F                                              __ptext65 0A5B  
                                            __ptext57 0EF9                                              __ptext49 09AB  
                                            __ptext82 0932                                              __ptext66 0EAA  
                                            __ptext58 0498                                              __ptext83 093B  
                                            __ptext75 0ACE                                              __ptext67 0B3F  
                                            __ptext59 0790                                              __ptext84 0B71  
                                            __ptext76 09D7                                              __ptext68 0AB9  
                                            __ptext77 0933                                              __ptext69 05B2  
                                            __ptext78 0A39                                              __ptext79 0BFB  
                           __end_of_MTOUCH_Initialize 0AB9                             ??_Sensor_RawSample_Update 0076  
                       __size_of_MTOUCH_ScanScheduler 000C                            __size_of_Sensor_setSampled 0007  
                                       __size_of_main 0065                           __size_of_EUSART_is_tx_ready 0009  
                     __end_of_MTOUCH_Sensor_SampleAll 0B71                      Sensor_Scanfrequency_Evaluation@i 003F  
                             ?_EUSART_SetErrorHandler 0072         EUSART_SetOverrunErrorHandler@interruptHandler 0072  
                                            int$flags 007E                    __size_of_Button_State_Initializing 005F  
                                   ??_TMR2_StartTimer 0072                    __end_of_INTERRUPT_InterruptManager 003B  
                          _INTERRUPT_InterruptManager 0004                 __end_of_EUSART_SetFramingErrorHandler 0965  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 095F  
                                   ??_TMR1_WriteTimer 0072                       __size_of_Button_Baseline_Update 0089  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 00DB  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                       ?_Button_State_ReleaseDebounce 0025                                         _mtouch_button 00B8  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 0060                                              memcpy@d1 0023  
                                            memcpy@s1 0072                       __end_of_MTOUCH_Button_isPressed 0D14  
                    __end_of_Sensor_getScanGroupIndex 0DA9                                     __CFG_BOREN$NSLEEP 0000  
                                         _MTOUCH_Tick 0947                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0073                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0020                     __size_of_MTOUCH_Button_Initialize 0033  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 0071               __end_of_Sensor_Scanfrequency_Evaluation 06BA  
            __size_of_Sensor_Scanfrequency_Evaluation 0081                     ??_Sensor_Scanfrequency_Evaluation 0034  
                    ?_Sensor_Scanfrequency_Evaluation 0033                       _Sensor_Scanfrequency_Evaluation 0639  
                             ?_PIN_MANAGER_Initialize 0070                           ??_Sensor_setCalibratAcqTime 0072  
                      __end_of_EUSART_SetErrorHandler 095F                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                            __size_of_EUSART_is_tx_done 0004  
                __end_of_EUSART_SetRxInterruptHandler 0971                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 096B                                     __first_delay_cntr 004F  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 0529  
                                  _EUSART_Receive_ISR 0DA9         EUSART_SetFramingErrorHandler@interruptHandler 0072  
                        __end_of_Sensor_Sampled_Reset 09AB                                      ??_TMR2_StopTimer 0072  
                     __end_of_TMR2_LoadPeriodRegister 0954                           __size_of_MTOUCH_Button_Tick 0005  
                                       __pstringtext1 1010                                         __pstringtext2 1015  
                                       __pstringtext3 1000                                   ?_EUSART_Receive_ISR 0070  
                       ??_MTOUCH_Button_InitializeAll 0025                         ??_MTOUCH_Sensor_InitializeAll 0020  
                Sensor_Acq_ExecutePacket@activeSensor 002C                      __size_of_MTOUCH_Sensor_Calibrate 0013  
                              ??_MTOUCH_Sensor_Enable 0076                     Sensor_isCalibratingAcqTime@sensor 0072  
                        __size_of_Sensor_isCalibrated 0009                              ??_Sensor_DefaultCallback 0073  
                        __end_of_Sensor_setCalibrated 09EF                  __end_of_Button_Reading_Update_Helper 0EF9  
               __size_of_Button_Reading_Update_Helper 004F                          _Button_Reading_Update_Helper 0EAA  
                   __size_of_MTOUCH_Button_ServiceAll 0011                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0025                                    EUSART_Write@txData 0073  
                        __size_of_EUSART_Transmit_ISR 0022                            __size_of_MTOUCH_Initialize 0014  
                      __end_of_PIN_MANAGER_Initialize 0BC0                                _Button_Baseline_Update 0529  
                         MTOUCH_Button_isPressed@name 0074                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0076                                       _TMR1_Initialize 0B27  
                    Button_State_PressDebounce@button 0025  
